using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using DIHRMS;
using SAPbobsCOM;
using SAPbouiCOM;

namespace ACHR.Screen
{
    class frm_AttProcess : HRMSBaseForm
    {
        #region Variables

        private bool Validate;
        SAPbouiCOM.Button btnNext, btnSerch, btnClear, btnBack, btnSave, btnPost, btnIAR, btnEAR, btnID, btnId2, btnOK, btSaveDirect, btnVoid;
        SAPbouiCOM.EditText txtEmpFrom, txtEmpTo, txtFromDate, txtToDate;
        SAPbouiCOM.ComboBox cmbLocation, cmbDepartment, cmbDesignation, cmbPayroll, cmbPeriod, cmbBranch;
        SAPbouiCOM.DataTable dtEmployees, dtAttendance;
        SAPbouiCOM.Matrix grdEmployees, grdAttendance;
        SAPbouiCOM.Columns oColumns;
        SAPbouiCOM.Column oColumn, clId, clLeaveCount, clNo, clEmpCode, clIsNewLeave, EmpName, Desig, Depart, Location, clShiftTimeIn, clShiftTiemOut, clShiftCode, clTodayDate, clReportingTime, clTimeIn, clTimeOut, clWorkHours, clsWmin, clsUmin, clsOTmin, clOTType, clOTHour, clLeaveType, clLeaveHour, clShiftHours, clStatus, clDescription, clIsSelected, clCostCenter, clDRType, clLateInMinutes, clEarlyOutMinutes, clPreTimeIn, clPreTimeOut, clModify, clDay, clRemarks, clsShortHrs;
        SAPbouiCOM.Column clAdjustedHours, clTotalHours, clOverTimeAdjustment, clStandardHours;
        SAPbouiCOM.Item IgrdEmployees, IgrdAttendance, ItxtEmpIdFrom, ItxtEmpIdTo, IbtnID, IbtnId2, Icb_Location, Icb_depart, Icb_deignation, ItxtFromDate, ItxtToDate, IbtnBack, IbtnSave, IbtnPost, IbtnIAR, IbtnEAR, IbtnOK, icmbPayroll, icmbPeriod, icmbBranch, IbtSaveDirect, IbtnVoid;
        SAPbouiCOM.OptionBtn optProcessedAttendance, optPostedAttendance;
        public int unit = 15;
        public int OTunit = 30;
        System.Data.DataTable dtCostCenterPerDay = null;
        TimeSpan t3 = TimeCalculate("00:00");
        TimeSpan ActualWHrs = TimeCalculate("00:00");
        TimeSpan SFTimeOut = TimeCalculate("00:00");
        TimeSpan totalshifthrs = TimeCalculate("00:00");
        TimeSpan totalOverTime = TimeCalculate("00:00");
        TimeSpan totalWorkhrs = TimeCalculate("00:00");
        string wr = "";
        string strDeductionRule, TempLeaveHours, CompanyName;
        double totalunit = 0;
        int TotalMints = 0;
        int Totalhrs = 0;
        int remainder = 1;
        int UnitValue = 1;
        int UnitsInDay = 0;
        int WorkHourPayroll = 0;
        int TotalLateInCount = 0;
        int TotalEarlyOutCount = 0;
        int TotalcountCheck = 0;
        int TotalLateINEarlyOut = 0;
        int TotalLateINEarlyOutMemory = 0;
        decimal TotalCount = 0M;
        Boolean flgEmpFrom, flgEmpTo, flgLeaveIsNew, flgOverTime, flgInOverLap, flgOutOverLap, flgProcessed, flgNewImport, flgPosted;
        Boolean flgSave_Posted = false, flgDirectSave = false;
        DateTime dtFrom, dtTo;
        String FromDate = "", ToDate = "";
        decimal leaveTypeCountUsed1 = 0M;
        decimal leaveTypeCountUsed2 = 0M;
        decimal leaveTypeCountUsed3 = 0M;
        int OTLimit = 30;

        List<clsEmployeeLeaveBalance> oEmployeeLeaveBalance;
        List<EmployeeLeaves> oEmployeeLeaveCollection;
        #region Formula Based OT Variables
        private string SelectedEmp = "";
        private List<Program.ElementList> oListOfElementAmount = new List<Program.ElementList>();
        #endregion
        class clsEmployeeLeaveBalance
        {
            public string EmpID;
            public decimal DR1;
            public decimal DR2;
        }
        SAPbouiCOM.ProgressBar prog = null;
        Hashtable ht = new Hashtable();
        int totalCnt = 0;
        List<string> oSelectedEmployee = new List<string>();
        List<string> okeys = new List<string>();
        #endregion

        #region "B1 Events"

        public override void CreateForm(SAPbouiCOM.Application SboApp, string strXml, SAPbobsCOM.Company cmp, string frmId)
        {
            base.CreateForm(SboApp, strXml, cmp, frmId);
            try
            {
                oForm.Freeze(true);
                oForm.EnableMenu("1288", false);  // Next Record
                oForm.EnableMenu("1289", false);  // Pevious Record
                oForm.EnableMenu("1290", false);  // First Record
                oForm.EnableMenu("1291", false);  // Last record 
                InitiallizeForm();
                FillDepartmentInCombo();
                FillDesignationInCombo();
                FillEmpLocationInCombo();
                FillEmpBranchInCombo();
                FillOvertimeTypeInCombo();
                FillLeaveTypeInCombo();
                FillPayrollInCombo();
                OTLimit = Convert.ToInt32(Program.systemInfo.WorkingDays);
                oForm.Freeze(false);
                IbtnOK.Visible = false;
                //if (Program.systemInfo.CompanyName == "" || Program.systemInfo.CompanyName == null)
                //{
                //    oApplication.StatusBar.SetText("System Profile is missing", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                //    return;
                //}
                IbtnIAR.Visible = true;
                IbtnEAR.Visible = true;
                IbtnPost.Visible = true;
                IbtSaveDirect.Visible = true;
                IbtnVoid.Visible = true;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: CreateForm Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        public override void etBeforeClick(ref ItemEvent pVal, ref bool BubbleEvent)
        {
            base.etBeforeClick(ref pVal, ref BubbleEvent);
            try
            {
                if (pVal.ItemUID == "btnNext")
                {
                    FillSelectedEmployee();
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        public override void etAfterClick(ref SAPbouiCOM.ItemEvent pVal, ref bool BubbleEvent)
        {
            base.etAfterClick(ref pVal, ref BubbleEvent);
            try
            {
                switch (pVal.ItemUID)
                {
                    case "btId":
                        flgEmpTo = false;
                        flgEmpFrom = true;
                        OpenNewSearchFormForm();
                        break;
                    case "btId2":
                        flgEmpTo = true;
                        flgEmpFrom = false;
                        OpenNewSearchFormTo();
                        break;
                    case "btnSerc":
                        PopulateGridWithFilterExpression();
                        break;
                    case "btnClear":
                        ClearControls();
                        break;
                    case "btnNext":
                        flgDirectSave = false;
                        HideFirstVisibleNext();
                        break;
                    case "btnBack":
                        HideNextVisibleFirst();
                        break;
                    case "btnSave":
                        int confirm = oApplication.MessageBox("Are you sure you want to save attendance.? ", 3, "Yes", "No", "Cancel");
                        if (confirm == 2 || confirm == 3) return;
                        flgDirectSave = false;
                        if (Program.systemInfo.FlgCostCenterGL == true)
                        {
                            SaveAttendanceRecordCC();
                        }
                        else if (Program.systemInfo.FlgUnitFeature == true)
                        {
                            SaveAttendanceRecordMEPL();
                        }
                        else if (Program.systemInfo.FlgSSL == true)
                        {
                            SaveAttendanceRecordBikiya();
                            HideNextVisibleFirst();
                        }
                        //else if (CompanyName.ToLower() == "pakola")
                        //{
                        //    SaveAttendanceRecordSSL();
                        //    HideNextVisibleFirst();
                        //}
                        else if (Program.systemInfo.FlgRetailRules1 == true)
                        {
                            SaveAttendanceRecordISM();
                            HideNextVisibleFirst();
                        }

                        else if (CompanyName.ToLower() == "spell")
                        {
                            SaveAttendanceRecordSpell();
                            HideNextVisibleFirst();
                        }
                        else if (CompanyName.ToLower() == "joseph")
                        {
                            SavingAttendance();
                            HideNextVisibleFirst();
                        }
                        else
                        {
                            SaveAttendanceRecordStandard();
                            HideNextVisibleFirst();
                        }
                        break;
                    case "btSave":
                        flgDirectSave = true;
                        int confirmAR = oApplication.MessageBox("Are you sure you want to save attendance.? ", 3, "Yes", "No", "Cancel");
                        if (confirmAR == 2 || confirmAR == 3) return;
                        LoadEmployeeAttendanceRecordStandardDirectSave();
                        //LoadEmployeeAttendanceRecordStandard();
                        HideNextVisibleFirst();

                        break;
                    case "btnPost":
                        if (Program.objHrmsUI.isSuperUser)
                        {
                            if (Program.systemInfo.FlgLeaveCalendar == true)
                            {
                                FillEmployeeLeaveBalanceLeaveCalendar();
                            }
                            else
                            {
                                FillEmployeeLeaveBalance();
                            }
                            if (Program.systemInfo.FlgSSL == true)
                            {
                                int confirm2 = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirm2 == 2 || confirm2 == 3) return;
                                SaveAttendanceRecordBikiyaPost();
                                HideNextVisibleFirst();
                            }
                            //else if (CompanyName.ToLower() == "pakola")
                            //{
                            //    int confirm2 = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                            //    if (confirm2 == 2 || confirm2 == 3) return;
                            //    SaveAttendanceRecordSSLPost();
                            //    HideNextVisibleFirst();
                            //}
                            else if (Program.systemInfo.FlgRetailRules1 == true)
                            {
                                int confirm2 = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirm2 == 2 || confirm2 == 3) return;
                                SaveAttendanceRecordISMPost();
                                HideNextVisibleFirst();
                            }
                            else if (Program.systemInfo.FlgUnitFeature == true)
                            {
                                int confirm2 = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirm2 == 2 || confirm2 == 3) return;
                                SaveAttendanceRecordMEPLPost();
                            }
                            else if (CompanyName.ToLower() == "spell")
                            {
                                int confirmPost = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirmPost == 2 || confirmPost == 3) return;
                                SaveAttendanceRecordPostSpell();
                                HideNextVisibleFirst();
                            }
                            else if (CompanyName.ToLower() == "joseph")
                            {
                                int confirmPost = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirmPost == 2 || confirmPost == 3) return;
                                PostAttendance();
                                HideNextVisibleFirst();
                            }
                            else
                            {
                                int confirmPost = oApplication.MessageBox("Are you sure you want to post attendance.? ", 3, "Yes", "No", "Cancel");
                                if (confirmPost == 2 || confirmPost == 3) return;
                                //SaveAttendanceRecordPost();
                                SaveAttendanceRecordStandardDirectPost();
                            }
                        }
                        else
                        {
                            oApplication.StatusBar.SetText("Only super user allow to post attendance", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                        }
                        break;

                    case "btnvoid":

                        VoidAttendance();

                        break;
                    case "btnEAR":
                        PrintUnsavedAttendanceReport();
                        break;
                    case "btnIAR":
                        printSavedPostAttendanceReport();
                        break;
                    case "grd_Emp":
                        if (pVal.ColUID == "isSel" && pVal.Row == 0)
                        {
                            selectAllProcess();
                        }
                        break;
                    case "optProcs":
                        optProcessedAttendance.GroupWith(optPostedAttendance.Item.UniqueID);
                        optProcessedAttendance.Selected = true;
                        break;
                    case "optPost":
                        optPostedAttendance.GroupWith(optProcessedAttendance.Item.UniqueID);
                        optPostedAttendance.Selected = true;
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: etAfterClick Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        public override void etAfterLostFocus(ref SAPbouiCOM.ItemEvent pVal, ref bool BubbleEvent)
        {
            BubbleEvent = true;
            //if (BubbleEvent == true) return;
            oForm.Freeze(true);
            try
            {
                #region Unit Feature
                if (Program.systemInfo.FlgUnitFeature == true)
                {
                    try
                    {
                        #region Working Mints
                        if (pVal.ColUID == "Wmin")
                        {


                            string strOverTimeHours = "00:00";

                            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string ActualWorkingmints = (grdAttendance.Columns.Item("Wmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string OverTimeMints = (grdAttendance.Columns.Item("OTmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string StatusLateIn = (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            //clStatus
                            string CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string EmployeeCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            if (StartDate.Length != 2 || EndDate.Length != 2)
                            {
                                oForm.Freeze(false);
                                return;
                            }
                            else
                            {
                                int DurinMin = Convert.ToInt32(ActualWorkingmints);
                                //int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));

                                if (DurinMin < 0)
                                    DurinMin += 1440;
                                //int HrsDur = DurinMin / 60;
                                //int MinDur = DurinMin % 60;
                                //
                                var ActualDuration = TimeSpan.FromMinutes(DurinMin);

                                //wr = Convert.ToString(pauseDuration);

                                int HrsDur = ActualDuration.Hours;
                                int MinDur = ActualDuration.Minutes;

                                //wr = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);
                                //
                                (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string SFEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                //SfEnd
                                string LateIN = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string TempstrOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                // string ActualWorkingmints = (grdAttendance.Columns.Item("Wmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                DateTime shiftDateX = DateTime.MinValue;
                                string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                                DateTime x = Convert.ToDateTime(shiftDateX);

                                var EmployeeInList = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                if (EmployeeInList == null)
                                {
                                    clsEmployeeLeaveBalance oOneEmployee = new clsEmployeeLeaveBalance();
                                    oOneEmployee.EmpID = strEMPID;
                                    oOneEmployee.DR1 = 0;
                                    oOneEmployee.DR2 = 0;
                                    oEmployeeLeaveBalance.Add(oOneEmployee);
                                }
                                //Calculate LateIn Minutes
                                #region Calculate LateIN
                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    string strLateInMinutes = CalculateLateInMinutes(ShiftTimeIn, TimeIn);
                                    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;

                                    //Buffer Period  Included Here
                                    //var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                    //if (AttendanceRule != null)
                                    //{
                                    //    string BufferInTime = AttendanceRule.GpAfterStartTime;
                                    //    if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                    //    {
                                    //        if (IsBufferApplicable(BufferInTime, strLateInMinutes))
                                    //        {
                                    //            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;
                                    //        }
                                    //        else
                                    //        {
                                    //            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    //    }
                                    //}
                                }
                                #endregion
                                //Calculate Early Out Minutes
                                #region Calculate Early Out
                                if (!string.IsNullOrEmpty(TimeOut))
                                {
                                    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                                    bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                                    decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decimal decTimeIn = 0.0M;
                                    if (TimeIn != null)
                                    {
                                        decTimeIn = ConvertTimeToDecimal(TimeIn);
                                    }

                                    if (decTimeIn > decTimeOut && OutflgOverlap == false)
                                    {
                                        //Do Nothing
                                        (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    }
                                    else
                                    {
                                        string strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, TimeOut);
                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                            if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                                }
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                    }
                                }

                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    string strStatus = "";
                                    string strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    string strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStatus;
                                }
                                #endregion

                                //Calculate Leaves in diffrent Scenerio
                                #region Calculate Leaves
                                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                                    decimal LeaveCount = 0.0M;
                                    string TempLeaveHours = "";
                                    string strLeaveHours = "";
                                    string strLeaveType = "";
                                    string strLeaveTypeCode = "";
                                    int intLeaveType;
                                    bool isNewLeave = false;
                                    var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();

                                    string employeetype = EmpRecord.MstPosition.Name != null ? EmpRecord.MstPosition.Name : "nahe mila";

                                    if (Data != null && Data.UnitsID == "MIN")
                                    {
                                        if (employeetype.ToLower().StartsWith("man"))
                                        {
                                            decimal LeavesAvailable = 0;
                                            decimal chkLeavesEntitled = 0;
                                            decimal chkLeavesCarryForward = 0;
                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == Data.LeaveType
                                                                          select a.LeavesEntitled).FirstOrDefault();

                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == Data.LeaveType
                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                            LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                            decimal LeavesUsed = 0;
                                            LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == Data.LeaveType
                                                          select a.TotalCount).Sum() ?? 0M;

                                            //var oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                            //decimal RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                            var EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == EmpRecord.EmpID).FirstOrDefault();
                                            decimal RTBalanceR1 = EmployeeRTValue.DR1 != null ? EmployeeRTValue.DR1 : 0;

                                            if ((LeavesAvailable - (LeavesUsed + RTBalanceR1)) >= 1)
                                            {
                                                strLeaveHours = shiftHours;
                                                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                TimeSpan t1 = TimeCalculate(strLeaveHours);

                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                if (LeaveCount > 1)
                                                {
                                                    LeaveCount = 1;
                                                }
                                                //
                                                //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                //intLeaveType = leaveType;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType).FirstOrDefault().Code;
                                                intLeaveType = Convert.ToInt32(Data.LeaveType);
                                                isNewLeave = true;
                                                EmployeeRTValue.DR1 += LeaveCount;
                                                //}
                                                //}
                                            }
                                            else
                                            {
                                                strLeaveHours = shiftHours;
                                                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                if (LeaveCount > 1)
                                                {
                                                    LeaveCount = 1;
                                                }
                                                //
                                                strLeaveType = Data.LeaveDescription;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                intLeaveType = Data.LeaveType.Value;
                                                isNewLeave = true;
                                            }
                                        }

                                    }
                                    else
                                    {

                                        TempLeaveHours = shiftHours;

                                        LeaveCount = 0.0M;
                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";
                                        System.Data.DataTable dt = ds.getDataTable(SQL);
                                        if (dt != null && dt.Rows.Count > 0)
                                        {
                                            int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                            bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);

                                            if (Deduction == true && leaveType > 0)
                                            {
                                                if (employeetype.ToLower().StartsWith("con"))
                                                {
                                                    leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                    if (leaveType > 0)
                                                    {
                                                        strLeaveHours = shiftHours;
                                                        WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                        LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                        if (LeaveCount > 1)
                                                        {
                                                            LeaveCount = 1;
                                                        }
                                                        //
                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                        intLeaveType = leaveType;
                                                        isNewLeave = true;
                                                    }
                                                }
                                                else if (employeetype.ToLower().StartsWith("man"))
                                                {
                                                    //Rule one
                                                    int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                    decimal LeavesAvailable = 0;
                                                    decimal chkLeavesEntitled = 0;
                                                    decimal chkLeavesCarryForward = 0;
                                                    chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                  select a.LeavesEntitled).FirstOrDefault();

                                                    chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                      select a.LeavesCarryForward).FirstOrDefault();
                                                    LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;


                                                    decimal LeavesUsed = 0;
                                                    LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                  select a.TotalCount).Sum() ?? 0M;

                                                    var oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                    decimal RuntimeLeaveUsage1 = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                    if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage1)) >= 1)
                                                    {
                                                        leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                        if (leaveType > 0)
                                                        {
                                                            strLeaveHours = shiftHours;

                                                            //LeaveCount = 1.0M;
                                                            //  
                                                            WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                            LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                            if (LeaveCount > 1)
                                                            {
                                                                LeaveCount = 1;
                                                            }
                                                            //
                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            intLeaveType = leaveType;
                                                            isNewLeave = true;
                                                            oOneEmployee.DR1 += LeaveCount;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Rule TWO
                                                        int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                        decimal LeavesAvailable2 = 0;
                                                        decimal chkLeavesEntitled2 = 0;
                                                        decimal chkLeavesCarryForward2 = 0;
                                                        chkLeavesEntitled2 = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                       where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                       select a.LeavesEntitled).FirstOrDefault();

                                                        chkLeavesCarryForward2 = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                           where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                           select a.LeavesCarryForward).FirstOrDefault();
                                                        LeavesAvailable2 = chkLeavesEntitled2 + chkLeavesCarryForward2;

                                                        decimal LeavesUsed2 = 0;
                                                        LeavesUsed2 = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                       where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                       select a.TotalCount).Sum() ?? 0M;

                                                        var oOneEmployee2 = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                        decimal RuntimeLeaveUsage2 = oOneEmployee2.DR2 != null ? oOneEmployee2.DR2 : 0;

                                                        if ((LeavesAvailable - (LeavesUsed2 + RuntimeLeaveUsage2)) >= 1)
                                                        {
                                                            leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                            if (leaveType > 0)
                                                            {
                                                                strLeaveHours = shiftHours;

                                                                //LeaveCount = 1.0M;
                                                                //  
                                                                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                if (LeaveCount > 1)
                                                                {
                                                                    LeaveCount = 1;
                                                                }
                                                                //
                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                intLeaveType = leaveType;
                                                                isNewLeave = true;
                                                                oOneEmployee2.DR2 += LeaveCount;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //RULE TREE
                                                            int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                            LeavesAvailable = 0;
                                                            chkLeavesEntitled = 0;
                                                            chkLeavesCarryForward = 0;
                                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                          select a.LeavesEntitled).FirstOrDefault();

                                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                                            LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                            LeavesUsed = 0;
                                                            LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                          select a.TotalCount).Sum() ?? 0M;

                                                            //oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                            //RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                            if (LeavesAvailable > LeavesUsed)
                                                            {
                                                                leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                if (leaveType > 0)
                                                                {
                                                                    strLeaveHours = shiftHours;

                                                                    //LeaveCount = 1.0M;
                                                                    //  
                                                                    WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                    LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                    if (LeaveCount > 1)
                                                                    {
                                                                        LeaveCount = 1;
                                                                    }
                                                                    //
                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                    intLeaveType = leaveType;
                                                                    isNewLeave = true;
                                                                }

                                                            }
                                                        }


                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                            oForm.Freeze(false);
                                            return;
                                        }
                                    }
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                }
                                #endregion
                                //Calculate in Other Scenerio
                                #region Calculate Leaves an Other Scenerio
                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                                    string TempLeaveHours = "";
                                    decimal LeaveCount = 0.0M;
                                    string strLeaveHours = "";
                                    string strLeaveType = "";
                                    string strLeaveTypeCode = "";
                                    bool isNewLeave = false;
                                    int intLeaveType;

                                    if (StatusLateIn == "LateIn")
                                    #region IF Employee LateIN
                                    {

                                        //
                                        TimeSpan TimeOutH = TimeCalculate(SFEndTime);
                                        TimeSpan ActualTimeOut = TimeCalculate(TimeOut);
                                        TimeSpan ActualWH = TimeCalculate(ActualWorkingHours);

                                        double TimeOutMints = Math.Round((TimeOutH.TotalMinutes), 0);
                                        double ActualTimeOutMints = Math.Round((ActualTimeOut.TotalMinutes), 0);
                                        double ActualWHrs = Math.Round((ActualWH.TotalMinutes), 0);


                                        if (ActualTimeOutMints >= TimeOutMints)
                                        {
                                            if (strOverTimeHours == "" || strOverTimeHours == "00:00")
                                            {
                                                TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);

                                                TimeSpan LeaveH = TimeCalculate(TempLeaveHours);

                                                double TotalLeave = Math.Round((LeaveH.TotalMinutes), 0);

                                                string TempActualWorkingHours = "";
                                                double totalminutes = (LeaveH + (ActualWH + (ActualTimeOut - TimeOutH))).TotalMinutes;
                                                double totalminutes2 = (LeaveH + (ActualWH + (ActualTimeOut - TimeOutH))).TotalMinutes;


                                                // double totalminutes = (ActualTimeOut - TimeOutH).TotalMinutes;

                                                var pauseDuration = TimeSpan.FromMinutes(totalminutes);

                                                wr = Convert.ToString(pauseDuration);
                                                int hours = pauseDuration.Hours;
                                                int Mints = pauseDuration.Minutes;



                                                wr = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);
                                                TempActualWorkingHours = wr;






                                                strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, TempActualWorkingHours);
                                                //strWorkMints = Convert.ToString(totalminutes);
                                            }
                                            else
                                            {
                                                string tempActualWorkingHours = "";
                                                double totalminutes = (ActualWH - (ActualTimeOut - TimeOutH)).TotalMinutes;
                                                var pauseDuration = TimeSpan.FromMinutes(totalminutes);

                                                //wr = Convert.ToString(pauseDuration);

                                                int hours = pauseDuration.Hours;
                                                int Mints = pauseDuration.Minutes;

                                                wr = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);

                                                tempActualWorkingHours = wr;
                                                //wr = Convert.ToString(pauseDuration);

                                                TempLeaveHours = CalculateLeaveHours(shiftHours, tempActualWorkingHours);
                                            }

                                        }


                                        //TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                                        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                        {
                                            //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";

                                            System.Data.DataTable dt = ds.getDataTable(SQL);

                                            string employeetype = EmpRecord.MstPosition.Name != null ? EmpRecord.MstPosition.Name : "nahe mila";

                                            if (dt != null && dt.Rows.Count > 0)
                                            {
                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                                if (Deduction == true && leaveType > 0)
                                                {
                                                    if (employeetype.ToLower().StartsWith("con"))
                                                    {
                                                        leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                        if (leaveType > 0)
                                                        {
                                                            //
                                                            //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                            strLeaveHours = TempLeaveHours;

                                                            WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                            if (TempLeaveCount > 1)
                                                            {
                                                                LeaveCount = 1;
                                                            }
                                                            else
                                                            {
                                                                LeaveCount = TempLeaveCount;
                                                            }
                                                            //
                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            isNewLeave = true;
                                                        }
                                                    }
                                                    else if (employeetype.ToLower().StartsWith("man"))
                                                    {
                                                        //Rule one
                                                        int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                        decimal LeaveEntitled = 0;
                                                        decimal chkLeavesEntitled = 0;
                                                        decimal chkLeavesCarryForward = 0;
                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                        LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                        decimal LeaveUsed = 0;
                                                        LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                     where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                     select a.TotalCount).Sum() ?? 0M;
                                                        var EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == EmpRecord.EmpID).FirstOrDefault();
                                                        decimal RTBalanceR1 = EmployeeRTValue.DR1 != null ? EmployeeRTValue.DR1 : 0;

                                                        if ((LeaveEntitled - (LeaveUsed + RTBalanceR1)) >= 1)
                                                        {
                                                            leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                            if (leaveType > 0)
                                                            {
                                                                //
                                                                //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                strLeaveHours = TempLeaveHours;
                                                                //  
                                                                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                if (TempLeaveCount > 1)
                                                                {
                                                                    LeaveCount = 1;
                                                                }
                                                                else
                                                                {
                                                                    LeaveCount = TempLeaveCount;
                                                                }
                                                                //
                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                isNewLeave = true;
                                                                EmployeeRTValue.DR1 += LeaveCount;
                                                            }


                                                        }
                                                        else
                                                        {
                                                            //Rule TWO
                                                            int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                            LeaveEntitled = 0;
                                                            chkLeavesEntitled = 0;
                                                            chkLeavesCarryForward = 0;
                                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                          select a.LeavesEntitled).FirstOrDefault();

                                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                                            LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;
                                                            LeaveUsed = 0;
                                                            LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                         where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                         select a.TotalCount).Sum() ?? 0M;
                                                            EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == EmpRecord.EmpID).FirstOrDefault();
                                                            decimal RTBalanceR2 = EmployeeRTValue.DR2 != null ? EmployeeRTValue.DR2 : 0;

                                                            if ((LeaveEntitled - (LeaveUsed + RTBalanceR2)) >= 1)
                                                            {

                                                                leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                                if (leaveType > 0)
                                                                {
                                                                    //
                                                                    //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                    strLeaveHours = TempLeaveHours;
                                                                    //  
                                                                    WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                    decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                    if (TempLeaveCount > 1)
                                                                    {
                                                                        LeaveCount = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        LeaveCount = TempLeaveCount;
                                                                    }
                                                                    //
                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                    isNewLeave = true;
                                                                    EmployeeRTValue.DR2 += LeaveCount;
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //RULE TREE
                                                                int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                                LeaveEntitled = 0;
                                                                chkLeavesEntitled = 0;
                                                                chkLeavesCarryForward = 0;
                                                                chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                              select a.LeavesEntitled).FirstOrDefault();

                                                                chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                                  select a.LeavesCarryForward).FirstOrDefault();
                                                                LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                LeaveUsed = 0;
                                                                LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                             select a.TotalCount).Sum() ?? 0M;
                                                                if (LeaveEntitled > LeaveUsed)
                                                                {
                                                                    leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                    if (leaveType > 0)
                                                                    {
                                                                        //
                                                                        //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                        strLeaveHours = TempLeaveHours;
                                                                        //  
                                                                        WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                        decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        if (TempLeaveCount > 1)
                                                                        {
                                                                            LeaveCount = 1;
                                                                        }
                                                                        else
                                                                        {
                                                                            LeaveCount = TempLeaveCount;
                                                                        }
                                                                        //
                                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                        isNewLeave = true;
                                                                    }


                                                                }
                                                            }


                                                        }
                                                    }
                                                    //else if (employeetype.ToLower().StartsWith("man"))
                                                    //{
                                                    //    //Rule one
                                                    //    int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                    //    decimal LeavesAvailable = 0;
                                                    //    decimal chkLeavesEntitled = 0;
                                                    //    decimal chkLeavesCarryForward = 0;
                                                    //    chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                    //                                  select a.LeavesEntitled).FirstOrDefault();

                                                    //    chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                    //                                      select a.LeavesCarryForward).FirstOrDefault();
                                                    //    LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                    //    decimal LeavesUsed = 0;
                                                    //    LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                    //                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                    //                  select a.TotalCount).Sum() ?? 0M;

                                                    //    var oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                    //    decimal RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                    //    if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                    //    {
                                                    //        leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                    //        if (leaveType > 0)
                                                    //        {
                                                    //            //
                                                    //            //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                    //            strLeaveHours = TempLeaveHours;

                                                    //            WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                    //            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                    //            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                    //            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                    //            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                    //            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                    //            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                    //            if (TempLeaveCount > 1)
                                                    //            {
                                                    //                LeaveCount = 1;
                                                    //            }
                                                    //            else
                                                    //            {
                                                    //                LeaveCount = TempLeaveCount;
                                                    //            }
                                                    //            //
                                                    //            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    //            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    //            isNewLeave = true;
                                                    //        }

                                                    //    }
                                                    //    else
                                                    //    {
                                                    //        //Rule TWO
                                                    //        int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                    //        LeavesAvailable = 0;
                                                    //        chkLeavesEntitled = 0;
                                                    //        chkLeavesCarryForward = 0;
                                                    //        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                    //                                      select a.LeavesEntitled).FirstOrDefault();

                                                    //        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                    //                                          select a.LeavesCarryForward).FirstOrDefault();
                                                    //        LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                    //        LeavesUsed = 0;
                                                    //        LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                    //                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                    //                      select a.TotalCount).Sum() ?? 0M;
                                                    //        oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                    //        RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                    //        if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                    //        {
                                                    //            leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                    //            if (leaveType > 0)
                                                    //            {
                                                    //                //
                                                    //                //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                    //                strLeaveHours = TempLeaveHours;

                                                    //                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                    //                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                    //                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                    //                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                    //                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                    //                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                    //                decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                    //                if (TempLeaveCount > 1)
                                                    //                {
                                                    //                    LeaveCount = 1;
                                                    //                }
                                                    //                else
                                                    //                {
                                                    //                    LeaveCount = TempLeaveCount;
                                                    //                }
                                                    //                //
                                                    //                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    //                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    //                isNewLeave = true;
                                                    //            }
                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            //RULE TREE
                                                    //            int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                    //            LeavesAvailable = 0;
                                                    //            chkLeavesEntitled = 0;
                                                    //            chkLeavesCarryForward = 0;
                                                    //            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                    //                                          select a.LeavesEntitled).FirstOrDefault();

                                                    //            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                    //                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                    //                                              select a.LeavesCarryForward).FirstOrDefault();
                                                    //            LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                    //            LeavesUsed = 0;
                                                    //            LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                    //                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                    //                          select a.TotalCount).Sum() ?? 0M;
                                                    //            oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                    //            RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                    //            if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                    //            {
                                                    //                leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                    //                if (leaveType > 0)
                                                    //                {
                                                    //                    //
                                                    //                    //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                    //                    strLeaveHours = TempLeaveHours;

                                                    //                    WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                    //                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                    //                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                    //                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                    //                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                    //                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                    //                    decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                    //                    if (TempLeaveCount > 1)
                                                    //                    {
                                                    //                        LeaveCount = 1;
                                                    //                    }
                                                    //                    else
                                                    //                    {
                                                    //                        LeaveCount = TempLeaveCount;
                                                    //                    }
                                                    //                    //
                                                    //                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    //                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    //                    isNewLeave = true;
                                                    //                }


                                                    //            }
                                                    //        }
                                                    //    }
                                                    //}
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    else
                                    #region Not lateIN
                                    {

                                        TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                                        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                        {
                                            //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";

                                            System.Data.DataTable dt = ds.getDataTable(SQL);

                                            string employeetype = EmpRecord.MstPosition.Name != null ? EmpRecord.MstPosition.Name : "nahe mila";

                                            if (dt != null && dt.Rows.Count > 0)
                                            {
                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                                if (Deduction == true && leaveType > 0)
                                                {
                                                    if (employeetype.ToLower().StartsWith("con"))
                                                    {
                                                        leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                        if (leaveType > 0)
                                                        {
                                                            //
                                                            //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                            strLeaveHours = TempLeaveHours;

                                                            WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                            LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                            if (LeaveCount > 1)
                                                            {
                                                                LeaveCount = 1;
                                                            }
                                                            //
                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            isNewLeave = true;
                                                        }
                                                    }
                                                    else if (employeetype.ToLower().StartsWith("man"))
                                                    {
                                                        //Rule one
                                                        int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                        decimal LeavesAvailable = 0;
                                                        decimal chkLeavesEntitled = 0;
                                                        decimal chkLeavesCarryForward = 0;
                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                        LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                        decimal LeavesUsed = 0;
                                                        LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                      where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleOne
                                                                      select a.TotalCount).Sum() ?? 0M;

                                                        var oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                        decimal RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                        if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                        {
                                                            leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                            if (leaveType > 0)
                                                            {
                                                                //
                                                                //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                                strLeaveHours = TempLeaveHours;

                                                                WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                if (LeaveCount > 1)
                                                                {
                                                                    LeaveCount = 1;
                                                                }
                                                                //
                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                isNewLeave = true;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Rule TWO
                                                            int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                            LeavesAvailable = 0;
                                                            chkLeavesEntitled = 0;
                                                            chkLeavesCarryForward = 0;
                                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                          select a.LeavesEntitled).FirstOrDefault();

                                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                                            LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                            LeavesUsed = 0;
                                                            LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                          where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleTwo
                                                                          select a.TotalCount).Sum() ?? 0M;
                                                            oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                            RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                            if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                            {
                                                                leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                                if (leaveType > 0)
                                                                {
                                                                    //
                                                                    //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                                    strLeaveHours = TempLeaveHours;

                                                                    WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                    LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                    if (LeaveCount > 1)
                                                                    {
                                                                        LeaveCount = 1;
                                                                    }
                                                                    //
                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                    isNewLeave = true;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //RULE TREE
                                                                int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                                LeavesAvailable = 0;
                                                                chkLeavesEntitled = 0;
                                                                chkLeavesCarryForward = 0;
                                                                chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                              select a.LeavesEntitled).FirstOrDefault();

                                                                chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                                                  select a.LeavesCarryForward).FirstOrDefault();
                                                                LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;

                                                                LeavesUsed = 0;
                                                                LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                              where a.EmpID == EmpRecord.ID && a.LeaveType == leavetypeRuleThree
                                                                              select a.TotalCount).Sum() ?? 0M;
                                                                oOneEmployee = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                                                RuntimeLeaveUsage = oOneEmployee.DR1 != null ? oOneEmployee.DR1 : 0;

                                                                if ((LeavesAvailable - (LeavesUsed + RuntimeLeaveUsage)) > 1)
                                                                {
                                                                    leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                    if (leaveType > 0)
                                                                    {
                                                                        //
                                                                        //LeaveCount = CalculateLeaveCountMEPL(shiftHours, ActualWorkingHours);
                                                                        strLeaveHours = TempLeaveHours;

                                                                        WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                        LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        if (LeaveCount > 1)
                                                                        {
                                                                            LeaveCount = 1;
                                                                        }
                                                                        //
                                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                        isNewLeave = true;
                                                                    }
                                                                    //strLeaveHours = TempLeaveHours;
                                                                    //WorkHourPayroll = Convert.ToInt32(EmpRecord.CfgPayrollDefination.WorkHours);
                                                                    //UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                    ////TimeSpan t1 = TimeCalculate(strLeaveHours);
                                                                    ////TimeSpan t2 = TimeCalculate("00:00");

                                                                    ////t3 = t3 + t1.Add(t2);

                                                                    //totalunit = Math.Round((t3.TotalMinutes), 0);

                                                                    //LeaveCount = Convert.ToDecimal(totalunit) / Convert.ToDecimal(WorkHourPayroll);

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.000}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);

                                }
                                #endregion




                            }
                        }
                        #region OverTime Units
                        else if (pVal.ColUID == "OTmin")
                        {
                            string strOverTimeHours = "00:00";

                            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string ActualWorkingmints = (grdAttendance.Columns.Item("Wmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string OverTimeMints = (grdAttendance.Columns.Item("OTmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string StatusLateIn = (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            //clStatus
                            // CalculatedUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string EmployeeCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            if (StartDate.Length != 2 || EndDate.Length != 2)
                            {
                                oForm.Freeze(false);
                                return;
                            }
                            else
                            {
                                int DurinMin = Convert.ToInt32(ActualWorkingmints);
                                //int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));

                                if (DurinMin < 0)
                                    DurinMin += 1440;
                                //int HrsDur = DurinMin / 60;
                                //int MinDur = DurinMin % 60;
                                //
                                var ActualDuration = TimeSpan.FromMinutes(DurinMin);

                                //wr = Convert.ToString(pauseDuration);

                                int HrsDur = ActualDuration.Hours;
                                int MinDur = ActualDuration.Minutes;

                                //wr = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);
                                //
                                (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string SFEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                //SfEnd
                                string LateIN = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string TempstrOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                // string ActualWorkingmints = (grdAttendance.Columns.Item("Wmin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                DateTime shiftDateX = DateTime.MinValue;
                                string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                                DateTime x = Convert.ToDateTime(shiftDateX);

                                var EmployeeInList = oEmployeeLeaveBalance.Where(a => a.EmpID == strEMPID).FirstOrDefault();
                                if (EmployeeInList == null)
                                {
                                    clsEmployeeLeaveBalance oOneEmployee = new clsEmployeeLeaveBalance();
                                    oOneEmployee.EmpID = strEMPID;
                                    oOneEmployee.DR1 = 0;
                                    oOneEmployee.DR2 = 0;
                                    oEmployeeLeaveBalance.Add(oOneEmployee);
                                }

                                //Calculating OverTime
                                #region Calculate Overtime

                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    string strOverTimeType = "";
                                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    //strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select();
                                    // strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    if (strOverTimeHours == "")
                                    {
                                        strOverTimeHours = "00:00";
                                    }
                                    //{ 
                                    //string.IsNullOrEmpty(AttendanceRegisterSaved.WorkHour) ? "" : AttendanceRegisterSaved.WorkHour.Trim();
                                    TimeSpan TemActualOT = TimeCalculate(string.IsNullOrEmpty(strOverTimeHours) ? "" : strOverTimeHours.Trim());
                                    double TempActualOTMints = Math.Round((TemActualOT.TotalMinutes), 0);

                                    double TemptotalOtMints = Convert.ToDouble(OverTimeMints);

                                    double TemptotalOverTime = TemActualOT.TotalMinutes;
                                    //if (TemptotalOtMints > TemptotalOverTime)
                                    //{
                                    double TempActualOverTimeHrs = TemptotalOtMints;
                                    var pauseDuration = TimeSpan.FromMinutes(TempActualOverTimeHrs);

                                    wr = Convert.ToString(pauseDuration);
                                    int hours = pauseDuration.Hours;
                                    int Mints = pauseDuration.Minutes;
                                    string strUnitOverTime = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);
                                    //Actual OverTime
                                    TimeSpan ActualOT = TimeCalculate(strUnitOverTime);
                                    TimeSpan t01 = TimeCalculate("00:00");

                                    totalOverTime = ActualOT.Add(t01);

                                    Totalhrs = (totalOverTime.Hours);
                                    // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                                    TotalMints = (totalOverTime.Minutes);
                                    //TotalMints = TotalMints == null ? 1 : TotalMints;

                                    if (TotalMints == 0)
                                    {
                                        TotalMints = +1;
                                    }
                                    if (TotalMints > 30)
                                    {
                                        remainder = OTunit % Convert.ToInt32(TotalMints);
                                    }
                                    else if (TotalMints == 30)
                                    {
                                        remainder = 30;
                                    }
                                    else if (TotalMints < 30)
                                    {
                                        remainder = 0;
                                    }
                                    else
                                    {
                                        remainder = OTunit % Convert.ToInt32(TotalMints);
                                        remainder = remainder % 2;
                                    }

                                    if (remainder == 0)
                                    {
                                        //remainder = 0;
                                        strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                    }
                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                    //}
                                    //
                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                    {
                                        var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                                        var AttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == EmpRecord.ID).FirstOrDefault();
                                        if (AttendanceRegister != null)
                                        {
                                            strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                        }

                                    }
                                    //
                                    //if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                    //{
                                    //    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    //    var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    //    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();



                                    //    strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                                    //}
                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);

                                    // }
                                    #endregion

                                }

                            }
                        }
                        #endregion
                        #endregion

                    }
                    catch (Exception ex)
                    {
                        oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        BubbleEvent = false;
                    }
                }
                #endregion

                #region BIKIYA Feature
                else if (CompanyName.ToLower() == "bikiya")
                {
                    try
                    {
                        #region BIKIYA Working
                        if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut")
                        {
                            string DedcutionOnshift = "";
                            decimal LeaveCount = 0.0M;
                            string TempLeaveHours = "";
                            string strLeaveHours = "";
                            string strLeaveType = "";
                            string strLeaveTypeCode = "";
                            int intLeaveType;
                            bool isNewLeave = false;
                            string strDeductionCode = "";

                            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] ShiftStartDate = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] ShiftEndDate = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string dtTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, pVal.Row - 1));
                            string dtTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, pVal.Row - 1));
                            string grdTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string grdTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string strStatus = (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string PreTimeIn = "", PreTimeOut = "";
                            Boolean flgModified = false;
                            if (dtTimeIn != grdTimeIn)
                            {
                                PreTimeIn = dtTimeIn;
                                flgModified = true;
                            }
                            if (dtTimeOut != grdTimeOut)
                            {
                                PreTimeOut = dtTimeOut;
                                flgModified = true;
                            }
                            (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeIn;
                            (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeOut;
                            (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgModified;
                            if (StartDate.Length != 2 || EndDate.Length != 2)
                            {
                                if (string.IsNullOrEmpty(grdTimeIn) && string.IsNullOrEmpty(grdTimeOut))
                                {
                                    //(grdAttendance.Columns.Item(clTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    //(grdAttendance.Columns.Item(clTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    #region Leave Working
                                    DateTime shiftDateX = DateTime.MinValue;
                                    string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                                    DateTime x = Convert.ToDateTime(shiftDateX);
                                    string shiftHoursLeave = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value; string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    string strEMPIDLeave = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    if (string.IsNullOrEmpty(grdTimeIn) && string.IsNullOrEmpty(grdTimeOut) && !string.IsNullOrEmpty(shiftHoursLeave) && shiftHoursLeave != "00:00")
                                    {
                                        var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPIDLeave).FirstOrDefault();

                                        var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                                        if (Data != null && Data.UnitsID == "Day")
                                        {
                                            strLeaveHours = shiftHoursLeave;
                                            LeaveCount = 1.0M;
                                            strLeaveType = Data.LeaveDescription;
                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                            intLeaveType = Data.LeaveType.Value;
                                            isNewLeave = false;
                                            strDeductionCode = "DR_03";
                                        }
                                        else if (Data != null && Data.UnitsID == "HalfDay")
                                        {
                                            TempLeaveHours = CalculateHalfShiftHours(shiftHoursLeave);
                                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            System.Data.DataTable dt = ds.getDataTable(SQL);
                                            if (dt != null && dt.Rows.Count > 0)
                                            {
                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                                if (leaveType > 0)
                                                {
                                                    intLeaveType = leaveType;
                                                    strLeaveHours = TempLeaveHours;
                                                    if (LeaveValue == "DR_02")
                                                    {
                                                        LeaveCount = 0.5M;
                                                    }
                                                    else
                                                    {
                                                        LeaveCount = 1.0M;
                                                    }
                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    isNewLeave = true;
                                                    strDeductionCode = "DR_02";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            TempLeaveHours = shiftHoursLeave;
                                            LeaveCount = 0.0M;
                                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            System.Data.DataTable dt = ds.getDataTable(SQL);
                                            if (dt != null && dt.Rows.Count > 0)
                                            {
                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                                if (leaveType > 0)
                                                {
                                                    intLeaveType = leaveType;
                                                    strLeaveHours = TempLeaveHours;
                                                    if (LeaveValue == "DR_02")
                                                    {
                                                        LeaveCount = 0.5M;
                                                    }
                                                    else
                                                    {
                                                        LeaveCount = 1.0M;
                                                    }
                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    isNewLeave = true;
                                                    strDeductionCode = LeaveValue;
                                                }
                                            }
                                            else
                                            {
                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                                oForm.Freeze(false);
                                                return;

                                            }
                                        }
                                        (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                        (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                        (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                        (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionCode;
                                    }
                                    #endregion
                                    grdAttendance.FlushToDataSource();
                                    ApplyDeductionsBikiya();
                                    var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                                           select a).FirstOrDefault();
                                    if (oAttendanceRule != null)
                                    {
                                        if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                                        {
                                            SandWichLeave();
                                        }
                                    }
                                    grdAttendance.LoadFromDataSource();
                                }
                                oForm.Freeze(false);
                                return;
                            }
                            else
                            {
                                int actualTimeInMinutes = (int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]);
                                int shiftTimeInMinutes = (int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]);
                                int DurinMin = 0;
                                if (actualTimeInMinutes < shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]));
                                }
                                else if (actualTimeInMinutes >= shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                                }
                                if (DurinMin < 0)
                                    DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;
                                (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                DateTime shiftDateX = DateTime.MinValue;
                                string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                                DateTime x = Convert.ToDateTime(shiftDateX);
                                //Calculate LateIn Minutes
                                #region Calculate LateIn Minutes
                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    string strLateInMinutes = CalculateLateInMinutes(ShiftTimeIn, TimeIn);
                                    //Buffer Period  Included Here
                                    var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                    if (AttendanceRule != null)
                                    {
                                        string BufferInTime = AttendanceRule.GpAfterStartTime;
                                        if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            if (IsBufferApplicable(BufferInTime, strLateInMinutes))
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                        else
                                        {
                                            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        }
                                    }
                                }
                                #endregion
                                //Calculate Early Out Minutes
                                #region Calculate Early Out Minutes
                                if (!string.IsNullOrEmpty(TimeOut))
                                {
                                    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                                    bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                                    decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decimal decTimeIn = 0.0M;
                                    if (TimeIn != null)
                                    {
                                        decTimeIn = ConvertTimeToDecimal(TimeIn);
                                    }

                                    if (decTimeIn > decTimeOut && OutflgOverlap == false)
                                    {
                                        //Do Nothing
                                        (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    }
                                    else
                                    {
                                        string strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, TimeOut);
                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                            if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                                }
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                    }
                                }
                                #endregion

                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {

                                    strStatus = "";

                                    string strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    string strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStatus;
                                }
                                //Calculating OverTime
                                #region Calculating OverTime
                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {

                                    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();

                                    string strInOverTime = "00:00";
                                    string strOutOverTime = "00:00";
                                    string strOverTimeHours = "00:00";
                                    string strOverTimeType = "";
                                    string shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                    string shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                    DedcutionOnshift = ShiftDetail.MstShifts.DeductionRuleID != null ? Convert.ToString(ShiftDetail.MstShifts.DeductionRuleID) : "";
                                    bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                                    //if (!Convert.ToBoolean(ShiftRecord.OverTime.Value))
                                    if (!Convert.ToBoolean(ShiftRecord.OverTime == null ? false : ShiftRecord.OverTime.Value))
                                    {
                                        strOverTimeHours = "";
                                        strOverTimeType = "";
                                    }
                                    else
                                    {
                                        bool flgOtonWorkedHours = ShiftRecord.FlgOTWrkHrs == null ? false : ShiftRecord.FlgOTWrkHrs.Value;
                                        if (flgOtonWorkedHours)
                                        {
                                            strOverTimeHours = CalculateOverTimeHoursSSL(shiftHours, ActualWorkingHours);
                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                            {
                                                strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                                            }
                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                        }
                                        else
                                        {
                                            if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                            {
                                                shiftBefferTimeIn = ShiftTimeIn;
                                            }
                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                            {
                                                shiftBufferTimeOut = shiftTimeOut;
                                            }
                                            strInOverTime = IFInOvertimeApplicableSSl(shiftBefferTimeIn, TimeIn);
                                            if (strInOverTime != "00:00")
                                            {
                                                //CalculateIN Overtime AccordingToShift
                                                strInOverTime = CalculateInOvertimeApplicableSSL(ShiftTimeIn, TimeIn);
                                            }
                                            strOutOverTime = IFOutOvertimeApplicableSSL(TimeOut, shiftBufferTimeOut, OutflgOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                            if (strOutOverTime != "00:00")
                                            {
                                                //strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut);
                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(TimeOut, shiftTimeOut, OutflgOverlap);
                                            }
                                            strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);
                                            //OverTime on Weekend
                                            if (shiftHours == "00:00")
                                            {
                                                strOverTimeHours = ActualWorkingHours;
                                            }
                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                            {
                                                strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                                            }
                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                        }
                                    }
                                }
                                #endregion
                                //Calculate Leaves in diffrent Scenerio
                                #region Calculate Leaves in diffrent Scenerio
                                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();

                                    var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                                    if (Data != null && Data.UnitsID == "Day")
                                    {
                                        strLeaveHours = shiftHours;
                                        LeaveCount = 1.0M;
                                        strLeaveType = Data.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = Data.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else if (Data != null && Data.UnitsID == "HalfDay")
                                    {
                                        TempLeaveHours = CalculateHalfShiftHours(shiftHours);
                                        #region Deduction Rules Applies Employee And Company Wise
                                        var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                        if (GetDeductionRules != null)
                                        {
                                            string DeductionType = GetDeductionRules.DeductionRuleType;

                                            string ShiftCode = GetDeductionRules.ShiftCode;
                                            int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                            int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                            bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                            strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                            if (leaveType > 0)
                                            {
                                                intLeaveType = leaveType;
                                                strLeaveHours = TempLeaveHours;
                                                LeaveCount = 0.5M;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                flgLeaveIsNew = true;
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                                (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                                (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                                (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                                (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                            }

                                        }
                                        else
                                        {
                                            oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            return;
                                        }
                                        #endregion

                                        #region Old Deduction Rules Commited
                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        //DataTable dt = ds.getDataTable(SQL);
                                        //if (dt != null && dt.Rows.Count > 0)
                                        //{
                                        //    int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        //    string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                        //    if (leaveType > 0)
                                        //    {
                                        //        intLeaveType = leaveType;
                                        //        strLeaveHours = TempLeaveHours;
                                        //        if (LeaveValue == "DR_02")
                                        //        {
                                        //            LeaveCount = 0.5M;
                                        //        }
                                        //        else
                                        //        {
                                        //            LeaveCount = 1.0M;
                                        //        }
                                        //        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                        //        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                        //        isNewLeave = true;
                                        //    }
                                        //}
                                        #endregion
                                    }
                                    else
                                    {
                                        TempLeaveHours = shiftHours;
                                        LeaveCount = 0.0M;
                                        #region Deduction Rules Applies Employee And Company Wise
                                        var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                        if (GetDeductionRules != null)
                                        {
                                            string DeductionType = GetDeductionRules.DeductionRuleType;

                                            string ShiftCode = GetDeductionRules.ShiftCode;
                                            int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                            int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                            bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                            strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                            if (leaveType > 0)
                                            {
                                                intLeaveType = leaveType;
                                                strLeaveHours = TempLeaveHours;
                                                LeaveCount = 1M;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                flgLeaveIsNew = true;
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                                (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                                (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                                (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                                (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                            }

                                        }
                                        else
                                        {
                                            oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            return;
                                        }
                                        #endregion
                                        #region Old Deduction Rules Commited
                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        //DataTable dt = ds.getDataTable(SQL);
                                        //if (dt != null && dt.Rows.Count > 0)
                                        //{
                                        //    int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        //    string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                        //    if (leaveType > 0)
                                        //    {
                                        //        intLeaveType = leaveType;
                                        //        strLeaveHours = TempLeaveHours;
                                        //        if (LeaveValue == "DR_02")
                                        //        {
                                        //            LeaveCount = 0.5M;
                                        //        }
                                        //        else
                                        //        {
                                        //            LeaveCount = 1.0M;
                                        //        }
                                        //        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                        //        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                        //        isNewLeave = true;
                                        //    }
                                        //}

                                        //else
                                        //{
                                        //    oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        //    oForm.Freeze(false);
                                        //    return;

                                        //}
                                        #endregion
                                    }
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                }
                                #endregion
                                //Calculate in Other Scenerio
                                #region Calculate Leave in Other Scenerio
                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    string strTempWorkHours = "";
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();

                                    //TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                                    #region LateIn earlyOut Check
                                    if (string.IsNullOrEmpty(DedcutionOnshift))
                                    {
                                        if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                        {
                                            if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                            {
                                                //strTempWorkHours = CalculateWorkHours(TimeIn, shiftTimeOut, ShiftTimeIn, shiftTimeOut);
                                                TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                        {
                                            // decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strWorkHours);
                                            //strTempWorkHours = CalculateWorkHours(TimeIn, shiftTimeOut, ShiftTimeIn, shiftTimeOut);
                                            TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                                        }
                                    }
                                    #endregion
                                    if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                    {
                                        #region Deduction Rules Applies Employee And Company Wise
                                        var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                        if (GetDeductionRules != null)
                                        {
                                            string DeductionType = GetDeductionRules.DeductionRuleType;

                                            string ShiftCode = GetDeductionRules.ShiftCode;
                                            int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);

                                            int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                            bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                            strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                            if (Deduction == true && leaveType > 0)
                                            {


                                                if (DeductionType == "Employee")
                                                {

                                                    var GetLeaveType = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();
                                                    decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strTempWorkHours);
                                                    LeaveCount = CalculateLeaveCount(shiftHours, ActualWorkingHours);
                                                    if (decLeaveCount > 0)
                                                    {
                                                        #region Leave Deduction
                                                        if (decLeaveCount > 0.5M)
                                                        {
                                                            strLeaveHours = shiftHours;
                                                            LeaveCount = 0M;
                                                            //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            strLeaveType = "";
                                                            //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            strLeaveTypeCode = "";
                                                            flgLeaveIsNew = false;
                                                        }
                                                        else if (decLeaveCount <= 0.5M)
                                                        {
                                                            var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                                                            if (Data != null && Data.UnitsID == "HalfDay")
                                                            {
                                                                strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                                LeaveCount = 0.5M;
                                                                strLeaveType = Data.LeaveDescription;
                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                                intLeaveType = Data.LeaveType.Value;
                                                                flgLeaveIsNew = true;
                                                            }
                                                            else
                                                            {
                                                                if (GetLeaveType != null && decLeaveCount > 0)
                                                                {
                                                                    strLeaveHours = TempLeaveHours;
                                                                    LeaveCount = decLeaveCount;
                                                                    strLeaveType = GetLeaveType.Description;
                                                                    strLeaveTypeCode = GetLeaveType.Code;
                                                                    intLeaveType = GetLeaveType.ID;
                                                                    isNewLeave = true;
                                                                }
                                                                else
                                                                {
                                                                    strLeaveHours = "";
                                                                    LeaveCount = 0M;
                                                                    strLeaveType = "";
                                                                    strLeaveTypeCode = "";
                                                                    flgLeaveIsNew = false;
                                                                    strDeductionRule = "";
                                                                }


                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    //(grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                                    //(grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLeaveHours;
                                                    //(grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                                    //(grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                                    //(grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                                    //grdAttendance.FlushToDataSource();
                                                }

                                            }

                                        }
                                        else
                                        {
                                            oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            return;
                                        }

                                        #endregion
                                        #region Old Deduction Rules Commited
                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        //DataTable dt = ds.getDataTable(SQL);
                                        //if (dt != null && dt.Rows.Count > 0)
                                        //{
                                        //    int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        //    bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                        //    string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                        //    if (Deduction == true && leaveType > 0)
                                        //    {
                                        //        LeaveCount = CalculateLeaveCount(shiftHours, ActualWorkingHours);
                                        //        if (LeaveCount > 0.5M)
                                        //        {
                                        //            strLeaveHours = shiftHours;
                                        //            if (LeaveValue == "DR_02")
                                        //            {
                                        //                LeaveCount = 0.5M;
                                        //            }
                                        //            else
                                        //            {
                                        //                LeaveCount = 1.0M;
                                        //            }
                                        //            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                        //            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                        //            isNewLeave = true;
                                        //        }
                                        //        else if (LeaveCount <= 0.5M)
                                        //        {
                                        //            var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                                        //            if (Data != null && Data.UnitsID == "HalfDay")
                                        //            {
                                        //                strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                        //                LeaveCount = 0.5M;
                                        //                strLeaveType = Data.LeaveDescription;
                                        //                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                        //                intLeaveType = Data.LeaveType.Value;
                                        //                isNewLeave = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                        //                if (LeaveValue == "DR_02")
                                        //                {
                                        //                    LeaveCount = 0.5M;
                                        //                }
                                        //                else
                                        //                {
                                        //                    LeaveCount = 1.0M;
                                        //                }
                                        //                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                        //                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                        //                isNewLeave = true;
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                        #endregion
                                    }

                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                    (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                    grdAttendance.FlushToDataSource();

                                    if (string.IsNullOrEmpty(DedcutionOnshift))
                                    {
                                        ApplyDeductionsBikiya();
                                    }
                                    var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                                           select a).FirstOrDefault();
                                    if (oAttendanceRule != null)
                                    {
                                        if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                                        {
                                            SandWichLeave();
                                        }
                                    }
                                    grdAttendance.LoadFromDataSource();
                                }
                                #endregion
                            }

                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        BubbleEvent = false;
                    }
                }
                #endregion

                #region ISM Features
                else if (Program.systemInfo.FlgRetailRules1 == true)
                {
                    try
                    {
                        Boolean flgOverTime;
                        #region ISM Working
                        if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut")
                        {
                            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] ShiftStartDate = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] ShiftEndDate = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            DateTime shiftDateX = DateTime.MinValue;
                            string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                            DateTime x = Convert.ToDateTime(shiftDateX);
                            string dayofWeeks = Convert.ToString(x.DayOfWeek);
                            var oEmp = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                            var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                            var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                            if (StartDate.Length != 2 || EndDate.Length != 2)
                            {
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();
                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                {
                                    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", 0);
                                }
                                else
                                {

                                    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = shiftHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", 1);
                                }
                                oForm.Freeze(false);
                                return;
                            }
                            else
                            {
                                int actualTimeInMinutes = (int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]);
                                int shiftTimeInMinutes = (int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]);
                                int DurinMin = 0;
                                if (actualTimeInMinutes < shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]));
                                }
                                else if (actualTimeInMinutes >= shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                                }
                                if (DurinMin < 0)
                                    DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;

                                //string strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                string strWorkHours = "";
                                string ActualWorkingHours = "";
                                Boolean flgActualTimeOutOverlap = false;


                                if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                {
                                    strWorkHours = CalculateWorkHoursISM(TimeIn, TimeOut);
                                    (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strWorkHours;
                                    ActualWorkingHours = strWorkHours;
                                }
                                else
                                {
                                    ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                }

                                string strInOverTime = "00:00";
                                string strOutOverTime = "00:00";
                                string strOverTimeHours = "00:00";
                                string strOverTimeType = "";
                                string shiftBufferTimeIn = "00:00";
                                string shiftBufferTimeOut = "00:00";
                                decimal Time24Hours = ConvertTimeToDecimal("23:59");
                                decimal decShiftTimeIn = 0M;
                                flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                //flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                                if (ShiftDetail != null)
                                {
                                    ShiftTimeIn = ShiftDetail.StartTime;
                                    shiftTimeOut = ShiftDetail.EndTime;
                                    decimal decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                    decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decShiftTimeIn = ConvertTimeToDecimal(ShiftTimeIn);

                                    //if (!flgInOverLap && flgOutOverLap)
                                    //if (Convert.ToBoolean(ShiftDetail.FlgOutOverlap))
                                    if (decTimeOut < Time24Hours && decShiftTimeIn < decTimeOut)
                                    {
                                        flgActualTimeOutOverlap = false;
                                    }
                                    else
                                    {
                                        flgActualTimeOutOverlap = true;
                                    }
                                }
                                //Calculate LateIn Minutes
                                #region Calculate LateIn Minutes

                                var oAttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == oEmp.ID).FirstOrDefault();
                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    string strLateInMinutes = CalculateLateInMinutes(ShiftTimeIn, TimeIn);
                                    //Buffer Period  Included Here
                                    var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                    if (AttendanceRule != null)
                                    {
                                        string BufferInTime = AttendanceRule.GpAfterStartTime;
                                        if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            if (IsBufferApplicable(BufferInTime, strLateInMinutes))
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                        else
                                        {
                                            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        }
                                    }
                                }
                                #endregion
                                //Calculate Early Out Minutes
                                #region Calculate Early Out Minutes
                                if (!string.IsNullOrEmpty(TimeOut))
                                {
                                    string strEarlyOutMinutes = "";
                                    //string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    //var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    //var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                                    //bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                                    decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decimal decTimeIn = 0.0M;
                                    if (TimeIn != null)
                                    {
                                        decTimeIn = ConvertTimeToDecimal(TimeIn);
                                    }

                                    if (decTimeIn > decTimeOut && OutflgOverlap == false)
                                    {
                                        //Do Nothing
                                        (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    }
                                    else
                                    {
                                        if (OutflgOverlap == true)
                                        {

                                            //decimal decshiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                            //decimal decstrTimeOut = ConvertTimeToDecimal(TimeOut);
                                            //if (decstrTimeOut > decshiftTimeOut)
                                            //{
                                            //    strEarlyOutMinutes = CalculateEarlyOutMinutes(TimeOut,shiftTimeOut);

                                            //}
                                            //else
                                            //{
                                            //strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);    
                                            strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, TimeOut, OutflgOverlap, flgActualTimeOutOverlap);
                                            //}
                                        }

                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                            if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                                }
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                    }
                                }
                                #endregion

                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    string strStatus = "";
                                    string strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    string strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStatus;
                                }
                                //Calculating OverTime
                                #region Overtime Calculations
                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    flgOverTime = false;
                                    decimal decActualWorkingHours = ConvertTimeToDecimal(ActualWorkingHours);
                                    decimal decShiftHours = ConvertTimeToDecimal(shiftHours);
                                    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    {
                                        strOverTimeHours = strWorkHours;
                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                           where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                           select a.Code).FirstOrDefault() ?? "";
                                        (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                    }
                                    else
                                    {


                                        if (decActualWorkingHours > decShiftHours)
                                        {


                                            //string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                            //var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                            //var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();


                                            shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                            shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                            string TempShiftName = ShiftRecord.Description;
                                            //bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                                            if (oAttendanceRegister.FlgOffDay == true)
                                            {
                                                flgOverTime = oAttendanceRegister.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegister.MstShifts.FlgOffDayOverTime.Value;
                                            }
                                            else
                                            {
                                                flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;
                                            }
                                            if (!Convert.ToBoolean(ShiftRecord.OverTime.Value))
                                            {
                                                strOverTimeHours = "";
                                                strOverTimeType = "";
                                            }
                                            else
                                            {
                                                bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                bool flgOtonWorkedHours = ShiftRecord.FlgOTWrkHrs == null ? false : ShiftRecord.FlgOTWrkHrs.Value;
                                                if (flgOtonWorkedHours)
                                                {
                                                    if (flgEmployeeOTCheck)
                                                    {
                                                        //strOverTimeHours = CalculateOverTimeHoursSSL(shiftHours, ActualWorkingHours);
                                                        //strOverTimeHours = CalculateOverTimeISM(TimeIn, TimeOut, ShiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours);
                                                        //if (oEmp.DefaultOffDay.ToLower() == dayofWeeks.ToLower())
                                                        if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                        {
                                                            strOverTimeHours = ActualWorkingHours;
                                                        }
                                                        else
                                                        {
                                                            //strOverTimeHours = CalculateOverTimeHours(shiftHours, ActualWorkingHours);
                                                            strOverTimeHours = CalculateOverTimeISM(TimeIn, TimeOut, ShiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours, OutflgOverlap, flgActualTimeOutOverlap);
                                                        }
                                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                        {
                                                            //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;

                                                            if (oAttendanceRegister.FlgOffDay == true)
                                                            {
                                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                   where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                                   select a.Code).FirstOrDefault() ?? "";
                                                            }
                                                            else
                                                            {
                                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                   where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                   select a.Code).FirstOrDefault() ?? "";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            strOverTimeType = "";
                                                        }
                                                        (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                    }
                                                    else
                                                    {
                                                        strOverTimeHours = "";
                                                        strOverTimeType = "";
                                                    }
                                                }
                                                else
                                                {
                                                    if (flgEmployeeOTCheck)
                                                    {
                                                        if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                        {
                                                            shiftBufferTimeIn = ShiftTimeIn;
                                                        }
                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                        {
                                                            shiftBufferTimeOut = shiftTimeOut;
                                                        }

                                                        strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, TimeIn);
                                                        if (strInOverTime != "00:00")
                                                        {
                                                            //CalculateIN Overtime AccordingToShift
                                                            strInOverTime = CalculateInOvertimeApplicableSSL(ShiftTimeIn, TimeIn);
                                                        }
                                                        //
                                                        decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                                                        decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);
                                                        //if (decshiftBufferTimeOut > decTimeOut)
                                                        //{
                                                        if (decTimeOut < Time24Hours && decShiftTimeIn > decTimeOut)
                                                        {
                                                            strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut, OutflgOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                                        }
                                                        //}
                                                        if (strOutOverTime != "00:00")
                                                        {
                                                            //strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut);
                                                            strOutOverTime = CalculateOutOvertimeApplicableSSL(TimeOut, shiftTimeOut, OutflgOverlap);
                                                        }
                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);
                                                        //OverTime on Weekend
                                                        //if (shiftHours == "00:00")
                                                        if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                        {
                                                            strOverTimeHours = ActualWorkingHours;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                                                        if (oAttendanceRegister.FlgOffDay == true)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                        }
                                    }

                                }

                                #endregion

                                //Calculate Leaves in diffrent Scenerio
                                #region Full Leave Cases

                                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && shiftHours != "00:00")
                                {

                                    decimal LeaveCount = 0.0M;
                                    string TempLeaveHours = "", strDeductionRule = "";
                                    string strLeaveHours = "", strDesc = "";
                                    string strLeaveType = "";
                                    string strLeaveTypeCode = "";
                                    int intLeaveType;
                                    bool isNewLeave = false;
                                    var PostedLeaves = (from a in dbHrPayroll.TrnsLeavesRequest
                                                        where a.MstEmployee.EmpID == oEmp.EmpID
                                                        && a.LeaveFrom <= x && a.LeaveTo >= x
                                                        select a).FirstOrDefault();
                                    if (PostedLeaves != null && PostedLeaves.UnitsID == "Day")
                                    {
                                        strLeaveHours = shiftHours;
                                        LeaveCount = 1.0M;
                                        strLeaveType = PostedLeaves.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == PostedLeaves.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = PostedLeaves.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else if (PostedLeaves != null && PostedLeaves.UnitsID == "HalfDay")
                                    {
                                        strLeaveHours = shiftHours;
                                        LeaveCount = 0.5M;
                                        strLeaveType = PostedLeaves.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == PostedLeaves.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = PostedLeaves.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else
                                    {
                                        var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                        where a.Code == "DR_03"
                                                        select a).FirstOrDefault();

                                        if (oDedRule != null)
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = oLeaveMaster.Description;
                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                intLeaveType = oLeaveMaster.ID;
                                                isNewLeave = true;
                                                strDeductionRule = oDedRule.Code;
                                                strDesc = "";
                                            }
                                            else
                                            {
                                                MsgError("Leave Type not selected in deduction rule 3.");
                                                return;
                                            }
                                        }
                                    }
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                    (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                    (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                }
                                #endregion

                                #region Work Hour Differs Shift Hours
                                if (!string.IsNullOrEmpty(strWorkHours) && shiftHours != "00:00")
                                {
                                    if (oEmp.DefaultOffDay.ToLower() != dayofWeeks.ToLower())
                                    {
                                        string TempLeaveHours = "", strLateInMinutes = "", strEarlyOutMinutes = "", strTempWorkHours = "";
                                        //string strOverTimeHours = "";
                                        string strLeaveHours = "", strLeaveType = "", strLeaveTypeCode = "", strDeductionRule = "", strDesc = "";
                                        decimal LeaveCount = 0;
                                        bool flgLeaveIsNew = false;
                                        int intLeaveType = 0;
                                        //strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                        strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                        strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                        //var oEmp = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                                        //TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, strWorkHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);
                                        TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, ActualWorkingHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);
                                        //strTempWorkHours = CalculateWorkHours(TimeIn, shiftTimeOut, ShiftTimeIn, shiftTimeOut);
                                        //TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);

                                        //TempLeaveHours = CalculateHalfShiftHours(shiftHours);
                                        //TempLeaveHours = "00:00";
                                        if ((!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00") || TempLeaveHours == "00:00")
                                        {
                                            var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                            if (oDedRule.Code == "DR_02")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                    LeaveCount = 0.5M;
                                                    strLeaveType = oLeaveMaster.Description;
                                                    strLeaveTypeCode = oLeaveMaster.Code;
                                                    intLeaveType = oLeaveMaster.ID;
                                                    flgLeaveIsNew = true;
                                                    strDeductionRule = oDedRule.Code;
                                                    strDesc = "";
                                                }
                                            }
                                            else if (oDedRule.Code == "DR_01")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    strLeaveHours = TempLeaveHours;
                                                    LeaveCount = GetLeaveCountOnMinLeaves(strLeaveHours, shiftHours);
                                                    if (LeaveCount != 0)
                                                    {
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        //LeaveCount = LeaveCount;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                    else
                                                    {
                                                        //strLeaveType = oLeaveMaster.Description;
                                                        //strLeaveTypeCode = oLeaveMaster.Code;
                                                        //intLeaveType = oLeaveMaster.ID;
                                                        //flgLeaveIsNew = true;
                                                        //strDeductionRule = oDedRule.Code;
                                                        //strDesc = "";
                                                    }
                                                }
                                                else
                                                {
                                                    strLeaveHours = TempLeaveHours;
                                                    LeaveCount = 0;
                                                    strLeaveType = "";
                                                    strLeaveTypeCode = "";
                                                    intLeaveType = 0;
                                                    flgLeaveIsNew = false;
                                                    strDeductionRule = oDedRule.Code;
                                                    strDesc = "";
                                                }
                                            }
                                            else if (oDedRule.Code == "DR_03")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    strLeaveHours = TempLeaveHours;
                                                    LeaveCount = 1;
                                                    strLeaveType = oLeaveMaster.Description;
                                                    strLeaveTypeCode = oLeaveMaster.Code;
                                                    intLeaveType = oLeaveMaster.ID;
                                                    flgLeaveIsNew = true;
                                                    strDeductionRule = oDedRule.Code;
                                                    strDesc = "";
                                                }
                                            }
                                            (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                            (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                            (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                            (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                            (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                            (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                        }
                                        else
                                        {
                                            flgLeaveIsNew = false;
                                            TempLeaveHours = "";
                                            LeaveCount = 0;
                                            strLeaveType = "";
                                            strDesc = "";
                                            strDeductionRule = "";
                                            (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                            (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                            (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                            (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                            (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                            (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                        }
                                    }
                                }
                                #endregion

                                #region Time In,Out Missing.
                                if (((string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut)) ||
                                        (!string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut)))
                                    && (Convert.ToBoolean(Program.systemInfo.FlgAbsent)))
                                {
                                    var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                    string TempLeaveHours = "";
                                    string strLeaveHours = "", strLeaveType = "", strLeaveTypeCode = "", strDeductionRule = "", strDesc = "";
                                    decimal LeaveCount = 0;
                                    bool flgLeaveIsNew = false;
                                    int intLeaveType = 0;
                                    if (oAttRule != null)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                        if (oLeaveMaster != null)
                                        {
                                            strLeaveHours = shiftHours;
                                            LeaveCount = 1.0M;
                                            strLeaveType = oLeaveMaster.Description;
                                            strLeaveTypeCode = oLeaveMaster.Code;
                                            intLeaveType = oLeaveMaster.ID;
                                            flgLeaveIsNew = true;
                                            strDeductionRule = "DR_03";
                                        }
                                        (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                        (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                        (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                        (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                        (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                        (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                    }
                                }
                                #endregion

                            }
                        }
                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger(ex);
                        //BubbleEvent = false;
                    }
                }
                #endregion

                #region UAE Feature Joseph Group
                else if (Program.systemInfo.FlgArabic == true && CompanyName.ToLower() == "joseph")
                {
                    try
                    {
                        #region UAE Feature Joseph Group

                        if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut")
                        {
                            string EmpName, EmpCode;
                            string TimeIn = "", TimeOut = "", WorkHours = "", DayName = "", EarlyIn = "", LateIn = "", EarlyOut = "", LateOut = "";
                            string ShiftCode = "", ShiftName = "", ShiftDay = "", ShiftIn = "", ShiftOut = "", ShiftHour = "";
                            string LeaveHour = "00:00", OvertimeHours = "00:00", DeductionRule = "", Remarks = "", LineComments = "";
                            string LeaveType = "-1", OvertimeType = "-1";
                            bool flgShiftOverlap = false, flgShiftExpectedOverlap = false;
                            bool flgProcessed = false, flgPosted = false, flgNewLeave = false;
                            bool flgActualOverlap = false, flgIsWeekend = false, flgIsOffDay = false, flgIsPublicHoliday = false;
                            bool flgShiftOT = false, flgShiftOTOffDay = false, flgShiftOTHoliday = false;
                            int ShiftOTId = 0, ShiftOTOffDayId = 0, ShiftOTHolidayId = 0;
                            decimal decTimeIn = 0, LeaveCount = 0;

                            TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TempEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TempTodayDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string AttendanceID = (grdAttendance.Columns.Item("Id").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            DateTime TodayDate = DateTime.MinValue;
                            TodayDate = DateTime.ParseExact(TempTodayDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                            if (string.IsNullOrEmpty(TimeIn) || string.IsNullOrEmpty(TimeOut))
                            {
                                oForm.Freeze(false);
                                return;
                            }
                            else
                            {

                                var oEmp = (from a in dbHrPayroll.MstEmployee
                                            where a.EmpID == TempEmpCode
                                            select a).FirstOrDefault();
                                if (oEmp == null)
                                {
                                    MsgWarning("Employee not foud.");
                                    oForm.Freeze(false);
                                    return;
                                }
                                EmpCode = oEmp.EmpID;
                                EmpName = oEmp.FirstName + " " + oEmp.MiddleName + " " + oEmp.LastName;

                                DayName = Convert.ToString(TodayDate.DayOfWeek);

                                #region Shift Decision

                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    decTimeIn = ConvertTimeMinutes(TimeIn, false);
                                    var oPayroll = (from a in dbHrPayroll.CfgPayrollDefination
                                                    where a.ID == oEmp.PayrollID
                                                    select a).FirstOrDefault();
                                    List<PayrollShifts> oValidShiftCollection = new List<PayrollShifts>();
                                    foreach (var One in oPayroll.CfgPayrollShifts)
                                    {
                                        if (!Convert.ToBoolean(One.FlgDefault))
                                        {
                                            var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                          where a.ShiftID == One.ShiftId
                                                          select a).ToList();
                                            foreach (var ShiftDetail in oShift)
                                            {
                                                PayrollShifts oNew = new PayrollShifts();
                                                oNew.ShiftCode = ShiftDetail.MstShifts.Code;
                                                oNew.ShiftDay = ShiftDetail.Day;
                                                oNew.LowerTimeIn = ConvertTimeMinutes(ShiftDetail.StartTime, false) - ConvertTimeMinutes(ShiftDetail.BufferEndTime, false);
                                                oNew.UpperTimeIn = ConvertTimeMinutes(ShiftDetail.StartTime, false) + ConvertTimeMinutes(ShiftDetail.BufferEndTime, false);
                                                oValidShiftCollection.Add(oNew);
                                            }
                                        }
                                    }
                                    var DayWiseCollection = (from a in oValidShiftCollection
                                                             where a.ShiftDay == DayName
                                                             select a).ToList();
                                    foreach (var One in DayWiseCollection)
                                    {
                                        if (decTimeIn >= One.LowerTimeIn && decTimeIn <= One.UpperTimeIn)
                                        {
                                            ShiftCode = One.ShiftCode;
                                            break;
                                        }

                                    }
                                    if (string.IsNullOrEmpty(ShiftCode))
                                    {
                                        var ShiftID = (from a in dbHrPayroll.CfgPayrollShifts
                                                       where a.CfgPayrollDefination.ID == oEmp.PayrollID
                                                       && (a.FlgDefault == null ? false : a.FlgDefault) == true
                                                       select a).FirstOrDefault();
                                        var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                      where a.ShiftID == ShiftID.ShiftId
                                                      && a.Day == DayName
                                                      select a).FirstOrDefault();
                                        ShiftCode = oShift.MstShifts.Code;
                                    }
                                }
                                else
                                {
                                    var ShiftID = (from a in dbHrPayroll.CfgPayrollShifts
                                                   where a.CfgPayrollDefination.ID == oEmp.PayrollID
                                                   && (a.FlgDefault == null ? false : a.FlgDefault) == true
                                                   select a).FirstOrDefault();
                                    var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                  where a.ShiftID == ShiftID.ShiftId
                                                  && a.Day == DayName
                                                  select a).FirstOrDefault();
                                    ShiftCode = oShift.MstShifts.Code;
                                }
                                if (!string.IsNullOrEmpty(ShiftCode))
                                {
                                    var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                  where a.MstShifts.Code == ShiftCode
                                                  && a.Day == DayName
                                                  select a).FirstOrDefault();
                                    ShiftName = oShift.MstShifts.Description;
                                    ShiftDay = oShift.Day;
                                    ShiftIn = oShift.StartTime;
                                    ShiftOut = oShift.EndTime;
                                    ShiftHour = oShift.Duration;
                                    flgShiftOverlap = Convert.ToBoolean(oShift.FlgOutOverlap);
                                    flgShiftExpectedOverlap = Convert.ToBoolean(oShift.FlgExpectedOut);
                                    flgShiftOT = oShift.MstShifts.OverTime ?? false;
                                    flgShiftOTOffDay = oShift.MstShifts.FlgOffDayOverTime ?? false;
                                    flgShiftOTHoliday = oShift.MstShifts.FlgHoliDayOverTime ?? false;
                                    ShiftOTId = oShift.MstShifts.OverTimeID ?? 0;
                                    ShiftOTOffDayId = oShift.MstShifts.OffDayOverTime ?? 0;
                                    ShiftOTHolidayId = oShift.MstShifts.HoliDayOverTime ?? 0;
                                    if (ShiftHour == "00:00")
                                    {
                                        flgIsWeekend = true;
                                    }
                                    if (!string.IsNullOrEmpty(oEmp.EmpCalender))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + oEmp.EmpCalender + "' AND \"StrDate\" <= '" + TodayDate.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + TodayDate.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            Remarks = oRecSet.Fields.Item(1).Value;
                                            ShiftHour = "00:00";
                                            ShiftIn = "00:00";
                                            ShiftOut = "00:00";
                                            if (Remarks.Contains("OffDay"))
                                            {
                                                flgIsOffDay = true;
                                                flgIsPublicHoliday = false;
                                            }
                                            else
                                            {
                                                flgIsPublicHoliday = true;
                                                flgIsOffDay = true;
                                            }
                                        }
                                    }
                                }

                                #endregion

                                int TimeInValue = ConvertTimeMinutes(TimeIn, false);
                                int TimeOutValue = ConvertTimeMinutes(TimeOut, false);
                                int DayChangeLimit = ConvertTimeMinutes("24:00", false);
                                if (TimeOutValue <= DayChangeLimit && TimeOutValue <= TimeInValue)
                                {
                                    flgActualOverlap = true;
                                }
                                else
                                {
                                    flgActualOverlap = false;
                                }

                                WorkHours = GetWorkHour(TimeIn, TimeOut, flgActualOverlap);

                                #region EarlyIn/LateIn

                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    GetEarlyLateIn(TimeIn, ShiftIn, out EarlyIn, out LateIn);
                                }

                                if (!string.IsNullOrEmpty(LateIn) && LateIn != "00:00")
                                {
                                    LineComments += " LateIn";
                                }

                                #endregion

                                #region EarlyOut/LateOut

                                if (!string.IsNullOrEmpty(TimeOut))
                                {
                                    GetEarlyLateOut(TimeOut, ShiftOut, out EarlyOut, out LateOut);
                                }

                                if (!string.IsNullOrEmpty(EarlyOut) && EarlyOut != "00:00")
                                {
                                    LineComments += " Early Out";
                                }

                                #endregion

                                #region Leaves

                                #region Full Day Leave
                                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && ShiftHour != "00:00")
                                {
                                    var LeaveRequest = (from a in dbHrPayroll.TrnsLeavesRequest
                                                        where a.EmpID == oEmp.ID
                                                        && a.LeaveFrom <= TodayDate
                                                        && a.LeaveTo >= TodayDate
                                                        && a.DocAprStatus == "LV0006"
                                                        select a).FirstOrDefault();
                                    if (LeaveRequest == null)
                                    {
                                        var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(ShiftHour, ShiftName).FirstOrDefault();
                                        if (oDedRule != null)
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                LeaveHour = ShiftHour;
                                                LeaveCount = 1.0M;
                                                LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                flgNewLeave = true;
                                                DeductionRule = oDedRule.Code;
                                            }
                                            else
                                            {
                                                MsgError("Leave Type not selected in deduction rule 3.");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        LeaveHour = ShiftHour;
                                        LeaveType = LeaveRequest != null ? LeaveRequest.MstLeaveType.Code : "-1";
                                        DeductionRule = "DR_03";
                                        LeaveCount = 1;
                                        flgNewLeave = false;
                                    }
                                }

                                #endregion

                                #region Half Day Leave
                                if (!string.IsNullOrEmpty(WorkHours) && ShiftHour != "00:00")
                                {
                                    string CalculateLeaveHour = "00:00";
                                    CalculateLeaveHour = CalculateLeaveHoursForShifts(WorkHours, ShiftHour);
                                    if (CalculateLeaveHour != "00:00")
                                    {
                                        var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(CalculateLeaveHour, ShiftName).FirstOrDefault();
                                        if (oDedRule != null)
                                        {
                                            if (oDedRule.Code == "DR_02")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    LeaveHour = CalculateHalfShiftHours(ShiftHour);
                                                    LeaveCount = 0.5M;
                                                    LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                    flgNewLeave = true;
                                                    strDeductionRule = oDedRule.Code;
                                                }
                                            }
                                            else if (oDedRule.Code == "DR_01")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    LeaveCount = GetLeaveCountOnMinLeaves(LeaveHour, ShiftHour);
                                                    LeaveHour = CalculateLeaveHour;
                                                    LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                    flgNewLeave = true;
                                                    strDeductionRule = oDedRule.Code;
                                                }
                                            }
                                            else if (oDedRule.Code == "DR_03")
                                            {
                                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                {
                                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                        where a.ID == oDedRule.LeaveType
                                                                        select a).FirstOrDefault();
                                                    LeaveHour = ShiftHour;
                                                    LeaveCount = 1.0M;
                                                    LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                    flgNewLeave = true;
                                                    DeductionRule = oDedRule.Code;
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Missing TimeIn Or TimeOut

                                if ((string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut)) || (!string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut)))
                                {
                                    var LeaveRequest = (from a in dbHrPayroll.TrnsLeavesRequest
                                                        where a.EmpID == oEmp.ID
                                                        && a.LeaveFrom <= TodayDate
                                                        && a.LeaveTo >= TodayDate
                                                        && a.DocAprStatus == "LV0006"
                                                        select a).FirstOrDefault();
                                    if (LeaveRequest == null)
                                    {
                                        var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                        where a.Code == "DR_03"
                                                        select a).FirstOrDefault();
                                        if (oDedRule != null)
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                LeaveHour = ShiftHour;
                                                LeaveCount = 1.0M;
                                                LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                flgNewLeave = true;
                                                DeductionRule = oDedRule.Code;
                                            }
                                            else
                                            {
                                                MsgError("Leave Type not selected in deduction rule 3.");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        LeaveHour = ShiftHour;
                                        LeaveType = LeaveRequest != null ? LeaveRequest.MstLeaveType.Code : "-1";
                                        DeductionRule = "DR_03";
                                        LeaveCount = 1;
                                        flgNewLeave = false;
                                    }
                                }

                                #endregion

                                #endregion

                                #region Overtime Calculation

                                if (Convert.ToBoolean(oEmp.FlgOTApplicable))
                                {
                                    //Payroll Check
                                    if (Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT))
                                    {
                                        if (WorkHours != "00:00")
                                        {
                                            if (flgIsWeekend || flgIsPublicHoliday)
                                            {
                                                OvertimeHours = WorkHours;
                                            }
                                            else
                                            {
                                                OvertimeHours = CalculateOTHours(WorkHours, ShiftHour);
                                            }
                                            if (OvertimeHours != "00:00")
                                            {
                                                int intOTId = Convert.ToInt32(oEmp.CfgPayrollDefination.OTValue);
                                                var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                                 where a.ID == intOTId
                                                                 select a).FirstOrDefault();
                                                OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                            }
                                        }
                                    }
                                    //Shift Check
                                    else if (Convert.ToBoolean(flgShiftOT))
                                    {
                                        if (flgIsWeekend || flgIsPublicHoliday)
                                        {
                                            OvertimeHours = WorkHours;
                                        }
                                        else
                                        {
                                            OvertimeHours = CalculateOTHours(WorkHours, ShiftHour);
                                        }
                                        if (OvertimeHours != "00:00")
                                        {
                                            if (flgIsPublicHoliday)
                                            {
                                                int intOTId = Convert.ToInt32(ShiftOTHolidayId);
                                                var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                                 where a.ID == intOTId
                                                                 select a).FirstOrDefault();
                                                OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                            }
                                            else if (flgIsOffDay)
                                            {
                                                int intOTId = Convert.ToInt32(ShiftOTOffDayId);
                                                var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                                 where a.ID == intOTId
                                                                 select a).FirstOrDefault();
                                                OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                            }
                                            else if (flgIsWeekend)
                                            {
                                                int intOTId = Convert.ToInt32(ShiftOTId);
                                                var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                                 where a.ID == intOTId
                                                                 select a).FirstOrDefault();
                                                OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                            }
                                            else
                                            {
                                                int intOTId = Convert.ToInt32(ShiftOTId);
                                                var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                                 where a.ID == intOTId
                                                                 select a).FirstOrDefault();
                                                OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                            }
                                        }
                                    }
                                }

                                #endregion

                                #region Setting Grid

                                (grdAttendance.Columns.Item(clId.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "0";
                                (grdAttendance.Columns.Item(clShiftCode.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = ShiftCode;
                                (grdAttendance.Columns.Item(clShiftTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = ShiftIn;
                                (grdAttendance.Columns.Item(clShiftTiemOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = ShiftOut;
                                (grdAttendance.Columns.Item(clShiftHours.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = ShiftHour;
                                //(grdAttendance.Columns.Item(clTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TimeIn;
                                //(grdAttendance.Columns.Item(clTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TimeOut;
                                (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = WorkHours;
                                (grdAttendance.Columns.Item(clLateInMinutes.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = LateIn;
                                (grdAttendance.Columns.Item(clEarlyOutMinutes.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = EarlyOut;
                                (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = LineComments;
                                (grdAttendance.Columns.Item(clOTType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(OvertimeType.ToString(), BoSearchKey.psk_ByValue);
                                (grdAttendance.Columns.Item(clOTHour.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = OvertimeHours;
                                (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(LeaveType.ToString(), BoSearchKey.psk_ByValue);
                                (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = LeaveHour;
                                (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgNewLeave;
                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = DeductionRule;
                                (grdAttendance.Columns.Item(clRemarks.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = Remarks;
                                #endregion
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger(ex);
                        //oForm.Freeze(false);
                    }
                }
                #endregion

                #region Standrad Features
                else
                {
                    try
                    {
                        #region Standard Working
                        //if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut" || pVal.ColUID == "TourHrs" || pVal.ColUID == "OTAdjt")
                        if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut" || pVal.ColUID == "AdjHrs")
                        {
                            string grdTimeIn = "", grdTimeOut = "", dtTimeIn = "", dtTimeOut = "";
                            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            grdTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            grdTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            dtTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, pVal.Row - 1));
                            dtTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, pVal.Row - 1));
                            string[] ShiftStartDate = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string[] ShiftEndDate = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                            string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string TourHrs = (grdAttendance.Columns.Item("AdjHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string OtAdjustment = (grdAttendance.Columns.Item("OTAdjt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            string strDescGrid = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            DateTime shiftDateX = DateTime.MinValue;
                            string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                            DateTime x = Convert.ToDateTime(shiftDateX);
                            string dayofWeeks = Convert.ToString(x.DayOfWeek);
                            var oEmp = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                            var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                            var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                            string ShiftCode = ShiftDetail.MstShifts.Code;
                            string PreTimeIn = string.Empty, PreTimeOut = string.Empty;
                            Boolean flgOverTime, flgModified = false;
                            string strLateInMinutes = "", strEarlyOutMinutes = "";
                            decimal decTimeOutCheck24Hrs = 0M, decBufferTimeIn = 0M;
                            decimal Time24Hours = ConvertTimeToDecimal("23:59");
                            Boolean flgShiftExpectedIn, flgShiftExpectedOut;
                            DateTime SDate = DateTime.MinValue;
                            DateTime EDate = DateTime.MinValue;
                            //TrnsBatches eleBatch;
                            SDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                            EDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                            var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                                   select a).FirstOrDefault();
                            if (dtTimeIn != grdTimeIn)
                            {
                                PreTimeIn = string.IsNullOrEmpty(dtTimeIn) ? "" : dtTimeIn;
                                flgModified = true;
                                if (PreTimeIn == "")
                                {
                                    PreTimeIn = "00:00";
                                }
                            }
                            if (dtTimeOut != grdTimeOut)
                            {
                                PreTimeOut = string.IsNullOrEmpty(dtTimeOut) ? "" : dtTimeOut;
                                flgModified = true;
                                if (PreTimeOut == "")
                                {
                                    PreTimeOut = "00:00";
                                }
                            }
                            if (flgModified)
                            {
                                (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgModified;
                                (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeIn;
                                (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeOut;
                            }
                            else
                            {
                                (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                            }
                            if (StartDate.Length != 2 || EndDate.Length != 2)
                            {
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();

                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay) || !string.IsNullOrEmpty(strDescGrid))
                                {

                                    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", 0);
                                    (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "DR_03";
                                    if (oAttendanceRule != null)
                                    {
                                        if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                                        {
                                            SandwichLeaveGridTwoLine(pVal.Row);
                                        }
                                    }
                                }
                                else
                                {
                                    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                    (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = shiftHours;
                                    var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(oLeaveMaster.Description);
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", 1);
                                    (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "DR_03";

                                    if (oAttendanceRule != null)
                                    {
                                        if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                                        {
                                            SandwichLeaveGridTwoLine(pVal.Row);
                                        }
                                    }

                                }

                                oForm.Freeze(false);
                                return;

                            }
                            else
                            {
                                int actualTimeInMinutes = (int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]);
                                int shiftTimeInMinutes = (int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]);
                                int DurinMin = 0;
                                if (actualTimeInMinutes < shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(ShiftStartDate[0]) * 60) + int.Parse(ShiftStartDate[1]));
                                }
                                else if (actualTimeInMinutes >= shiftTimeInMinutes)
                                {
                                    DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                                }
                                if (DurinMin < 0)
                                    DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;


                                string strWorkHours = "";
                                string ActualWorkingHours = "";
                                Boolean flgActualTimeOutOverlap = false;
                                Boolean flgActualTimeInOverlap = false;

                                string strInOverTime = "00:00";
                                string strOutOverTime = "00:00";
                                string strOverTimeHours = "00:00";
                                string strOverTimeType = "";
                                string shiftBufferTimeIn = "00:00";
                                string shiftBufferTimeOut = "00:00";
                                string StartGraceTime = "00:00";
                                string EndGraceTime = "00:00";
                                string strTotalHours = "00:00";
                                string strStandardWorkingHrs = "00:00";
                                Time24Hours = ConvertTimeToDecimal("23:59");
                                decimal decShiftTimeIn = 0M;
                                decimal decShiftTimeOut = 0M;
                                decimal decTimeIn = 0M;
                                decimal decTimeOut = 0M;
                                flgShiftExpectedIn = false;
                                flgShiftExpectedOut = false;
                                flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                bool flgExpectedOutOverlap = ShiftDetail.FlgExpectedOut == null ? false : ShiftDetail.FlgExpectedOut.Value;
                                bool flgShiftOutOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                                shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                if (ShiftDetail != null)
                                {
                                    ShiftTimeIn = ShiftDetail.StartTime;
                                    shiftTimeOut = ShiftDetail.EndTime;
                                    StartGraceTime = ShiftDetail.StartGraceTime;
                                    EndGraceTime = ShiftDetail.EndGraceTime;
                                    decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                    decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decShiftTimeIn = ConvertTimeToDecimal(ShiftTimeIn);
                                    decTimeIn = ConvertTimeToDecimal(TimeIn);
                                    decBufferTimeIn = ConvertTimeToDecimal(shiftBufferTimeIn);
                                    if (decTimeOut <= Time24Hours && decShiftTimeIn < decTimeOut)
                                    {
                                        flgActualTimeOutOverlap = false;
                                    }
                                    else
                                    {
                                        flgActualTimeOutOverlap = true;
                                    }

                                    if (!flgOutOverLap)
                                    {
                                        if (decTimeIn <= Time24Hours && decShiftTimeOut > decTimeIn)
                                        {
                                            flgActualTimeInOverlap = false;
                                        }
                                        else
                                        {
                                            flgActualTimeInOverlap = true;
                                        }
                                    }
                                    else
                                    {
                                        if (decTimeIn <= Time24Hours && decShiftTimeOut < decTimeIn)
                                        {
                                            flgActualTimeInOverlap = false;
                                        }
                                        else
                                        {
                                            flgActualTimeInOverlap = true;
                                        }
                                    }
                                }
                                if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == true)
                                {
                                    #region Working Hours on the basis of Multiple Time In and Outs
                                    DateTime nextDay = x.AddDays(1);
                                    DateTime previosDay = x.AddDays(-1);

                                    var TempAttendanceList = (from a in dbHrPayroll.TrnsTempAttendance
                                                              where a.EmpID == oEmp.EmpID
                                                              && a.PunchedDate >= SDate
                                                              && a.PunchedDate <= EDate
                                                              //select a).ToList();
                                                              select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendance = (from a in dbHrPayroll.TrnsTempAttendance
                                                          where a.EmpID == oEmp.EmpID
                                                          && a.PunchedDate == x
                                                          //select a).ToList();
                                                          select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendanceNextDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                 where a.EmpID == oEmp.EmpID
                                                                 && a.PunchedDate == nextDay
                                                                 //select a).ToList();
                                                                 select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendancePreviousDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                     where a.EmpID == oEmp.EmpID
                                                                     && a.PunchedDate == previosDay
                                                                     select a).ToList();

                                    flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                    where a.Date == x && a.EmpID == oEmp.ID
                                                    select a.Processed).FirstOrDefault() ?? false;

                                    var oAttendanceRegisterNotSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                       where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                       && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                                       ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                                       select a).FirstOrDefault();

                                    if (!flgProcessed)
                                    {
                                        if (oAttendanceRegisterNotSaved != null)
                                        {
                                            #region If Flag TimeIn and TimeOut not Applicable
                                            if (!flgInOverLap && !flgOutOverLap)
                                            {
                                                if (TempAttendance != null && TempAttendance.Count > 0)
                                                {
                                                    TimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                    TimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                    if (flgShiftExpectedOut)
                                                    {
                                                        flgActualTimeOutOverlap = true;
                                                        var oTempAttNext = (from a in dbHrPayroll.TrnsTempAttendance
                                                                            where a.EmpID == oEmp.EmpID && a.PunchedDate == nextDay
                                                                            select a).ToList();
                                                        string strPreviousTimeOut = "";

                                                        TimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                        strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                        TimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                        if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                        {
                                                            decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                            TempTimeIn = CalculateStringTime(TimeIn);
                                                            TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                            if (TempTimeIn < TempPreTimeOut)
                                                            {
                                                                //strTimeOut = strPreviousTimeOut;
                                                                flgActualTimeOutOverlap = false;
                                                            }
                                                        }
                                                        else if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                                        {
                                                            decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                            TempTimeIn = CalculateStringTime(ShiftTimeIn);
                                                            TempPreTimeOut = CalculateStringTime(TimeOut);
                                                            if (TempTimeIn < TempPreTimeOut)
                                                            {
                                                                TimeOut = "";
                                                                flgActualTimeOutOverlap = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        decTimeOutCheck24Hrs = ConvertTimeToDecimal(TimeOut);
                                                        decShiftTimeIn = ConvertTimeToDecimal(TimeIn);
                                                        if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                                        {
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                        else
                                                        {
                                                            flgActualTimeOutOverlap = true;
                                                            #region If Employee Time Out After 00:00

                                                            if (TempAttendanceNextDay.Count > 0)
                                                            {
                                                                string strPreviousTimeOut = "";

                                                                TimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                                strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                                TimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                                if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                                {
                                                                    decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                                    TempTimeIn = CalculateStringTime(TimeIn);
                                                                    TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                                    if (TempTimeIn < TempPreTimeOut)
                                                                    {
                                                                        //strTimeOut = strPreviousTimeOut;
                                                                        flgActualTimeOutOverlap = false;
                                                                    }
                                                                }
                                                                else if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                                                {
                                                                    decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                                    TempTimeIn = CalculateStringTime(ShiftTimeIn);
                                                                    TempPreTimeOut = CalculateStringTime(TimeOut);
                                                                    if (TempTimeIn < TempPreTimeOut)
                                                                    {
                                                                        TimeOut = "";
                                                                        flgActualTimeOutOverlap = false;
                                                                    }
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            #region If Flag TimeOut is Applicable
                                            else if (!flgInOverLap && flgOutOverLap)
                                            {
                                                flgActualTimeOutOverlap = true;
                                                flgActualTimeInOverlap = false;
                                                string strPreviousTimeOut = "";
                                                if (TempAttendance != null && TempAttendance.Count > 0)
                                                {
                                                    TimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                    strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                    TimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));

                                                    #region Get Attendance List on Fist Time In And Last Time Out
                                                    TrnsTempAttendance from = null;
                                                    TrnsTempAttendance To = null;
                                                    if (strPreviousTimeOut != null && strPreviousTimeOut != null)
                                                    {
                                                        from = TempAttendance.FirstOrDefault(o => o.PunchedTime == TimeIn);
                                                        To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == TimeOut);
                                                        int IDFrom = from.ID;
                                                        int IDTo = To.ID;
                                                    }
                                                    else if (TimeOut != null && strPreviousTimeOut == null)
                                                    {
                                                        from = TempAttendance.FirstOrDefault(o => o.PunchedTime == TimeIn);
                                                        To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == TimeOut);
                                                        int IDFrom = from.ID;
                                                        int IDTo = To.ID;
                                                    }
                                                    else if (strPreviousTimeOut != null)
                                                    {
                                                        from = TempAttendance.FirstOrDefault(o => o.PunchedTime == TimeIn);
                                                        To = TempAttendance.FirstOrDefault(o => o.PunchedTime == strPreviousTimeOut);
                                                        int IDFrom = from.ID;
                                                        int IDTo = To.ID;
                                                    }
                                                    if (from != null && To != null)
                                                    {
                                                        TempAttendance = TempAttendanceList.Where(o => o.ID >= from.ID && o.ID <= To.ID).OrderBy(o => o.ID).ToList();
                                                    }
                                                    #endregion
                                                    if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                    {
                                                        decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                        TempTimeIn = CalculateStringTime(TimeIn);
                                                        TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                    else if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                                    {
                                                        decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                        TempTimeIn = CalculateStringTime(TimeIn);
                                                        TempPreTimeOut = CalculateStringTime(TimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            TimeOut = "";
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                }
                                            }
                                            #region If Flag TimeIn And TimeOut is Applicable
                                            else if (flgInOverLap && !flgOutOverLap)
                                            {
                                                flgActualTimeOutOverlap = false;
                                                flgActualTimeInOverlap = true;
                                                if (TempAttendance.Count > 0 && TempAttendancePreviousDay.Count > 0)
                                                {
                                                    TimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                    TimeOut = Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));

                                                    #region Get Attendance List on Fist Time In And Last Time Out
                                                    TrnsTempAttendance from = null;
                                                    TrnsTempAttendance To = null;

                                                    from = TempAttendance.FirstOrDefault(o => o.PunchedTime == TimeIn);
                                                    To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == TimeOut);
                                                    int IDFrom = from.ID;
                                                    int IDTo = To.ID;
                                                    if (from != null && To != null)
                                                    {
                                                        TempAttendance = TempAttendanceList.Where(o => o.ID >= from.ID && o.ID <= To.ID).OrderBy(o => o.ID).ToList();
                                                    }
                                                    #endregion
                                                }
                                            }
                                            decTimeOutCheck24Hrs = ConvertTimeToDecimal(TimeOut);
                                            decShiftTimeIn = ConvertTimeToDecimal(TimeIn);
                                            if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                            {
                                                flgActualTimeOutOverlap = false;
                                            }
                                            else
                                            {
                                                flgActualTimeOutOverlap = true;
                                            }
                                            if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                            {
                                                #region Calculate Working Hours on The Basis of Multiple Time In And Tiome Out
                                                t3 = TimeCalculate("00:00");

                                                var varTimeIn = TempAttendance.Where(Tin => Tin.In_Out == "1").ToList();
                                                var VarTimeOut = TempAttendance.Where(Tout => Tout.In_Out == "2").ToList();

                                                List<int> processedInOuts = new List<int>();
                                                for (int a = 0; a < TempAttendance.Count; a = a + 2)
                                                {
                                                    try
                                                    {
                                                        string strTIn = "", strTOut = "";
                                                        var InOUTSorted = TempAttendance.Select(o =>
                                                            new
                                                            {
                                                                o.ID,
                                                                o.PunchedDate,
                                                                pTime = int.Parse(o.PunchedTime.Replace(":", "")),
                                                                o.PunchedTime,
                                                                o.In_Out,
                                                            }).OrderBy(o => o.In_Out).ThenBy(o => o.pTime).ToList();

                                                        var firsInRec = InOUTSorted.Where(o => o.In_Out == "1" && !processedInOuts.Contains(o.ID)).FirstOrDefault();
                                                        var firsOut = InOUTSorted.Where(o => o.In_Out == "2" && !processedInOuts.Contains(o.ID)).FirstOrDefault();
                                                        strTIn = (firsInRec == null ? "" : firsInRec.PunchedTime);
                                                        strTOut = (firsOut == null ? "" : firsOut.PunchedTime);
                                                        if (firsInRec != null) processedInOuts.Add(firsInRec.ID);
                                                        if (firsOut != null) processedInOuts.Add(firsOut.ID);
                                                        decimal decPunchTime = ConvertTimeToDecimal(strTIn);
                                                        if (!string.IsNullOrEmpty(strTIn) && !string.IsNullOrEmpty(strTOut))
                                                        {
                                                            if (decPunchTime > decBufferTimeIn)
                                                            {
                                                                string TempWorkingHrs = CalculateWorkHoursMEPL(strTIn, strTOut);
                                                                strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempWorkingHrs);
                                                                TimeSpan t1 = TimeCalculate(TempWorkingHrs);
                                                                TimeSpan t2 = TimeCalculate("00:00");

                                                                t3 = t3 + t1.Add(t2);

                                                                totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                var ActualDuration = TimeSpan.FromMinutes(totalunit);
                                                                int hrs = ActualDuration.Hours;
                                                                int mint = ActualDuration.Minutes;
                                                                wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                            }
                                                            else
                                                            {
                                                                string TempBufferTime = CalculateWorkHoursMEPL(shiftBufferTimeIn, strTOut);
                                                                strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempBufferTime);
                                                                TimeSpan t1 = TimeCalculate(TempBufferTime);
                                                                TimeSpan t2 = TimeCalculate("00:00");
                                                                t3 = t3 + t1.Add(t2);
                                                                totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                var ActualDuration = TimeSpan.FromMinutes(totalunit);
                                                                int hrs = ActualDuration.Hours;
                                                                int mint = ActualDuration.Minutes;
                                                                wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                            }
                                                        }
                                                        strWorkHours = wr;
                                                        ActualWorkingHours = strWorkHours;
                                                        strTotalHours = strWorkHours;
                                                        string strWorkMints = Convert.ToString(totalunit);

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                #endregion
                                            }
                                            #endregion
                                            #endregion
                                        }
                                        else
                                        {
                                            var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                            where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                            && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                            select a).FirstOrDefault();
                                            if (oAttendanceRegisterSaved != null)
                                            {
                                                TimeIn = oAttendanceRegisterSaved.TimeIn;
                                                TimeOut = oAttendanceRegisterSaved.TimeOut;
                                                strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                                strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                                strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                            }

                                        }

                                    }


                                    #endregion
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut))
                                    {
                                        strWorkHours = CalculateWorkHoursStandrad(TimeIn, TimeOut, flgOutOverLap, flgActualTimeOutOverlap);

                                        (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strWorkHours;
                                        ActualWorkingHours = strWorkHours;
                                    }
                                    else
                                    {
                                        ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    }
                                }

                                //Public Holiday Calculation   
                                #region Public Holiday Calculation
                                string EmpCalenderID = oEmp.EmpCalender;
                                string strRemarks = string.Empty;
                                bool IsHoliday = false;
                                if (!string.IsNullOrEmpty(EmpCalenderID))
                                {
                                    SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                    string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                    oRecSet.DoQuery(SQLHolidays);
                                    if (oRecSet.RecordCount > 0)
                                    {
                                        IsHoliday = true;
                                    }
                                }
                                #endregion
                                //Calculate LateIn Minutes
                                #region Calculate LateIn Minutes

                                var oAttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == oEmp.ID).FirstOrDefault();
                                if (!string.IsNullOrEmpty(TimeIn))
                                {
                                    strLateInMinutes = CalculateLateInMinutesStandard(ShiftTimeIn, TimeIn, flgShiftOutOverlap, flgActualTimeInOverlap);
                                    //Buffer Period  Included Here
                                    string BufferInTime = "";
                                    var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                    if (AttendanceRule != null)
                                    {
                                        #region Company Level Grace Time
                                        BufferInTime = AttendanceRule.GpAfterStartTime;
                                        if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            if (IsBufferApplicable(BufferInTime, strLateInMinutes))
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;

                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                        else
                                        {
                                            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Shift Start Grace Time
                                        if (!string.IsNullOrEmpty(StartGraceTime) && StartGraceTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            if (IsBufferApplicable(StartGraceTime, strLateInMinutes))
                                            {
                                                //    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;
                                                //}
                                                //else
                                                //{
                                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                        }
                                        //else
                                        //{
                                        //    (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        //}
                                        #endregion
                                    }

                                }
                                #endregion
                                //Calculate Early Out Minutes
                                #region Calculate Early Out Minutes
                                if (!string.IsNullOrEmpty(TimeOut))
                                {
                                    strEarlyOutMinutes = "";
                                    //string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                    //var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                                    //var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                                    //bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                                    decTimeOut = ConvertTimeToDecimal(TimeOut);
                                    decTimeIn = 0.0M;
                                    if (TimeIn != null)
                                    {
                                        decTimeIn = ConvertTimeToDecimal(TimeIn);
                                    }

                                    if (decTimeIn > decTimeOut && flgShiftOutOverlap == false)
                                    {
                                        //Do Nothing
                                        (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                    }
                                    else
                                    {
                                        //if (OutflgOverlap == true)
                                        //{

                                        decimal decshiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                        decimal decstrTimeOut = ConvertTimeToDecimal(TimeOut);
                                        //if (decstrTimeOut > decshiftTimeOut)
                                        if (false)
                                        {
                                            //    strEarlyOutMinutes = CalculateEarlyOutMinutes(TimeOut,shiftTimeOut);
                                            strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, TimeOut);

                                        }
                                        else
                                        {
                                            strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, TimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                            //strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, TimeOut, OutflgOverlap, flgActualTimeOutOverlap);
                                        }
                                        //}

                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        string BufferOutTime = "";
                                        if (AttendanceRule != null)
                                        {
                                            #region Company Level Grace Time
                                            BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                            if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                                }
                                            }

                                            else
                                            {
                                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Shift End Grace Time
                                            if (!string.IsNullOrEmpty(EndGraceTime) && EndGraceTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(EndGraceTime, strEarlyOutMinutes))
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                                }
                                            }
                                            else
                                            {
                                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                #endregion

                                if (!string.IsNullOrEmpty(ActualWorkingHours))
                                {
                                    string strStatus = "";
                                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                    strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStatus;
                                }
                                #region Spell Total time
                                if (CompanyName.ToLower() == "spell")
                                {
                                    if (TourHrs != "")
                                    {
                                        TimeSpan spanShiftHrs = TimeCalculate(shiftHours);
                                        TimeSpan spanActualHrs = TimeCalculate(ActualWorkingHours);
                                        TimeSpan spanTourHr = TimeCalculate(TourHrs);
                                        TimeSpan spanTotalTime = spanActualHrs.Add(spanTourHr);
                                        strTotalHours = (spanTotalTime.ToString(@"hh\:mm"));
                                        (grdAttendance.Columns.Item("TotalHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = Convert.ToString(strTotalHours);
                                        if (spanActualHrs > spanShiftHrs)
                                        {
                                            strStandardWorkingHrs = shiftHours;
                                            (grdAttendance.Columns.Item("StandHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStandardWorkingHrs;
                                        }
                                        else
                                        {
                                            strStandardWorkingHrs = ActualWorkingHours;
                                            (grdAttendance.Columns.Item("StandHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStandardWorkingHrs;
                                        }
                                    }
                                }
                                #endregion
                                //Calculating OverTime
                                if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == true)
                                {
                                    decimal spanShiftHrs = CalculateStringTime(shiftHours);
                                    decimal spanTotalHrs = CalculateStringTime(strTotalHours);

                                    if (spanTotalHrs > spanShiftHrs)
                                    {
                                        strOverTimeHours = CalculateOverTimeHours(shiftHours, strTotalHours);
                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                        {
                                            strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                                        }
                                        (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                    }
                                    else
                                    {
                                        strOverTimeHours = "";
                                        strOverTimeType = "";
                                        (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                    }
                                }
                                else
                                {
                                    #region Overtime Calculations
                                    Boolean flgPayroll = false;
                                    flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                    if (!string.IsNullOrEmpty(ActualWorkingHours))
                                    {
                                        if (Convert.ToBoolean(oEmp.FlgOTApplicable))
                                        {
                                            flgOverTime = false;
                                            decimal decActualWorkingHours = ConvertTimeToDecimal(ActualWorkingHours);
                                            decimal decShiftHours = ConvertTimeToDecimal(shiftHours);
                                            if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay) || IsHoliday == true)
                                            {

                                                strOverTimeHours = strWorkHours;
                                                if (IsHoliday == true && ShiftDetail.MstShifts.FlgHoliDayOverTime.GetValueOrDefault() == true)
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegister.MstShifts.HoliDayOverTimeMstOverTime.ID
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                                else if (ShiftDetail.MstShifts.FlgOffDayOverTime.GetValueOrDefault() == true)
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                                else if (flgPayroll)
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }

                                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                grdAttendance.FlushToDataSource();
                                            }
                                            else
                                            {


                                                if (decActualWorkingHours > decShiftHours)
                                                {
                                                    shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                                    shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                                    string TempShiftName = ShiftRecord.Description;

                                                    if (oAttendanceRegister.FlgOffDay.GetValueOrDefault() == true)
                                                    {
                                                        flgOverTime = oAttendanceRegister.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegister.MstShifts.FlgOffDayOverTime.Value;
                                                    }
                                                    else
                                                    {
                                                        flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;
                                                    }
                                                    #region OverTime From Shift
                                                    if (!flgPayroll)
                                                    {
                                                        if (!Convert.ToBoolean(ShiftRecord.OverTime.GetValueOrDefault()))
                                                        {
                                                            strOverTimeHours = "";
                                                            strOverTimeType = "";
                                                        }
                                                        else
                                                        {
                                                            bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                            bool flgOtonWorkedHours = ShiftRecord.FlgOTWrkHrs == null ? false : ShiftRecord.FlgOTWrkHrs.Value;
                                                            if (flgOtonWorkedHours)
                                                            {
                                                                if (flgEmployeeOTCheck)
                                                                {

                                                                    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                    {
                                                                        strOverTimeHours = ActualWorkingHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeHours = CalculateOverTimeHours(shiftHours, ActualWorkingHours);
                                                                        //strOverTimeHours = CalculateOverTimeISM(TimeIn, TimeOut, ShiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours, flgShiftOutOverlap, flgActualTimeOutOverlap);
                                                                    }
                                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                                    {
                                                                        //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;

                                                                        if (oAttendanceRegister.FlgOffDay == true)
                                                                        {
                                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                               where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                                               select a.Code).FirstOrDefault() ?? "";
                                                                        }
                                                                        else
                                                                        {
                                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                               where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                               select a.Code).FirstOrDefault() ?? "";
                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeType = "";
                                                                    }
                                                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                                    grdAttendance.FlushToDataSource();
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeHours = "";
                                                                    strOverTimeType = "-1";
                                                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                                    grdAttendance.FlushToDataSource();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (flgEmployeeOTCheck)
                                                                {

                                                                    if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                                    {
                                                                        shiftBufferTimeIn = ShiftTimeIn;
                                                                    }
                                                                    if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                                    {
                                                                        shiftBufferTimeOut = shiftTimeOut;
                                                                    }

                                                                    strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, TimeIn);
                                                                    if (strInOverTime != "00:00")
                                                                    {
                                                                        //CalculateIN Overtime AccordingToShift
                                                                        strInOverTime = CalculateInOvertimeApplicableSSL(ShiftTimeIn, TimeIn);
                                                                    }
                                                                    //

                                                                    decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);
                                                                    //if (decTimeOut > decshiftBufferTimeOut)
                                                                    if (decTimeOut <= Time24Hours && decShiftTimeIn > decTimeOut)
                                                                    {
                                                                        strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftBufferTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                                                    }
                                                                    else if (decTimeOut > decshiftBufferTimeOut)
                                                                    {
                                                                        strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftBufferTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                                                    }
                                                                    if (strOutOverTime != "00:00")
                                                                    {
                                                                        if (flgActualTimeOutOverlap == true)
                                                                        {
                                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap);
                                                                        }
                                                                        else
                                                                        {
                                                                            strOutOverTime = CalculateOutOvertimeApplicableSSL(TimeOut, shiftTimeOut, flgShiftOutOverlap);
                                                                        }
                                                                    }
                                                                    if (decTimeIn > decShiftTimeIn)
                                                                    {
                                                                        //strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(TimeIn, strOutOverTime);
                                                                        strOverTimeHours = CalculateOverTimeHours(shiftHours, ActualWorkingHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);
                                                                    }

                                                                    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                    {
                                                                        strOverTimeHours = ActualWorkingHours;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeHours = "";
                                                                }
                                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                                {
                                                                    if (oAttendanceRegister.FlgOffDay == true)
                                                                    {
                                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                           where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                                           select a.Code).FirstOrDefault() ?? "";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                           where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                           select a.Code).FirstOrDefault() ?? "";
                                                                    }
                                                                }
                                                                (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                                (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                                grdAttendance.FlushToDataSource();
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #region OverTime from Payroll
                                                    else if (flgPayroll)
                                                    {
                                                        if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                        {
                                                            shiftBufferTimeIn = ShiftTimeIn;
                                                        }
                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                        {
                                                            shiftBufferTimeOut = shiftTimeOut;
                                                        }
                                                        strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, TimeIn);
                                                        if (strInOverTime != "00:00")
                                                        {
                                                            //CalculateIN Overtime AccordingToShift
                                                            strInOverTime = CalculateInOvertimeApplicableSSL(ShiftTimeIn, TimeIn);
                                                        }
                                                        //strOutOverTime = IFOutOvertimeApplicableSSL(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                        strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                        //IFOutOvertimeApplicableStandrad
                                                        if (strOutOverTime != "00:00")
                                                        {
                                                            //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                            strOutOverTime = CalculateOutOvertimeApplicableSSL(TimeOut, shiftTimeOut, flgOutOverLap);
                                                        }
                                                        if (decTimeIn > decShiftTimeIn)
                                                        {
                                                            strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                        }
                                                        //OverTime on Weekend
                                                        if (shiftHours == "00:00")
                                                        {
                                                            strOverTimeHours = strWorkHours;
                                                        }
                                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                        {
                                                            //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                         (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                        grdAttendance.FlushToDataSource();
                                                    }
                                                    #endregion
                                                    else
                                                    {
                                                        (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                                        (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                                        grdAttendance.FlushToDataSource();
                                                    }
                                                }



                                            }
                                        }
                                        else
                                        {
                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                            grdAttendance.FlushToDataSource();
                                        }

                                    }

                                    #endregion

                                    if (CompanyName == "spell")
                                    {
                                        #region OverTime If Working Hour Greater than shift Hours
                                        strTotalHours = (grdAttendance.Columns.Item("TotalHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                        if (!string.IsNullOrEmpty(strTotalHours))
                                        {
                                            flgOverTime = false;
                                            decimal decActualWorkingHours = ConvertTimeToDecimal(strTotalHours);
                                            decimal decShiftHours = ConvertTimeToDecimal(shiftHours);
                                            if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay) || IsHoliday == true)
                                            {
                                                strOverTimeHours = strWorkHours;
                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                   where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                   select a.Code).FirstOrDefault() ?? "";
                                                (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                            }
                                            else
                                            {


                                                if (decActualWorkingHours > decShiftHours)
                                                {
                                                    shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                                    shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                                    string TempShiftName = ShiftRecord.Description;

                                                    if (oAttendanceRegister.FlgOffDay == true)
                                                    {
                                                        flgOverTime = oAttendanceRegister.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegister.MstShifts.FlgOffDayOverTime.Value;
                                                    }
                                                    else
                                                    {
                                                        flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;
                                                    }
                                                    if (!Convert.ToBoolean(ShiftRecord.OverTime.Value))
                                                    {
                                                        strOverTimeHours = "";
                                                        strOverTimeType = "";
                                                    }
                                                    else
                                                    {
                                                        bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                        bool flgOtonWorkedHours = ShiftRecord.FlgOTWrkHrs == null ? false : ShiftRecord.FlgOTWrkHrs.Value;
                                                        if (flgOtonWorkedHours)
                                                        {
                                                            if (flgEmployeeOTCheck)
                                                            {

                                                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                {
                                                                    strOverTimeHours = ActualWorkingHours;
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeHours = CalculateOverTimeHours(shiftHours, ActualWorkingHours);
                                                                }
                                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                                {
                                                                    if (oAttendanceRegister.FlgOffDay == true)
                                                                    {
                                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                           where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                                           select a.Code).FirstOrDefault() ?? "";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                           where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                           select a.Code).FirstOrDefault() ?? "";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    strOverTimeType = "";
                                                                }
                                                                (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                                (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = "";
                                                                strOverTimeType = "-1";
                                                                (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                                (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (flgEmployeeOTCheck)
                                                            {
                                                                if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                                {
                                                                    shiftBufferTimeIn = ShiftTimeIn;
                                                                }
                                                                if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                                {
                                                                    shiftBufferTimeOut = shiftTimeOut;
                                                                }

                                                                strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, TimeIn);
                                                                if (strInOverTime != "00:00")
                                                                {
                                                                    strInOverTime = CalculateInOvertimeApplicableSSL(ShiftTimeIn, TimeIn);
                                                                }

                                                                decTimeOut = ConvertTimeToDecimal(TimeOut);
                                                                decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);

                                                                if (decTimeOut <= Time24Hours && decShiftTimeIn > decTimeOut)
                                                                {
                                                                    strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftBufferTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                                                }
                                                                else if (decTimeOut > decshiftBufferTimeOut)
                                                                {
                                                                    strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftBufferTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                                                                }
                                                                if (strOutOverTime != "00:00")
                                                                {
                                                                    if (flgActualTimeOutOverlap == true)
                                                                    {
                                                                        strOutOverTime = IFOutOvertimeApplicableStandrad(TimeOut, shiftTimeOut, flgShiftOutOverlap, flgActualTimeOutOverlap);
                                                                    }
                                                                    else
                                                                    {
                                                                        strOutOverTime = CalculateOutOvertimeApplicableSSL(TimeOut, shiftTimeOut, flgShiftOutOverlap);
                                                                    }
                                                                }
                                                                strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);

                                                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                {
                                                                    strOverTimeHours = ActualWorkingHours;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = "";
                                                            }
                                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                            {
                                                                if (oAttendanceRegister.FlgOffDay == true)
                                                                {
                                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                       where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                                       select a.Code).FirstOrDefault() ?? "";
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                       where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                       select a.Code).FirstOrDefault() ?? "";
                                                                }
                                                            }
                                                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                                                    (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select("");
                                                }
                                            }

                                        }

                                        #endregion
                                    }
                                }
                                //Calculate Leaves in diffrent Scenerio
                                #region Full Leave Cases

                                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && shiftHours != "00:00")
                                {
                                    //flgNoLeaveCondition = false;
                                    decimal LeaveCount = 0.0M;
                                    string TempLeaveHours = "", strDeductionRule = "";
                                    string strLeaveHours = "", strDesc = "";
                                    string strLeaveType = "";
                                    string strLeaveTypeCode = "";
                                    int intLeaveType;
                                    bool isNewLeave = false;
                                    var PostedLeaves = (from a in dbHrPayroll.TrnsLeavesRequest
                                                        where a.MstEmployee.EmpID == oEmp.EmpID
                                                        && a.LeaveFrom <= x && a.LeaveTo >= x
                                                        select a).FirstOrDefault();
                                    if (PostedLeaves != null && PostedLeaves.UnitsID == "Day")
                                    {
                                        strLeaveHours = shiftHours;
                                        LeaveCount = 1.0M;
                                        strLeaveType = PostedLeaves.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == PostedLeaves.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = PostedLeaves.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else if (PostedLeaves != null && PostedLeaves.UnitsID == "HalfDay")
                                    {
                                        strLeaveHours = shiftHours;
                                        LeaveCount = 0.5M;
                                        strLeaveType = PostedLeaves.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == PostedLeaves.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = PostedLeaves.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else
                                    {
                                        var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                        where a.Code == "DR_03"
                                                        select a).FirstOrDefault();

                                        if (oDedRule != null)
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = oLeaveMaster.Description;
                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                intLeaveType = oLeaveMaster.ID;
                                                isNewLeave = true;
                                                strDeductionRule = oDedRule.Code;
                                                strDesc = "";
                                            }
                                            else
                                            {
                                                MsgError("Leave Type not selected in deduction rule 3.");
                                                return;
                                            }
                                        }
                                    }
                                    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                                    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.0000}", LeaveCount);
                                    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                    (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                    (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                }
                                #endregion

                                #region Work Hour Differs Shift Hours
                                if (!string.IsNullOrEmpty(strWorkHours) && shiftHours != "00:00")
                                {
                                    if (!Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    {
                                        string TempLeaveHours = "", strTempWorkHours = "";

                                        string strLeaveHours = "", strLeaveType = "", strLeaveTypeCode = "", strDeductionRule = "", strDesc = "";
                                        decimal LeaveCount = 0;
                                        bool flgLeaveIsNew = false;
                                        int intLeaveType = 0;

                                        strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                                        strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;

                                        TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, ActualWorkingHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);

                                        if ((!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00") || TempLeaveHours == "00:00")
                                        {
                                            var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                            if (oDedRule != null)
                                            {
                                                if (oDedRule.Code == "DR_02")
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                        LeaveCount = 0.5M;
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }
                                                else if (oDedRule.Code == "DR_01")
                                                {
                                                    if (oDedRule.Deduction.GetValueOrDefault() == true)
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;
                                                            LeaveCount = GetLeaveCountOnMinLeaves(strLeaveHours, shiftHours);
                                                            if (LeaveCount != 0)
                                                            {
                                                                strLeaveType = oLeaveMaster.Description;
                                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                                intLeaveType = oLeaveMaster.ID;
                                                                //LeaveCount = LeaveCount;
                                                                flgLeaveIsNew = true;
                                                                strDeductionRule = oDedRule.Code;
                                                                strDesc = "";
                                                            }
                                                            else
                                                            {
                                                                //strLeaveType = oLeaveMaster.Description;
                                                                //strLeaveTypeCode = oLeaveMaster.Code;
                                                                //intLeaveType = oLeaveMaster.ID;
                                                                //flgLeaveIsNew = true;
                                                                //strDeductionRule = oDedRule.Code;
                                                                //strDesc = "";
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strLeaveHours = TempLeaveHours;
                                                        LeaveCount = 0;
                                                        strLeaveType = "";
                                                        strLeaveTypeCode = "";
                                                        intLeaveType = 0;
                                                        flgLeaveIsNew = false;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }
                                                else if (oDedRule.Code == "DR_03")
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = TempLeaveHours;
                                                        LeaveCount = 1;
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }

                                                (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                                //if (CompanyName.ToLower() != "pakola")
                                                //{
                                                (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                                (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.0000}", LeaveCount);
                                                (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                                //}
                                                (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                                                (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                                (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                            }
                                        }
                                        else
                                        {
                                            flgLeaveIsNew = false;
                                            TempLeaveHours = "";
                                            LeaveCount = 0;
                                            strLeaveType = "";
                                            strDesc = "";
                                            strDeductionRule = "";
                                            (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                            (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                            (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                            (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                            (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                            (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                        }
                                    }
                                    grdAttendance.FlushToDataSource();
                                }
                                #endregion

                                #region Time In,Out Missing.
                                if (((string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut)) ||
                                        (!string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut)))
                                    && (Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                                    && !(Convert.ToBoolean(oAttendanceRegister.FlgOffDay)))
                                {
                                    //flgNoLeaveCondition = false;
                                    var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                    string TempLeaveHours = "";
                                    string strLeaveHours = "", strLeaveType = "", strLeaveTypeCode = "", strDeductionRule = "", strDesc = "";
                                    decimal LeaveCount = 0;
                                    bool flgLeaveIsNew = false;
                                    int intLeaveType = 0;
                                    if (oAttRule != null)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                        if (oLeaveMaster != null)
                                        {
                                            strLeaveHours = shiftHours;
                                            LeaveCount = 1.0M;
                                            strLeaveType = oLeaveMaster.Description;
                                            strLeaveTypeCode = oLeaveMaster.Code;
                                            intLeaveType = oLeaveMaster.ID;
                                            flgLeaveIsNew = true;
                                            strDeductionRule = "DR_03";
                                        }
                                        (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                                        (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                                        (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                                        (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                                        (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                                        (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                                    }
                                }
                                #endregion

                                #region When No Leave Condition Hit

                                //if (flgNoLeaveCondition)
                                //{
                                //    (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                //    (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                //    (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                //    (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", 0);
                                //}
                                #endregion

                                #region Company wise Logics
                                //if (CompanyName.ToLower() == "pakola"
                                //    || CompanyName.ToLower() == "phimc")
                                if (Program.systemInfo.FlgLateInEarlyOutLeaveRules == true)
                                {
                                    CalculatingLateInOrEarlyOut();
                                }
                                else if (CompanyName.ToLower() == "ssl"
                                    )
                                {
                                    ApplyDeductionsSSL();
                                }

                                if (oAttendanceRule != null)
                                {
                                    if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                                    {
                                        SandWichLeave();
                                    }
                                }
                                if (CompanyName.ToLower() == "ism")
                                {
                                    SandwichLeaveGridTwoLine(pVal.Row);
                                }
                                #endregion

                            }
                            grdAttendance.LoadFromDataSource();

                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger(ex);
                        //BubbleEvent = false;
                    }

                }
                #endregion

                #region Standard Feature Original
                //else
                //{
                //    try
                //    {
                //        if (pVal.ColUID == "TmIn" || pVal.ColUID == "TmOut")
                //        {

                //            string DedcutionOnshift = "";
                //            decimal LeaveCount = 0.0M;
                //            string TempLeaveHours = "";
                //            string strLeaveHours = "";
                //            string strLeaveType = "";
                //            string strLeaveTypeCode = "";
                //            int intLeaveType;
                //            bool isNewLeave = false;
                //            string strDeductionCode = "";
                //            string strDesc = "";
                //            string[] StartDate = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                //            string[] EndDate = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value.Split(':');
                //            string dtTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, pVal.Row - 1));
                //            string dtTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, pVal.Row - 1));
                //            string grdTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //            string grdTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //            string PreTimeIn = "", PreTimeOut = "";
                //            Boolean flgModified = false;
                //            if (dtTimeIn != grdTimeIn)
                //            {
                //                PreTimeIn = dtTimeIn;
                //                flgModified = true;
                //            }
                //            if (dtTimeOut != grdTimeOut)
                //            {
                //                PreTimeOut = dtTimeOut;
                //                flgModified = true;
                //            }
                //            (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeIn;
                //            (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = PreTimeOut;
                //            (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgModified;
                //            if (StartDate.Length != 2 || EndDate.Length != 2)
                //            {
                //                #region Absent if Time in and Time Out Missing
                //                if (string.IsNullOrEmpty(grdTimeIn) && string.IsNullOrEmpty(grdTimeOut))
                //                {
                //                    (grdAttendance.Columns.Item(clsWHrs.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "";
                //                    #region Leave Working
                //                    DateTime shiftDateX = DateTime.MinValue;
                //                    string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                    shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //                    DateTime x = Convert.ToDateTime(shiftDateX);
                //                    string shiftHoursLeave = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value; string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                    string strEMPIDLeave = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                    if (string.IsNullOrEmpty(grdTimeIn) && string.IsNullOrEmpty(grdTimeOut) && !string.IsNullOrEmpty(shiftHoursLeave) && shiftHoursLeave != "00:00")
                //                    {
                //                        var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPIDLeave).FirstOrDefault();

                //                        var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                //                        if (Data != null && Data.UnitsID == "Day")
                //                        {
                //                            strLeaveHours = shiftHoursLeave;
                //                            LeaveCount = 1.0M;
                //                            strLeaveType = Data.LeaveDescription;
                //                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                //                            intLeaveType = Data.LeaveType.Value;
                //                            isNewLeave = false;
                //                            strDeductionCode = "DR_03";
                //                        }
                //                        else if (Data != null && Data.UnitsID == "HalfDay")
                //                        {
                //                            TempLeaveHours = CalculateHalfShiftHours(shiftHoursLeave);
                //                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                //                            DataTable dt = ds.getDataTable(SQL);
                //                            if (dt != null && dt.Rows.Count > 0)
                //                            {
                //                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                //                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                //                                if (leaveType > 0)
                //                                {
                //                                    intLeaveType = leaveType;
                //                                    strLeaveHours = TempLeaveHours;
                //                                    if (LeaveValue == "DR_02")
                //                                    {
                //                                        LeaveCount = 0.5M;
                //                                    }
                //                                    else
                //                                    {
                //                                        LeaveCount = 1.0M;
                //                                    }
                //                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                //                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                //                                    isNewLeave = true;
                //                                    strDeductionCode = "DR_02";
                //                                }
                //                            }
                //                        }
                //                        else
                //                        {
                //                            TempLeaveHours = shiftHoursLeave;
                //                            LeaveCount = 0.0M;
                //                            string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                //                            DataTable dt = ds.getDataTable(SQL);
                //                            if (dt != null && dt.Rows.Count > 0)
                //                            {
                //                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                //                                string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                //                                if (leaveType > 0)
                //                                {
                //                                    intLeaveType = leaveType;
                //                                    strLeaveHours = TempLeaveHours;
                //                                    if (LeaveValue == "DR_02")
                //                                    {
                //                                        LeaveCount = 0.5M;
                //                                    }
                //                                    else
                //                                    {
                //                                        LeaveCount = 1.0M;
                //                                    }
                //                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                //                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                //                                    isNewLeave = true;
                //                                    strDeductionCode = LeaveValue;
                //                                }
                //                            }
                //                            else
                //                            {
                //                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                //                                oForm.Freeze(false);
                //                                return;

                //                            }
                //                        }
                //                        (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = isNewLeave;
                //                        (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                //                        (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                //                        (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                //                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionCode;
                //                    }
                //                    #endregion
                //                }
                //                #endregion
                //            }
                //            else
                //            {
                //                int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                //                if (DurinMin < 0)
                //                    DurinMin += 1440;
                //                int HrsDur = DurinMin / 60;
                //                int MinDur = DurinMin % 60;
                //                (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                //                string TimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string ShiftTimeIn = (grdAttendance.Columns.Item("SfStart").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string TimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;


                //                string shiftTimeOut = (grdAttendance.Columns.Item("SfEnd").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string shiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string ActualWorkingHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                string strEMPID = (grdAttendance.Columns.Item("EmpCode").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                DateTime shiftDateX = DateTime.MinValue;
                //                string shftDate = (grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                shiftDateX = DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //                DateTime x = Convert.ToDateTime(shiftDateX);
                //                //Calculate LateIn Minutes
                //                var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                //                var oAttendanceRules = dbHrPayroll.MstAttendanceRule.FirstOrDefault();
                //                if (!string.IsNullOrEmpty(TimeIn))
                //                {
                //                    string strLateInMinutes = CalculateLateInMinutes(ShiftTimeIn, TimeIn);
                //                    //Buffer Period  Included Here
                //                    var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                //                    if (AttendanceRule != null)
                //                    {
                //                        string BufferInTime = AttendanceRule.GpAfterStartTime;
                //                        if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                //                        {
                //                            if (IsBufferApplicable(BufferInTime, strLateInMinutes))
                //                            {
                //                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strLateInMinutes;
                //                            }
                //                            else
                //                            {
                //                                (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                //                        }
                //                    }
                //                }
                //                //Calculate Early Out Minutes
                //                #region Calculate Early Out Minutes
                //                if (!string.IsNullOrEmpty(TimeOut))
                //                {
                //                    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                //                    //var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                //                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();
                //                    bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;

                //                    decimal decTimeOut = ConvertTimeToDecimal(TimeOut);
                //                    decimal decTimeIn = 0.0M;
                //                    if (TimeIn != null)
                //                    {
                //                        decTimeIn = ConvertTimeToDecimal(TimeIn);
                //                    }

                //                    if (decTimeIn > decTimeOut && OutflgOverlap == false)
                //                    {
                //                        //Do Nothing
                //                        (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                //                    }
                //                    else
                //                    {
                //                        string strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, TimeOut);
                //                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                //                        if (AttendanceRule != null)
                //                        {
                //                            string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                //                            if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                //                            {
                //                                if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                //                                {
                //                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                //                                }
                //                                else
                //                                {
                //                                    (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strEarlyOutMinutes;
                //                                }
                //                            }
                //                            else
                //                            {
                //                                (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = "00:00";
                //                            }
                //                        }
                //                    }
                //                }
                //                #endregion

                //                if (!string.IsNullOrEmpty(ActualWorkingHours))
                //                {
                //                    string strStatus = "";
                //                    string strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                    string strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                //                    strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                //                    (grdAttendance.Columns.Item("clStatus").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strStatus;
                //                }
                //                //Calculating OverTime
                //                #region Calculating OverTime
                //                if (!string.IsNullOrEmpty(ActualWorkingHours))
                //                {
                //                    string dayofWeeks = Convert.ToString(x.DayOfWeek);
                //                    //var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                //                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == ShiftRecord.Id).FirstOrDefault();

                //                    string strInOverTime = "00:00";
                //                    string strOutOverTime = "00:00";
                //                    string strOverTimeHours = "00:00";
                //                    string strOverTimeType = "";
                //                    string shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                //                    string shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                //                    bool OutflgOverlap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                //                    if (!Convert.ToBoolean(ShiftRecord.OverTime == null ? false : ShiftRecord.OverTime.Value))
                //                    {
                //                        strOverTimeHours = "";
                //                        strOverTimeType = "";
                //                    }
                //                    else
                //                    {
                //                        bool flgOtonWorkedHours = ShiftRecord.FlgOTWrkHrs == null ? false : ShiftRecord.FlgOTWrkHrs.Value;
                //                        if (flgOtonWorkedHours)
                //                        {
                //                            strOverTimeHours = CalculateOverTimeHours(shiftHours, ActualWorkingHours);
                //                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                //                            {
                //                                strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                //                            }
                //                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                //                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                //                        }
                //                        else
                //                        {
                //                            if (string.IsNullOrEmpty(shiftBefferTimeIn))
                //                            {
                //                                shiftBefferTimeIn = ShiftTimeIn;
                //                            }
                //                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                //                            {
                //                                shiftBufferTimeOut = shiftTimeOut;
                //                            }
                //                            strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, TimeIn);
                //                            if (strInOverTime != "00:00")
                //                            {
                //                                //CalculateIN Overtime AccordingToShift
                //                                strInOverTime = CalculateInOvertimeApplicable(ShiftTimeIn, TimeIn);
                //                            }
                //                            strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut, OutflgOverlap); //strOutOverTime = IFOutOvertimeApplicable(TimeOut, shiftBufferTimeOut);
                //                            if (strOutOverTime != "00:00")
                //                            {
                //                                //strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut);
                //                                strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut, OutflgOverlap);
                //                            }
                //                            strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                //                            //OverTime on Weekend
                //                            if (shiftHours == "00:00")
                //                            {
                //                                strOverTimeHours = ActualWorkingHours;
                //                            }
                //                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                //                            {
                //                                strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftRecord.OverTimeID.Value).FirstOrDefault().Code;
                //                            }
                //                            (grdAttendance.Columns.Item("OTH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strOverTimeHours;
                //                            (grdAttendance.Columns.Item("OTT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strOverTimeType);
                //                        }
                //                    }
                //                }
                //                #endregion
                //                //Calculate Leaves in diffrent Scenerio
                //                #region Calculate Leaves in diffrent Scenerio
                //                if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                //                {
                //                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();
                //                    //decimal LeaveCount = 0.0M;
                //                    //string TempLeaveHours = "", strDesc = "";
                //                    //string strLeaveHours = "";
                //                    //string strLeaveType = "";
                //                    //string strLeaveTypeCode = "";
                //                    //int intLeaveType;
                //                    //bool isNewLeave = false;
                //                    var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == EmpRecord.ID).FirstOrDefault();
                //                    if (Data != null && Data.UnitsID == "Day")
                //                    {
                //                        strLeaveHours = shiftHours;
                //                        LeaveCount = 1.0M;
                //                        strLeaveType = Data.LeaveDescription;
                //                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                //                        intLeaveType = Data.LeaveType.Value;
                //                        isNewLeave = false;
                //                    }
                //                    else if (Data != null && Data.UnitsID == "HalfDay")
                //                    {
                //                        TempLeaveHours = CalculateHalfShiftHours(shiftHours);

                //                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgTimeBaseDeductionRules ?? false) != false)
                //                        {

                //                            CalculatingLateInEarlyOut();
                //                        }
                //                        else
                //                        {
                //                            #region Deduction Rules Employee And Company wise
                //                            var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                //                            if (oDedRule != null)
                //                            {
                //                                //if (oDedRule.Code == "DR_02")
                //                                //{
                //                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                //                                {
                //                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                //                                                        where a.ID == oDedRule.LeaveType
                //                                                        select a).FirstOrDefault();
                //                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                //                                    LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                //                                    strLeaveType = oLeaveMaster.Description;
                //                                    strLeaveTypeCode = oLeaveMaster.Code;
                //                                    intLeaveType = oLeaveMaster.ID;
                //                                    flgLeaveIsNew = true;
                //                                    strDeductionRule = oDedRule.Code;

                //                                }
                //                                //}
                //                                //else if (oDedRule.Code == "DR_01")
                //                                //{
                //                                //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                //                                //    {
                //                                //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                //                                //                            where a.ID == oDedRule.LeaveType
                //                                //                            select a).FirstOrDefault();
                //                                //        strLeaveHours = TempLeaveHours;
                //                                //        LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                //                                //        if (LeaveCount != 0)
                //                                //        {
                //                                //            strLeaveType = oLeaveMaster.Description;
                //                                //            strLeaveTypeCode = oLeaveMaster.Code;
                //                                //            intLeaveType = oLeaveMaster.ID;
                //                                //            flgLeaveIsNew = true;
                //                                //            strDeductionRule = oDedRule.Code;
                //                                //            strDesc = "";
                //                                //        }
                //                                //    }
                //                                //    else
                //                                //    {
                //                                //        strLeaveHours = TempLeaveHours;
                //                                //        LeaveCount = 0;
                //                                //        strLeaveType = "";
                //                                //        strLeaveTypeCode = "";
                //                                //        intLeaveType = 0;
                //                                //        flgLeaveIsNew = false;
                //                                //        strDeductionRule = oDedRule.Code;
                //                                //        strDesc = "";
                //                                //    }
                //                                //}
                //                                //else if (oDedRule.Code == "DR_03")
                //                                //{
                //                                //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                //                                //    {
                //                                //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                //                                //                            where a.ID == oDedRule.LeaveType
                //                                //                            select a).FirstOrDefault();
                //                                //        strLeaveHours = TempLeaveHours;
                //                                //        LeaveCount = 1;
                //                                //        strLeaveType = oLeaveMaster.Description;
                //                                //        strLeaveTypeCode = oLeaveMaster.Code;
                //                                //        intLeaveType = oLeaveMaster.ID;
                //                                //        flgLeaveIsNew = true;
                //                                //        strDeductionRule = oDedRule.Code;
                //                                //        strDesc = "";
                //                                //    }
                //                                //}
                //                            }
                //                            #endregion
                //                        }

                //                    }
                //                    //(grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                //                    //(grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                //                    //(grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                //                    //(grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                //                    //(grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                //                    //(grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                //                }
                //                #endregion
                //                //Calculate in Other Scenerio
                //                #region Calculate in Other Scenerio
                //                if (!string.IsNullOrEmpty(ActualWorkingHours))
                //                {
                //                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEMPID).FirstOrDefault();

                //                    TempLeaveHours = CalculateLeaveHours(shiftHours, ActualWorkingHours);
                //                    if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                //                    {

                //                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgTimeBaseDeductionRules ?? false) != false)
                //                        {
                //                            CalculatingLateInEarlyOut();
                //                        }
                //                        else
                //                        {
                //                            #region Deduction Rules Employee And Company wise

                //                            var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                //                            if (oDedRule != null)
                //                            {
                //                                if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                //                                {
                //                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                //                                                        where a.ID == oDedRule.LeaveType
                //                                                        select a).FirstOrDefault();
                //                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                //                                    LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                //                                    strLeaveType = oLeaveMaster.Description;
                //                                    strLeaveTypeCode = oLeaveMaster.Code;
                //                                    intLeaveType = oLeaveMaster.ID;
                //                                    flgLeaveIsNew = true;
                //                                    strDeductionRule = oDedRule.Code;
                //                                    strDesc = "";
                //                                }
                //                                (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                //                                (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                //                                (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                //                                (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                //                                (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                //                                (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                //                            }
                //                            #endregion
                //                        }

                //                    }
                //                    else
                //                    {
                //                        flgLeaveIsNew = false;
                //                        TempLeaveHours = "";
                //                        LeaveCount = 0.00M;
                //                        strLeaveType = "";
                //                        strDesc = "";
                //                        strDeductionRule = "";
                //                        (grdAttendance.Columns.Item("IsNewL").Cells.Item(pVal.Row).Specific as SAPbouiCOM.CheckBox).Checked = flgLeaveIsNew;
                //                        (grdAttendance.Columns.Item("LH").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = TempLeaveHours;
                //                        (grdAttendance.Columns.Item("lCnt").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", LeaveCount);
                //                        (grdAttendance.Columns.Item("LT").Cells.Item(pVal.Row).Specific as SAPbouiCOM.ComboBox).Select(strLeaveType);
                //                        (grdAttendance.Columns.Item("clDesc").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDesc;
                //                        (grdAttendance.Columns.Item("clDedRule").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value = strDeductionRule;
                //                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgTimeBaseDeductionRules ?? false) != false)
                //                        {
                //                            CalculatingLateInEarlyOut();
                //                        }
                //                    }
                //                }
                //                #endregion
                //            }
                //        }
                //    }
                //    catch (Exception ex)
                //    {
                //        oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                //        BubbleEvent = false;
                //    }

                //}
                #endregion


            }
            catch (Exception ex)
            {
                //oForm.Freeze(false);
                logger(ex);
            }
            oForm.Freeze(false);
        }

        public override void etBeforeValidate(ref SAPbouiCOM.ItemEvent pVal, ref bool BubbleEvent)
        {
            try
            {
                BubbleEvent = true;
                Validate = false;
                switch (pVal.ColUID)
                {
                    case "TimeIn":
                    case "TimeOut":
                        {
                            string Value = (grdAttendance.Columns.Item(pVal.ColUID).Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                            for (int i = 0; i < Value.Length; i++)
                            {
                                switch (i)
                                {
                                    case 0:
                                        if ((char)Value[0] >= '0' && (char)Value[0] <= '2') Validate = true;
                                        else Validate = false;
                                        break;
                                    case 1:
                                        if ((char)Value[0] != '2')
                                        {
                                            if ((char)Value[1] >= '0' && (char)Value[1] <= '9') Validate = true;
                                            else Validate = false;
                                        }
                                        else
                                        {
                                            if ((char)Value[1] >= '0' && (char)Value[1] <= '3') Validate = true;
                                            else Validate = false;
                                        }
                                        break;
                                    case 2:
                                        if ((char)Value[2] == ':') Validate = true;
                                        else Validate = false;
                                        break;
                                    case 3:
                                        if ((char)Value[3] >= '0' && (char)Value[3] <= '5') Validate = true;
                                        else Validate = false;
                                        break;

                                    case 4:
                                        if ((char)Value[4] >= '0' && (char)Value[4] <= '9') Validate = true;
                                        else Validate = false;
                                        break;

                                }
                                if (Validate == false || Value.Length != 5)
                                {
                                    oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("Err_InvalidFormat"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    BubbleEvent = false;
                                    oForm.Freeze(false);
                                    return;
                                }
                            }
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                BubbleEvent = false;
            }
        }

        public override void etFormAfterActivate(ref SAPbouiCOM.ItemEvent pVal, ref bool BubbleEvent)
        {
            base.etFormAfterActivate(ref pVal, ref BubbleEvent);
            if (flgEmpTo && !flgEmpFrom)
            {
                txtEmpTo.Value = Program.EmpID;
                flgEmpFrom = false;
                flgEmpTo = false;
            }
            if (!flgEmpTo && flgEmpFrom)
            {
                txtEmpFrom.Value = Program.EmpID;
                flgEmpFrom = false;
                flgEmpTo = false;
            }
        }

        public override void etAfterCmbSelect(ref SAPbouiCOM.ItemEvent pVal, ref bool BubbleEvent)
        {
            try
            {
                base.etAfterCmbSelect(ref pVal, ref BubbleEvent);
                switch (pVal.ItemUID)
                {
                    case "cbpayroll":
                        //FillPeriodInCombo();
                        FillPeriod(cmbPayroll.Value.Trim());
                        break;
                    case "cbperiod":
                        setDateFromSelectedPeriod();
                        break;
                }
            }
            catch (Exception ex)
            {
            }
        }

        #endregion

        #region "Local Methods"

        private string CalculateWorkHours(string startTime, string endTime)
        {
            string strWorkHours = "";
            try
            {
                if (!string.IsNullOrEmpty(startTime) && !string.IsNullOrEmpty(endTime))
                {
                    string[] StartDate = startTime.Split(':');
                    string[] EndDate = endTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {

                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                            DurinMin += 1440;
                        int HrsDur = DurinMin / 60;
                        int MinDur = DurinMin % 60;
                        strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                return strWorkHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateWorkHoursStandrad(string StartTime, string EndTime, bool flgOutOverlap, bool flgActualOutOverlap)
        {
            string strWorkHours = "";
            try
            {
                if (!string.IsNullOrEmpty(StartTime) && !string.IsNullOrEmpty(EndTime))
                {
                    string[] arrTimeIn = StartTime.Split(':');
                    string[] arrTimeOut = EndTime.Split(':');

                    if (arrTimeIn.Length != 2 || arrTimeOut.Length != 2)
                    {
                        return "00:00";
                    }
                    else
                    {
                        int TimeInMinutes = (int.Parse(arrTimeIn[0]) * 60) + int.Parse(arrTimeIn[1]);
                        int TimeOutMinutes = 0;
                        if (flgOutOverlap && flgActualOutOverlap)
                        {
                            //TimeOutMinutes = ((int.Parse(arrTimeOut[0]) * 60) + 24) + int.Parse(arrTimeOut[1]);
                            TimeOutMinutes = ((int.Parse(arrTimeOut[0]) + 24) * 60) + int.Parse(arrTimeOut[1]);
                        }
                        else if (flgOutOverlap && !flgActualOutOverlap)
                        {
                            TimeOutMinutes = (int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1]);
                        }
                        else
                        {
                            TimeOutMinutes = (int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1]);
                        }
                        int DurinMin = 0;
                        if (TimeInMinutes < TimeOutMinutes)
                        {
                            //DurinMin = ((int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1])) - ((int.Parse(shiftStartDate[0]) * 60) + int.Parse(shiftStartDate[1]));
                            DurinMin = TimeOutMinutes - TimeInMinutes;
                        }

                        else if (TimeInMinutes >= TimeOutMinutes)
                        {
                            //DurinMin = ((int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1])) - ((int.Parse(arrTimeIn[0]) * 60) + int.Parse(arrTimeIn[1]));
                            DurinMin = TimeOutMinutes - TimeInMinutes;
                        }
                        if (DurinMin < 0)
                            DurinMin += 1440;
                        int HrsDur = DurinMin / 60;
                        int MinDur = DurinMin % 60;
                        strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                return strWorkHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateWorkHours(string startTime, string endTime, string shiftin, string shiftout)
        {
            string strWorkHours = "";
            try
            {
                if (!string.IsNullOrEmpty(startTime) && !string.IsNullOrEmpty(endTime) && !string.IsNullOrEmpty(shiftin) && !string.IsNullOrEmpty(shiftout))
                {
                    string[] StartDate = startTime.Split(':');
                    string[] EndDate = endTime.Split(':');
                    string[] shiftStartDate = shiftin.Split(':');
                    string[] shiftEndDate = shiftout.Split(':');

                    if (StartDate.Length != 2 || EndDate.Length != 2 || shiftStartDate.Length != 2 || shiftEndDate.Length != 2)
                    {
                        return "00:00";
                    }
                    else
                    {
                        int shiftinMinutes = (int.Parse(shiftStartDate[0]) * 60) + int.Parse(shiftStartDate[1]);
                        int actualinMinutes = (int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]);
                        int DurinMin = 0;
                        if (actualinMinutes < shiftinMinutes)
                        {
                            DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(shiftStartDate[0]) * 60) + int.Parse(shiftStartDate[1]));
                        }
                        else if (actualinMinutes >= shiftinMinutes)
                        {
                            DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        }
                        if (DurinMin < 0)
                            DurinMin += 1440;
                        int HrsDur = DurinMin / 60;
                        int MinDur = DurinMin % 60;
                        strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                return strWorkHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateWorkHoursISM(string StartTime, string EndTime)
        {
            string strWorkHours = "";
            try
            {
                if (!string.IsNullOrEmpty(StartTime) && !string.IsNullOrEmpty(EndTime))
                {
                    string[] arrTimeIn = StartTime.Split(':');
                    string[] arrTimeOut = EndTime.Split(':');

                    if (arrTimeIn.Length != 2 || arrTimeOut.Length != 2)
                    {
                        return "00:00";
                    }
                    else
                    {
                        int TimeInMinutes = (int.Parse(arrTimeIn[0]) * 60) + int.Parse(arrTimeIn[1]);
                        int TimeOutMinutes = (int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1]);
                        int DurinMin = 0;
                        if (TimeInMinutes < TimeOutMinutes)
                        {
                            //DurinMin = ((int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1])) - ((int.Parse(shiftStartDate[0]) * 60) + int.Parse(shiftStartDate[1]));
                            DurinMin = TimeOutMinutes - TimeInMinutes;
                        }
                        else if (TimeInMinutes >= TimeOutMinutes)
                        {
                            DurinMin = ((int.Parse(arrTimeOut[0]) * 60) + int.Parse(arrTimeOut[1])) - ((int.Parse(arrTimeIn[0]) * 60) + int.Parse(arrTimeIn[1]));
                        }
                        if (DurinMin < 0)
                            DurinMin += 1440;
                        int HrsDur = DurinMin / 60;
                        int MinDur = DurinMin % 60;
                        strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                return strWorkHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateWorkHoursMEPL(string startTime, string endTime)
        {
            string strWorkHours = "";
            try
            {
                if (!string.IsNullOrEmpty(startTime) && !string.IsNullOrEmpty(endTime))
                {
                    string[] StartDate = startTime.Split(':');
                    string[] EndDate = endTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                            DurinMin += 1440;
                        int HrsDur = DurinMin / 60;
                        int MinDur = DurinMin % 60;
                        strWorkHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                return strWorkHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private void printSavedPostAttendanceReport()
        {
            int totalCnt = 0;
            string spIds = "0";
            grdEmployees.FlushToDataSource();
            for (int i = 0; i < dtEmployees.Rows.Count; i++)
            {
                string sel = dtEmployees.GetValue("isSel", i);
                if (sel == "Y")
                {
                    if (totalCnt == 0)
                    {
                        spIds = dtEmployees.GetValue("EmpCode", i);
                    }
                    else
                    {
                        spIds += "','" + dtEmployees.GetValue("EmpCode", i);
                    }
                    totalCnt++;

                }
            }
            if (spIds == "0")
            {
                oApplication.SetStatusBarMessage("Select employees to print Incorrect Attendance Report");
            }
            else
            {
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                string cri = " Where A2.EmpID in ('" + spIds + "') AND A1.Date BETWEEN '" + startDate.ToString("MM/dd/yyyy") + "' AND '" + EndDate.ToString("MM/dd/yyyy") + "'";
                Program.objHrmsUI.printRpt("AttendanceReport", true, cri, "");
            }
        }

        private void PrintUnsavedAttendanceReport()
        {
            int totalCnt = 0;
            string spIds = "0";
            grdEmployees.FlushToDataSource();
            for (int i = 0; i < dtEmployees.Rows.Count; i++)
            {
                string sel = dtEmployees.GetValue("isSel", i);
                if (sel == "Y")
                {
                    if (totalCnt == 0)
                    {
                        spIds = dtEmployees.GetValue("EmpCode", i);
                    }
                    else
                    {
                        spIds += "','" + dtEmployees.GetValue("EmpCode", i);
                    }
                    totalCnt++;

                }
            }
            if (spIds == "0")
            {
                oApplication.SetStatusBarMessage("Select employees to print Employee Overtime Report");
            }
            else
            {
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                string cri = " WHERE   A1.EmpID in ('" + spIds + "') AND A4.PunchedDate BETWEEN '" + startDate.Date.ToString("MM/dd/yyyy") + "' AND '" + EndDate.Date.ToString("MM/dd/yyyy") + "'";
                Program.objHrmsUI.printRpt("TempAttendanceReport", true, cri, "");
            }
        }

        public void InitiallizeForm()
        {
            try
            {
                CompanyName = string.IsNullOrEmpty(Program.systemInfo.CompanyName) ? "" : Program.systemInfo.CompanyName.Trim();

                oForm.PaneLevel = 1;
                btnOK = oForm.Items.Item("1").Specific;
                IbtnOK = oForm.Items.Item("1");

                btnSerch = oForm.Items.Item("btnSerc").Specific;
                btnClear = oForm.Items.Item("btnClear").Specific;
                btnNext = oForm.Items.Item("btnNext").Specific;
                btnBack = oForm.Items.Item("btnBack").Specific;
                IbtnBack = oForm.Items.Item("btnBack");
                btnSave = oForm.Items.Item("btnSave").Specific;
                IbtnSave = oForm.Items.Item("btnSave");
                btnPost = oForm.Items.Item("btnPost").Specific;
                IbtnPost = oForm.Items.Item("btnPost");
                btnIAR = oForm.Items.Item("btnIAR").Specific;
                IbtnIAR = oForm.Items.Item("btnIAR");
                btnEAR = oForm.Items.Item("btnEAR").Specific;
                IbtnEAR = oForm.Items.Item("btnEAR");
                btnID = oForm.Items.Item("btId").Specific;
                IbtnID = oForm.Items.Item("btId");
                btnId2 = oForm.Items.Item("btId2").Specific;
                IbtnId2 = oForm.Items.Item("btId2");
                btSaveDirect = oForm.Items.Item("btSave").Specific;
                IbtSaveDirect = oForm.Items.Item("btSave");
                btnVoid = oForm.Items.Item("btnvoid").Specific;
                IbtnVoid = oForm.Items.Item("btnvoid");
                //Initializing Textboxes
                oForm.DataSources.UserDataSources.Add("empfrm", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                txtEmpFrom = oForm.Items.Item("empfrm").Specific;
                ItxtEmpIdFrom = oForm.Items.Item("empfrm");
                txtEmpFrom.DataBind.SetBound(true, "", "empfrm");
                txtEmpFrom.TabOrder = 0;
                //txtEmpIdFrom.Value = "0000000373";

                oForm.DataSources.UserDataSources.Add("empTo", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                txtEmpTo = oForm.Items.Item("empTo").Specific;
                ItxtEmpIdTo = oForm.Items.Item("empTo");
                txtEmpTo.DataBind.SetBound(true, "", "empTo");
                txtEmpTo.TabOrder = 1;
                //txtEmpIdTo.Value = "0000000373";

                cmbLocation = oForm.Items.Item("cb_loc").Specific;
                oForm.DataSources.UserDataSources.Add("cb_loc", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                cmbLocation.DataBind.SetBound(true, "", "cb_loc");
                cmbLocation.TabOrder = 2;
                Icb_Location = oForm.Items.Item("cb_loc");

                cmbDepartment = oForm.Items.Item("cb_dpt").Specific;
                oForm.DataSources.UserDataSources.Add("cb_dpt", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                cmbDepartment.DataBind.SetBound(true, "", "cb_dpt");
                cmbDepartment.TabOrder = 3;
                Icb_depart = oForm.Items.Item("cb_dpt");

                cmbDesignation = oForm.Items.Item("cb_desg").Specific;
                oForm.DataSources.UserDataSources.Add("cb_desg", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                cmbDesignation.DataBind.SetBound(true, "", "cb_desg");
                cmbDesignation.TabOrder = 4;
                Icb_deignation = oForm.Items.Item("cb_desg");

                cmbPayroll = oForm.Items.Item("cbpayroll").Specific;
                icmbPayroll = oForm.Items.Item("cbpayroll");
                oForm.DataSources.UserDataSources.Add("cbpayroll", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                cmbPayroll.DataBind.SetBound(true, "", "cbpayroll");
                cmbPayroll.TabOrder = 5;

                cmbPeriod = oForm.Items.Item("cbperiod").Specific;
                icmbPeriod = oForm.Items.Item("cbperiod");
                oForm.DataSources.UserDataSources.Add("cbperiod", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 30);
                cmbPeriod.DataBind.SetBound(true, "", "cbperiod");
                cmbPeriod.TabOrder = 5;

                oForm.DataSources.UserDataSources.Add("frmdt", SAPbouiCOM.BoDataType.dt_DATE, 30);
                txtFromDate = oForm.Items.Item("frmdt").Specific;
                ItxtFromDate = oForm.Items.Item("frmdt");
                txtFromDate.DataBind.SetBound(true, "", "frmdt");
                txtFromDate.TabOrder = 5;
                //txtFromDate.Value = new DateTime(2014, 11, 01).ToString("yyyyMMdd");

                oForm.DataSources.UserDataSources.Add("todt", SAPbouiCOM.BoDataType.dt_DATE, 30);
                txtToDate = oForm.Items.Item("todt").Specific;
                ItxtToDate = oForm.Items.Item("todt");
                txtToDate.DataBind.SetBound(true, "", "todt");
                txtToDate.TabOrder = 6;
                //txtToDate.Value = new DateTime(2014, 11, 30).ToString("yyyyMMdd");

                cmbBranch = oForm.Items.Item("cbBrnch").Specific;
                oForm.DataSources.UserDataSources.Add("cbBrnch", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 100);
                cmbBranch.DataBind.SetBound(true, "", "cbBrnch");
                cmbBranch.TabOrder = 7;
                icmbBranch = oForm.Items.Item("cbBrnch");


                oForm.DataSources.UserDataSources.Add("optProcs", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 1);
                optProcessedAttendance = oForm.Items.Item("optProcs").Specific;
                optProcessedAttendance.DataBind.SetBound(true, "", "optProcs");

                oForm.DataSources.UserDataSources.Add("optPost", SAPbouiCOM.BoDataType.dt_SHORT_TEXT, 1);
                optPostedAttendance = oForm.Items.Item("optPost").Specific;
                optPostedAttendance.DataBind.SetBound(true, "", "optPost");
                InitiallizegridMatrix();

                dtCostCenterPerDay = new System.Data.DataTable();
                dtCostCenterPerDay.Columns.Add("CostCenter");
                dtCostCenterPerDay.Columns.Add("TimeIn");
                dtCostCenterPerDay.Columns.Add("TimeOut");
                dtCostCenterPerDay.Columns.Add("LineHour");
                dtCostCenterPerDay.Columns.Add("EmpID");
                dtCostCenterPerDay.Columns.Add("Date");

                oEmployeeLeaveBalance = new List<clsEmployeeLeaveBalance>();
                oEmployeeLeaveCollection = new List<EmployeeLeaves>();
                //txtFromDate.Value = new DateTime(2016, 1, 1).ToString("yyyyMMdd");
                //txtToDate.Value = new DateTime(2016, 1, 31).ToString("yyyyMMdd");
                //txtEmpFrom.Value = "8";
                //txtEmpTo.Value = "8";

            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("InitializeFrom Error : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void InitiallizegridMatrix()
        {
            try
            {

                dtEmployees = oForm.DataSources.DataTables.Add("Employees");
                dtEmployees.Columns.Add("No", SAPbouiCOM.BoFieldsType.ft_Integer);
                dtEmployees.Columns.Add("EmpCode", SAPbouiCOM.BoFieldsType.ft_Text);
                dtEmployees.Columns.Add("EmpName", SAPbouiCOM.BoFieldsType.ft_Text);
                dtEmployees.Columns.Add("Designation", SAPbouiCOM.BoFieldsType.ft_Text);
                dtEmployees.Columns.Add("Department", SAPbouiCOM.BoFieldsType.ft_Text);
                dtEmployees.Columns.Add("Location", SAPbouiCOM.BoFieldsType.ft_Text);
                dtEmployees.Columns.Add("isSel", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 1);

                grdEmployees = (SAPbouiCOM.Matrix)oForm.Items.Item("grd_Emp").Specific;
                IgrdEmployees = oForm.Items.Item("grd_Emp");
                oColumns = (SAPbouiCOM.Columns)grdEmployees.Columns;


                oColumn = oColumns.Item("No");
                clNo = oColumn;
                oColumn.DataBind.Bind("Employees", "No");
                oColumn.TitleObject.Sortable = false;

                oColumn = oColumns.Item("EmpCode");
                clEmpCode = oColumn;
                oColumn.DataBind.Bind("Employees", "EmpCode");
                oColumn.TitleObject.Sortable = false;



                oColumn = oColumns.Item("EmpName");
                EmpName = oColumn;
                oColumn.DataBind.Bind("Employees", "EmpName");
                oColumn.TitleObject.Sortable = false;

                oColumn = oColumns.Item("Desig");
                Desig = oColumn;
                oColumn.DataBind.Bind("Employees", "Designation");
                oColumn.TitleObject.Sortable = false;

                oColumn = oColumns.Item("Depart");
                Depart = oColumn;
                oColumn.DataBind.Bind("Employees", "Department");
                oColumn.TitleObject.Sortable = false;

                oColumn = oColumns.Item("Location");
                Location = oColumn;
                oColumn.DataBind.Bind("Employees", "Location");
                oColumn.TitleObject.Sortable = false;

                oColumn = oColumns.Item("isSel");
                clIsSelected = oColumn;
                oColumn.DataBind.Bind("Employees", "isSel");
                oColumn.TitleObject.Sortable = false;

                dtAttendance = oForm.DataSources.DataTables.Add("Attendance");
                dtAttendance.Columns.Add("Id", SAPbouiCOM.BoFieldsType.ft_Integer);
                dtAttendance.Columns.Add("No", SAPbouiCOM.BoFieldsType.ft_Integer);
                dtAttendance.Columns.Add("EmpCode", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("EmpName", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("Date", SAPbouiCOM.BoFieldsType.ft_Date);
                dtAttendance.Columns.Add("Day", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 15);
                dtAttendance.Columns.Add("Shift", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("SfStart", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("SfEnd", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("SfHours", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("ReportingTime", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("TimeIn", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("TimeOut", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("WorkHours", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("ShortHours", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("CUnits", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("UUnits", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("OTUnits", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("LateInMin", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("EarlyOutMin", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 5);
                dtAttendance.Columns.Add("OTType", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("OTHours", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("Status", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("LevType", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("LevHours", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("clDesc", SAPbouiCOM.BoFieldsType.ft_Text);
                dtAttendance.Columns.Add("IsNewLeave", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 1);
                dtAttendance.Columns.Add("LevCount", SAPbouiCOM.BoFieldsType.ft_Text, 6);
                dtAttendance.Columns.Add("CostCenter", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("DedRule", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("PreTimeIn", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("PreTimeOut", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("Modified", SAPbouiCOM.BoFieldsType.ft_AlphaNumeric, 1);
                dtAttendance.Columns.Add("AdjHrs", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("TotalHrs", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("OTAdjt", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("StandHrs", SAPbouiCOM.BoFieldsType.ft_Text, 20);
                dtAttendance.Columns.Add("Remarks", SAPbouiCOM.BoFieldsType.ft_Text);

                grdAttendance = (SAPbouiCOM.Matrix)oForm.Items.Item("grdAtt").Specific;
                IgrdAttendance = oForm.Items.Item("grdAtt");
                oColumns = (SAPbouiCOM.Columns)grdAttendance.Columns;

                oColumn = oColumns.Item("Id");
                clId = oColumn;
                oColumn.DataBind.Bind("Attendance", "Id");
                clId.Visible = false;

                oColumn = oColumns.Item("No");
                clNo = oColumn;
                oColumn.DataBind.Bind("Attendance", "No");

                oColumn = oColumns.Item("EmpCode");
                clEmpCode = oColumn;
                oColumn.DataBind.Bind("Attendance", "EmpCode");

                oColumn = oColumns.Item("EmpName");
                EmpName = oColumn;
                oColumn.DataBind.Bind("Attendance", "EmpName");


                oColumn = oColumns.Item("Date");
                clTodayDate = oColumn;
                oColumn.DataBind.Bind("Attendance", "Date");

                oColumn = oColumns.Item("clDay");
                clDay = oColumn;
                oColumn.DataBind.Bind("Attendance", "Day");

                oColumn = oColumns.Item("shft");
                clShiftCode = oColumn;
                oColumn.DataBind.Bind("Attendance", "Shift");

                oColumn = oColumns.Item("SfStart");
                clShiftTimeIn = oColumn;
                oColumn.DataBind.Bind("Attendance", "SfStart");

                oColumn = oColumns.Item("SfEnd");
                clShiftTiemOut = oColumn;
                oColumn.DataBind.Bind("Attendance", "SfEnd");

                oColumn = oColumns.Item("SfHours");
                clShiftHours = oColumn;
                oColumn.DataBind.Bind("Attendance", "SfHours");

                oColumn = oColumns.Item("Rtime");
                clReportingTime = oColumn;
                oColumn.DataBind.Bind("Attendance", "ReportingTime");

                oColumn = oColumns.Item("TmIn");
                clTimeIn = oColumn;
                oColumn.DataBind.Bind("Attendance", "TimeIn");

                oColumn = oColumns.Item("TmOut");
                clTimeOut = oColumn;
                oColumn.DataBind.Bind("Attendance", "TimeOut");

                oColumn = oColumns.Item("Wmin");
                clsWmin = oColumn;
                oColumn.DataBind.Bind("Attendance", "UUnits");

                oColumn = oColumns.Item("OTmin");
                clsOTmin = oColumn;
                oColumn.DataBind.Bind("Attendance", "OTUnits");

                oColumn = oColumns.Item("Cmin");
                clsUmin = oColumn;
                oColumn.DataBind.Bind("Attendance", "CUnits");

                oColumn = oColumns.Item("WHrs");
                clWorkHours = oColumn;
                oColumn.DataBind.Bind("Attendance", "WorkHours");

                oColumn = oColumns.Item("ShortHrs");
                clsShortHrs = oColumn;
                oColumn.DataBind.Bind("Attendance", "ShortHours");


                oColumn = oColumns.Item("OTT");
                clOTType = oColumn;
                oColumn.DataBind.Bind("Attendance", "OTType");


                oColumn = oColumns.Item("OTH");
                clOTHour = oColumn;
                oColumn.DataBind.Bind("Attendance", "OTHours");

                oColumn = oColumns.Item("LT");
                clLeaveType = oColumn;
                oColumn.DataBind.Bind("Attendance", "LevType");

                oColumn = oColumns.Item("LH");
                clLeaveHour = oColumn;
                oColumn.DataBind.Bind("Attendance", "LevHours");

                oColumn = oColumns.Item("clStatus");
                clStatus = oColumn;
                oColumn.DataBind.Bind("Attendance", "Status");

                oColumn = oColumns.Item("clLtMin");
                clLateInMinutes = oColumn;
                oColumn.DataBind.Bind("Attendance", "LateInMin");

                oColumn = oColumns.Item("clEOMin");
                clEarlyOutMinutes = oColumn;
                oColumn.DataBind.Bind("Attendance", "EarlyOutMin");

                oColumn = oColumns.Item("lCnt");
                clLeaveCount = oColumn;
                oColumn.DataBind.Bind("Attendance", "LevCount");

                oColumn = oColumns.Item("IsNewL");
                clIsNewLeave = oColumn;
                oColumn.DataBind.Bind("Attendance", "IsNewLeave");
                clIsNewLeave.Visible = true;

                oColumn = oColumns.Item("clDesc");
                clDescription = oColumn;
                oColumn.DataBind.Bind("Attendance", "clDesc");

                oColumn = oColumns.Item("clCC");
                clCostCenter = oColumn;
                oColumn.DataBind.Bind("Attendance", "CostCenter");

                oColumn = oColumns.Item("clDedRule");
                clDRType = oColumn;
                oColumn.DataBind.Bind("Attendance", "DedRule");

                oColumn = oColumns.Item("clPreTI");
                clPreTimeIn = oColumn;
                oColumn.DataBind.Bind("Attendance", "PreTimeIn");

                oColumn = oColumns.Item("clPreTO");
                clPreTimeOut = oColumn;
                oColumn.DataBind.Bind("Attendance", "PreTimeOut");

                oColumn = oColumns.Item("clModify");
                clModify = oColumn;
                oColumn.DataBind.Bind("Attendance", "Modified");

                oColumn = oColumns.Item("AdjHrs");
                clAdjustedHours = oColumn;
                oColumn.DataBind.Bind("Attendance", "AdjHrs");

                oColumn = oColumns.Item("TotalHrs");
                clTotalHours = oColumn;
                oColumn.DataBind.Bind("Attendance", "TotalHrs");

                oColumn = oColumns.Item("OTAdjt");
                clOverTimeAdjustment = oColumn;
                oColumn.DataBind.Bind("Attendance", "OTAdjt");

                oColumn = oColumns.Item("StandHrs");
                clStandardHours = oColumn;
                oColumn.DataBind.Bind("Attendance", "StandHrs");

                oColumn = oColumns.Item("clRemarks");
                clRemarks = oColumn;
                oColumn.DataBind.Bind("Attendance", "Remarks");

                if (Program.systemInfo.FlgUnitFeature == true)
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = false;
                    clTimeOut.Editable = false;
                    clsWmin.Visible = true;
                    clsOTmin.Visible = true;
                    clsUmin.Visible = false;
                    clDRType.Visible = false;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;


                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                }
                else if (CompanyName.ToLower() == "mepl")
                {
                    clCostCenter.Visible = true;
                    clTimeIn.Editable = false;
                    clTimeOut.Editable = false;
                    clsWmin.Visible = true;
                    clsOTmin.Visible = true;
                    clsUmin.Visible = true;
                    clDRType.Visible = false;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;


                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                }
                else if (CompanyName.ToLower() == "ssl")
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = true;
                    clTimeOut.Editable = true;
                    clsWmin.Visible = false;
                    clsOTmin.Visible = false;
                    clsUmin.Visible = false;
                    clDRType.Visible = true;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;

                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                }
                else if (CompanyName.ToLower() == "pakola")
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = true;
                    clTimeOut.Editable = true;
                    clsWmin.Visible = false;
                    clsOTmin.Visible = false;
                    clsUmin.Visible = false;
                    clDRType.Visible = true;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;

                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                }
                else if (CompanyName.ToLower() == "spell")
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = true;
                    clTimeOut.Editable = true;
                    clsWmin.Visible = false;
                    clsOTmin.Visible = false;
                    clsUmin.Visible = false;
                    clDRType.Visible = true;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;
                    clAdjustedHours.Editable = true;
                    clReportingTime.Visible = true;
                    clAdjustedHours.Visible = true;
                    clTotalHours.Visible = true;
                    clOverTimeAdjustment.Visible = true;
                    clStandardHours.Visible = true;

                }
                else if (Convert.ToBoolean(Program.systemInfo.FlgArabic) && CompanyName.ToLower() == "joseph")
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = true;
                    clTimeOut.Editable = true;
                    clsWmin.Visible = false;
                    clsOTmin.Visible = false;
                    clsUmin.Visible = false;
                    clDRType.Visible = true;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;
                    clAdjustedHours.Editable = false;
                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                }
                else
                {
                    clCostCenter.Visible = false;
                    clTimeIn.Editable = false;
                    clTimeOut.Editable = false;
                    clsWmin.Visible = false;
                    clsOTmin.Visible = false;
                    clsUmin.Visible = false;
                    clDRType.Visible = true;
                    clPreTimeIn.Visible = false;
                    clPreTimeOut.Visible = false;
                    clModify.Visible = false;
                    clReportingTime.Visible = false;
                    clAdjustedHours.Visible = false;
                    clTotalHours.Visible = false;
                    clOverTimeAdjustment.Visible = false;
                    clStandardHours.Visible = false;
                    clRemarks.Visible = true;
                    clDay.Visible = true;
                }
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillDepartmentInCombo()
        {
            try
            {
                var Departments = from a in dbHrPayroll.MstDepartment orderby a.DeptName ascending select a;
                cmbDepartment.ValidValues.Add(Convert.ToString(0), Convert.ToString("ALL"));
                foreach (MstDepartment Dept in Departments)
                {
                    cmbDepartment.ValidValues.Add(Convert.ToString(Dept.ID), Convert.ToString(Dept.DeptName));
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillDepartmentInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillPayrollInCombo()
        {
            try
            {
                #region Fill Payroll
                int i = 0;
                string strOut = string.Empty;
                //string strSql = "SELECT \"U_PayrollType\" FROM \"OUSR\" WHERE \"DimCode\" = 1";
                string strSql = "SELECT \"U_PayrollType\" FROM \"OUSR\" WHERE \"USER_CODE\" = '" + oCompany.UserName + "'";
                SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                //string strSql = "SELECT \"DimDesc\" FROM \"ODIM\" WHERE \"DimCode\" = 1";
                oRecSet.DoQuery(strSql);
                //strOut = oRecSet.Fields.Item("U_PayrollType").Value;
                strOut = Convert.ToString(oRecSet.Fields.Item("U_PayrollType").Value);
                if (Program.systemInfo.FlgEmployeeFilter == true)
                {
                    if (strOut != null && strOut != "")
                    {
                        //IEnumerable<CfgPayrollDefination> prs = from p in dbHrPayroll.CfgPayrollDefination where p.ID.ToString() == strOut.Trim() select p;
                        //foreach (CfgPayrollDefination pr in prs)
                        //{
                        //    cbProll.ValidValues.Add(pr.ID.ToString(), pr.PayrollName);

                        //    i++;
                        //}
                        string strSql2 = sqlString.getSql("GetPayrollName", SearchKeyVal);
                        strSql2 = strSql2 + " where ID in (" + strOut + ")";
                        strSql2 += " ORDER BY ID Asc ";
                        System.Data.DataTable dt = ds.getDataTable(strSql2);
                        DataView dv = dt.DefaultView;
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            for (int l = 0; l < dt.Rows.Count; l++)
                            {
                                string strPayrollName = dt.Rows[l]["PayrollName"].ToString();
                                Int32 intPayrollID = Convert.ToInt32(dt.Rows[l]["ID"].ToString());
                                cmbPayroll.ValidValues.Add(intPayrollID.ToString(), strPayrollName);

                            }
                        }
                        cmbPayroll.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                        FillPeriod(cmbPayroll.Value);
                    }
                    else
                    {
                        IEnumerable<CfgPayrollDefination> prs = from p in dbHrPayroll.CfgPayrollDefination select p;
                        foreach (CfgPayrollDefination pr in prs)
                        {
                            cmbPayroll.ValidValues.Add(pr.ID.ToString(), pr.PayrollName);

                            i++;
                        }

                        cmbPayroll.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                        FillPeriod(cmbPayroll.Value);
                    }
                }
                else
                {
                    IEnumerable<CfgPayrollDefination> prs = from p in dbHrPayroll.CfgPayrollDefination select p;
                    foreach (CfgPayrollDefination pr in prs)
                    {
                        cmbPayroll.ValidValues.Add(pr.ID.ToString(), pr.PayrollName);

                        i++;
                    }

                    cmbPayroll.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                    FillPeriod(cmbPayroll.Value);
                }
                //End Fill Payroll
                #endregion
                //var oCollection = (from a in dbHrPayroll.CfgPayrollDefination orderby a.PayrollName ascending select a).ToList();
                //cmbPayroll.ValidValues.Add("0", "All");
                //foreach (var oLine in oCollection)
                //{
                //    cmbPayroll.ValidValues.Add(Convert.ToString(oLine.ID), Convert.ToString(oLine.PayrollName));
                //}
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("FillPayrollInCombo : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillPeriodInCombo()
        {
            try
            {
                string payrollValue = cmbPayroll.Value.Trim();
                if (string.IsNullOrEmpty(payrollValue)) return;
                if (cmbPeriod.ValidValues.Count > 0)
                {
                    int vcnt = cmbPeriod.ValidValues.Count;
                    for (int k = vcnt - 1; k >= 0; k--)
                    {
                        cmbPeriod.ValidValues.Remove(cmbPeriod.ValidValues.Item(k).Value);
                    }
                }
                var oCollection = (from a in dbHrPayroll.CfgPeriodDates where a.PayrollId.ToString() == payrollValue orderby a.StartDate ascending select a).ToList();
                cmbPeriod.ValidValues.Add("0", "All");
                foreach (var oLine in oCollection)
                {
                    cmbPeriod.ValidValues.Add(Convert.ToString(oLine.ID), Convert.ToString(oLine.PeriodName));
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("FillPayrollInCombo : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillPeriod(string payroll)
        {
            try
            {
                //dtPeriods.Rows.Clear();
                if (cmbPeriod.ValidValues.Count > 0)
                {
                    int vcnt = cmbPeriod.ValidValues.Count;
                    for (int k = vcnt - 1; k >= 0; k--)
                    {
                        cmbPeriod.ValidValues.Remove(cmbPeriod.ValidValues.Item(k).Value);
                    }
                }
                int i = 0;
                string selId = "0";
                bool flgPrevios = false;
                bool flgHit = false;
                int count = 0;
                int cnt = (from p in dbHrPayroll.CfgPayrollDefination where p.ID.ToString() == payroll.Trim() select p).Count();
                if (cnt > 0)
                {
                    CfgPayrollDefination pr = (from p in dbHrPayroll.CfgPayrollDefination where p.ID.ToString() == payroll.Trim() select p).Single();
                    foreach (CfgPeriodDates pd in pr.CfgPeriodDates)
                    {
                        if (pd.FlgVisible == null ? false : (bool)pd.FlgVisible && pd.FlgLocked != true)
                        {
                            cmbPeriod.ValidValues.Add(pd.ID.ToString(), pd.PeriodName.ToString());
                        }
                        count++;
                        if (!flgHit && count == 1)
                            selId = pd.ID.ToString();
                        //if (pd.StartDate <= DateTime.Now.Date && DateTime.Now.Date <= pd.EndDate)
                        //{
                        //    selId = pd.ID.ToString();
                        //}
                        if (Convert.ToBoolean(pd.FlgLocked))
                        {
                            selId = "0";
                            flgPrevios = true;
                        }
                        else
                        {
                            if (flgPrevios)
                            {
                                selId = pd.ID.ToString();
                                flgPrevios = false;
                            }
                        }

                        i++;
                    }
                    try
                    {
                        cmbPeriod.Select(selId);
                        //oForm.DataSources.UserDataSources.Item("cbPeriod").ValueEx = selId;
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                oApplication.SetStatusBarMessage("Error occured " + ex.Message);
            }
        }

        private void FillDesignationInCombo()
        {
            try
            {
                var Designation = from a in dbHrPayroll.MstDesignation orderby a.Name ascending select a;
                cmbDesignation.ValidValues.Add(Convert.ToString(0), Convert.ToString("ALL"));
                foreach (MstDesignation Desig in Designation)
                {
                    cmbDesignation.ValidValues.Add(Convert.ToString(Desig.Id), Convert.ToString(Desig.Name));
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillDesignationInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillEmpLocationInCombo()
        {
            try
            {
                var EmpLocation = from a in dbHrPayroll.MstLocation orderby a.Name ascending select a;
                cmbLocation.ValidValues.Add(Convert.ToString(0), Convert.ToString("ALL"));
                foreach (MstLocation empLocation in EmpLocation)
                {
                    cmbLocation.ValidValues.Add(Convert.ToString(empLocation.Id), Convert.ToString(empLocation.Name));
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillEmpLocationInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }

        }

        private void FillEmpBranchInCombo()
        {
            try
            {
                var EmpBranch = from a in dbHrPayroll.MstBranches orderby a.Name ascending select a;
                cmbBranch.ValidValues.Add(Convert.ToString(0), Convert.ToString("ALL"));
                foreach (MstBranches Branches in EmpBranch)
                {
                    cmbBranch.ValidValues.Add(Convert.ToString(Branches.Id), Convert.ToString(Branches.Description));
                }
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillEmpLocationInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }

        }

        private void FillOvertimeTypeInCombo()
        {
            try
            {
                var OverTime = from a in dbHrPayroll.MstOverTime select a;
                clOTType.ValidValues.Add("-1", "");
                foreach (MstOverTime empOvertimeType in OverTime)
                {
                    clOTType.ValidValues.Add(Convert.ToString(empOvertimeType.Code), Convert.ToString(empOvertimeType.Description));
                }
                clOTType.DisplayDesc = true;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillOvertimeTypeInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillLeaveTypeInCombo()
        {
            try
            {
                var LeaveType = from a in dbHrPayroll.MstLeaveType select a;
                clLeaveType.ValidValues.Add("-1", "");
                foreach (MstLeaveType empLeaveType in LeaveType)
                {
                    clLeaveType.ValidValues.Add(Convert.ToString(empLeaveType.Code.Trim()), Convert.ToString(empLeaveType.Description.Trim()));
                }
                clLeaveType.DisplayDesc = true;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: FillLeaveTypeInCombo Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }

        }

        private void setDateFromSelectedPeriod()
        {
            try
            {
                string value = cmbPeriod.Value.Trim();
                if (string.IsNullOrEmpty(value) || value == "0") return;
                var oPeriod = (from a in dbHrPayroll.CfgPeriodDates where a.ID.ToString() == value select a).FirstOrDefault();
                if (oPeriod == null) return;
                txtFromDate.Value = Convert.ToDateTime(oPeriod.StartDate).ToString("yyyyMMdd");
                txtToDate.Value = Convert.ToDateTime(oPeriod.EndDate).ToString("yyyyMMdd");
                //txtFromDate.Value = new DateTime(2016, 1, 1).ToString("yyyyMMdd");
                //txtToDate.Value = new DateTime(2016, 1, 5).ToString("yyyyMMdd");
            }
            catch (Exception ex)
            {
            }
        }

        private void PopulateGridWithFilterExpressionOld()
        {
            Int16 i = 0;

            //var Data = dbHrPayroll.MstEmployee.Where(e => e.FlgActive == true && e.PayrollID > 0).ToList();
            var Data = (from e in dbHrPayroll.MstEmployee where e.FlgActive == true && e.PayrollID > 0 orderby e.SortOrder ascending select e).ToList();
            if (txtEmpFrom.Value != string.Empty && txtEmpTo.Value != string.Empty)
            {
                int? sortorderfrom = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpFrom.Value.Trim() select a.SortOrder).FirstOrDefault();
                int? sortorderto = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpTo.Value.Trim() select a.SortOrder).FirstOrDefault();
                if (sortorderfrom == null) sortorderfrom = 0;
                if (sortorderto == null) sortorderto = 100000;
                if (sortorderfrom > sortorderto)
                {
                    //Data = Data.Where(e => e.SortOrder >= intEmpIdTo && e.SortOrder <= intEmpIdFrom).ToList();                        
                    oApplication.StatusBar.SetText("Searching criteria is not valid for selected range.", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                    return;

                }
                if (sortorderto >= sortorderfrom)
                {
                    Data = Data.Where(e => e.SortOrder >= sortorderfrom && e.SortOrder <= sortorderto).ToList();
                }
            }
            if (cmbLocation.Value.Trim() != "0" && cmbLocation.Value.Trim() != string.Empty)
            {
                Data = Data.Where(e => e.Location == Convert.ToInt32(cmbLocation.Value)).ToList();
            }
            if (cmbDepartment.Value.Trim() != "0" && cmbDepartment.Value.Trim() != string.Empty)
            {
                Data = Data.Where(e => e.DepartmentID == Convert.ToInt32(cmbDepartment.Value)).ToList();
            }
            if (cmbDesignation.Value.Trim() != "0" && cmbDesignation.Value.Trim() != string.Empty)
            {
                Data = Data.Where(e => e.DesignationID == Convert.ToInt32(cmbDesignation.Value)).ToList();
            }
            if (cmbBranch.Value.Trim() != "0" && cmbBranch.Value.Trim() != string.Empty)
            {
                Data = Data.Where(e => e.BranchID == Convert.ToInt32(cmbBranch.Value)).ToList();
            }
            if (cmbPayroll.Value.Trim() != "0" && cmbPayroll.Value.Trim() != string.Empty)
            {
                Data = Data.Where(e => e.PayrollID.ToString() == cmbPayroll.Value.Trim()).ToList();
            }
            if (Data != null && Data.Count > 0)
            {

                dtEmployees.Rows.Clear();
                dtEmployees.Rows.Add(Data.Count());
                foreach (var EMP in Data)
                {
                    dtEmployees.SetValue("No", i, i + 1);
                    dtEmployees.SetValue("EmpCode", i, EMP.EmpID);
                    dtEmployees.SetValue("EmpName", i, EMP.FirstName + " " + EMP.MiddleName + " " + EMP.LastName);
                    dtEmployees.SetValue("Designation", i, !String.IsNullOrEmpty(EMP.DesignationName) ? EMP.DesignationName.ToString() : "");
                    dtEmployees.SetValue("Department", i, !String.IsNullOrEmpty(EMP.DepartmentName) ? EMP.DepartmentName.ToString() : "");
                    dtEmployees.SetValue("Location", i, !String.IsNullOrEmpty(EMP.LocationName) ? EMP.LocationName.ToString() : "");
                    i++;
                }
                grdEmployees.LoadFromDataSource();
            }
            else
            {
                dtEmployees.Rows.Clear();
                grdEmployees.LoadFromDataSource();
            }
        }

        private void PopulateGridWithFilterExpression()
        {
            Int16 i = 0;
            System.Data.DataTable dt = new System.Data.DataTable();
            string strOut = string.Empty;
            Program.sqlString = "empPick";
            string strSql = sqlString.getSql(Program.sqlString, SearchKeyVal);
            string strEmployeeCode = string.Empty;
            //var Data = dbHrPayroll.MstEmployee.Where(e => e.FlgActive == true && e.PayrollID > 0).ToList();
            if (Convert.ToBoolean(Program.systemInfo.FlgEmployeeFilter))
            {
                string strSql2 = "SELECT \"U_PayrollType\" FROM \"OUSR\" WHERE \"USER_CODE\" = '" + oCompany.UserName + "'";
                SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                oRecSet.DoQuery(strSql2);
                strOut = Convert.ToString(oRecSet.Fields.Item("U_PayrollType").Value);
                strSql = strSql + " And A1.PayrollID in (" + strOut + ")";
                strSql += " ORDER BY A1.SortOrder Asc ";
                dt = ds.getDataTable(strSql);
                DataView dv = dt.DefaultView;
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (txtEmpFrom.Value != string.Empty && txtEmpTo.Value != string.Empty)
                    {
                        dv.RowFilter = "EmpID ='" + txtEmpFrom.Value + "' AND EmpID ='" + txtEmpTo.Value + "'";


                        if (cmbLocation.Value.Trim() != "0" && cmbLocation.Value.Trim() != string.Empty)
                        {
                            dv.RowFilter = "LocationName ='" + cmbLocation.Value.Trim() + "'";// Data = Data.Where(e => e.Location == Convert.ToInt32(cmbLocation.Value)).ToList();
                        }
                        if (cmbDepartment.Value.Trim() != "0" && cmbDepartment.Value.Trim() != string.Empty)
                        {
                            dv.RowFilter = "DepartmentName ='" + cmbDepartment.Value.Trim() + "'";// Data = Data.Where(e => e.DepartmentID == Convert.ToInt32(cmbDepartment.Value)).ToList();
                        }
                        if (cmbDesignation.Value.Trim() != "0" && cmbDesignation.Value.Trim() != string.Empty)
                        {
                            dv.RowFilter = "DesignationName ='" + cmbDesignation.Value.Trim() + "'";// Data = Data.Where(e => e.DesignationID == Convert.ToInt32(cmbDesignation.Value)).ToList();
                        }
                        dt = dv.ToTable();
                        dtEmployees.Rows.Clear();
                        dtEmployees.Rows.Add(dt.Rows.Count);
                        for (int K = 0; K < dt.Rows.Count; K++)
                        {
                            string strEmpID = dt.Rows[K]["EmpID"].ToString();
                            string strFullName = dt.Rows[K]["FirstName"].ToString() + " " + dt.Rows[K]["MiddleName"].ToString() + " " + dt.Rows[K]["LastName"].ToString();
                            string strDesignationName = dt.Rows[K]["DesignationName"].ToString();
                            string strLocationName = dt.Rows[K]["LocationName"].ToString();
                            string strDepartmentname = dt.Rows[K]["DepartmentName"].ToString();
                            //dtEmployees.SetValue("No", i, i + 1);
                            dtEmployees.SetValue("EmpCode", K, strEmpID);
                            dtEmployees.SetValue("EmpName", K, strFullName);
                            dtEmployees.SetValue("Designation", K, strDesignationName);
                            dtEmployees.SetValue("Department", K, strDepartmentname);
                            dtEmployees.SetValue("Location", K, strLocationName);
                            i++;
                        }
                        grdEmployees.LoadFromDataSource();

                    }
                    else
                    {
                        var Data = (from e in dbHrPayroll.MstEmployee
                                    where e.FlgActive == true
                                    && e.PayrollID > 0
                                    && e.ResignDate == null
                                    orderby e.SortOrder
                                    ascending
                                    select e).ToList();

                        if (txtEmpFrom.Value != string.Empty && txtEmpTo.Value != string.Empty)
                        {
                            int? sortorderfrom = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpFrom.Value.Trim() select a.SortOrder).FirstOrDefault();
                            int? sortorderto = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpTo.Value.Trim() select a.SortOrder).FirstOrDefault();
                            if (sortorderfrom == null) sortorderfrom = 0;
                            if (sortorderto == null) sortorderto = 100000;
                            if (sortorderfrom > sortorderto)
                            {
                                //Data = Data.Where(e => e.SortOrder >= intEmpIdTo && e.SortOrder <= intEmpIdFrom).ToList();                        
                                oApplication.StatusBar.SetText("Searching criteria is not valid for selected range.", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                return;

                            }
                            if (sortorderto >= sortorderfrom)
                            {
                                Data = Data.Where(e => e.SortOrder >= sortorderfrom && e.SortOrder <= sortorderto).ToList();
                            }
                        }
                        if (cmbLocation.Value.Trim() != "0" && cmbLocation.Value.Trim() != string.Empty)
                        {
                            Data = Data.Where(e => e.Location == Convert.ToInt32(cmbLocation.Value)).ToList();
                        }
                        if (cmbDepartment.Value.Trim() != "0" && cmbDepartment.Value.Trim() != string.Empty)
                        {
                            Data = Data.Where(e => e.DepartmentID == Convert.ToInt32(cmbDepartment.Value)).ToList();
                        }
                        if (cmbDesignation.Value.Trim() != "0" && cmbDesignation.Value.Trim() != string.Empty)
                        {
                            Data = Data.Where(e => e.DesignationID == Convert.ToInt32(cmbDesignation.Value)).ToList();
                        }
                        if (cmbPayroll.Value.Trim() != "0" && cmbPayroll.Value.Trim() != string.Empty)
                        {
                            Data = Data.Where(e => e.PayrollID.ToString() == cmbPayroll.Value.Trim()).ToList();
                        }
                        if (Data != null && Data.Count > 0)
                        {

                            dtEmployees.Rows.Clear();
                            dtEmployees.Rows.Add(Data.Count());
                            foreach (var EMP in Data)
                            {
                                dtEmployees.SetValue("No", i, i + 1);
                                dtEmployees.SetValue("EmpCode", i, EMP.EmpID);
                                dtEmployees.SetValue("EmpName", i, EMP.FirstName + " " + EMP.MiddleName + " " + EMP.LastName);
                                dtEmployees.SetValue("Designation", i, !String.IsNullOrEmpty(EMP.DesignationName) ? EMP.DesignationName.ToString() : "");
                                dtEmployees.SetValue("Department", i, !String.IsNullOrEmpty(EMP.DepartmentName) ? EMP.DepartmentName.ToString() : "");
                                dtEmployees.SetValue("Location", i, !String.IsNullOrEmpty(EMP.LocationName) ? EMP.LocationName.ToString() : "");
                                i++;
                            }
                            grdEmployees.LoadFromDataSource();
                        }
                        else
                        {
                            dtEmployees.Rows.Clear();
                            grdEmployees.LoadFromDataSource();
                        }
                    }
                }


            }
            else
            {


                var Data = (from e in dbHrPayroll.MstEmployee where e.FlgActive == true && e.PayrollID > 0 orderby e.SortOrder ascending select e).ToList();
                if (txtEmpFrom.Value != string.Empty && txtEmpTo.Value != string.Empty)
                {
                    int? sortorderfrom = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpFrom.Value.Trim() select a.SortOrder).FirstOrDefault();
                    int? sortorderto = (from a in dbHrPayroll.MstEmployee where a.EmpID == txtEmpTo.Value.Trim() select a.SortOrder).FirstOrDefault();
                    if (sortorderfrom == null) sortorderfrom = 0;
                    if (sortorderto == null) sortorderto = 100000;
                    if (sortorderfrom > sortorderto)
                    {
                        //Data = Data.Where(e => e.SortOrder >= intEmpIdTo && e.SortOrder <= intEmpIdFrom).ToList();                        
                        oApplication.StatusBar.SetText("Searching criteria is not valid for selected range.", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                        return;

                    }
                    if (sortorderto >= sortorderfrom)
                    {
                        Data = Data.Where(e => e.SortOrder >= sortorderfrom && e.SortOrder <= sortorderto).ToList();
                    }
                }
                if (cmbLocation.Value.Trim() != "0" && cmbLocation.Value.Trim() != string.Empty)
                {
                    Data = Data.Where(e => e.Location == Convert.ToInt32(cmbLocation.Value)).ToList();
                }
                if (cmbDepartment.Value.Trim() != "0" && cmbDepartment.Value.Trim() != string.Empty)
                {
                    Data = Data.Where(e => e.DepartmentID == Convert.ToInt32(cmbDepartment.Value)).ToList();
                }
                if (cmbDesignation.Value.Trim() != "0" && cmbDesignation.Value.Trim() != string.Empty)
                {
                    Data = Data.Where(e => e.DesignationID == Convert.ToInt32(cmbDesignation.Value)).ToList();
                }
                if (cmbPayroll.Value.Trim() != "0" && cmbPayroll.Value.Trim() != string.Empty)
                {
                    Data = Data.Where(e => e.PayrollID.ToString() == cmbPayroll.Value.Trim()).ToList();
                }
                if (Data != null && Data.Count > 0)
                {

                    dtEmployees.Rows.Clear();
                    dtEmployees.Rows.Add(Data.Count());
                    foreach (var EMP in Data)
                    {
                        dtEmployees.SetValue("No", i, i + 1);
                        dtEmployees.SetValue("EmpCode", i, EMP.EmpID);
                        dtEmployees.SetValue("EmpName", i, EMP.FirstName + " " + EMP.MiddleName + " " + EMP.LastName);
                        dtEmployees.SetValue("Designation", i, !String.IsNullOrEmpty(EMP.DesignationName) ? EMP.DesignationName.ToString() : "");
                        dtEmployees.SetValue("Department", i, !String.IsNullOrEmpty(EMP.DepartmentName) ? EMP.DepartmentName.ToString() : "");
                        dtEmployees.SetValue("Location", i, !String.IsNullOrEmpty(EMP.LocationName) ? EMP.LocationName.ToString() : "");
                        i++;
                    }
                    grdEmployees.LoadFromDataSource();
                }
                else
                {
                    dtEmployees.Rows.Clear();
                    grdEmployees.LoadFromDataSource();
                }
            }
        }

        private void ClearControls()
        {
            try
            {
                txtEmpFrom.Value = string.Empty;
                txtEmpTo.Value = string.Empty;
                cmbDesignation.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                cmbDepartment.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                cmbLocation.Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                dtEmployees.Rows.Clear();
                grdEmployees.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: ClearControls Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void HideFirstVisibleNext()
        {
            try
            {

                if (!string.IsNullOrEmpty(txtFromDate.Value) && !string.IsNullOrEmpty(txtToDate.Value))
                {
                    if (dtEmployees != null && dtEmployees.Rows.Count > 0)
                    {
                        if (Convert.ToBoolean(Program.systemInfo.FlgCostCenterGL))
                        {
                            //LoadEmployeeAttendanceWrstCostCenter();
                            LoadEmployeeAttendanceCC();
                        }
                        else
                        {
                            if (Program.systemInfo.FlgUnitFeature == true)
                            {
                                LoadEmployeeAttendanceRecordOrderByDateMEPL();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;

                            }
                            else if (Program.systemInfo.FlgSSL == true)
                            {
                                if (Program.systemInfo.FlgLeaveCalendar == true)
                                {
                                    FillEmployeeLeaveBalanceLeaveCalendar();
                                }
                                else
                                {
                                    FillEmployeeLeaveBalance();
                                }
                                LoadEmployeeAttendanceRecordBikiya();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;
                            }
                            else if (CompanyName.ToLower() == "mepl")
                            {
                                LoadEmployeeAttendanceRecordOrderByDateMEPL();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;
                            }
                            else if (CompanyName.ToLower() == "pakola")
                            {
                                if (Program.systemInfo.FlgLeaveCalendar == true)
                                {
                                    FillEmployeeLeaveBalanceLeaveCalendar();
                                }
                                else
                                {
                                    FillEmployeeLeaveBalance();
                                }
                                LoadEmployeeAttendanceRecordStandard();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;

                                oForm.PaneLevel = 2;
                            }
                            else if (Program.systemInfo.FlgRetailRules1 == true)
                            {
                                if (Program.systemInfo.FlgLeaveCalendar == true)
                                {
                                    FillEmployeeLeaveBalanceLeaveCalendar();
                                }
                                else
                                {
                                    FillEmployeeLeaveBalance();
                                }
                                LoadEmployeeAttendanceRecordISMMFM();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;
                            }
                            else if (Convert.ToBoolean(Program.systemInfo.FlgArabic) && CompanyName.ToLower() == "joseph")
                            {
                                ProcessingAttendance();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;
                            }
                            else
                            {
                                //if (Program.systemInfo.FlgLeaveCalendar == true)
                                //{
                                //    FillEmployeeLeaveBalanceLeaveCalendar();
                                //}
                                //else
                                //{
                                //    FillEmployeeLeaveBalance();
                                //}
                                LoadEmployeeAttendanceRecordStandard();
                                //LoadEmployeeAttendanceRecordOrderByDate();
                                IgrdAttendance.Visible = true;
                                IbtnID.Visible = false;
                                IbtnId2.Visible = false;
                                IbtnBack.Visible = true;
                                IbtnSave.Visible = true;
                                IbtnPost.Visible = true;
                                IbtnIAR.Visible = true;
                                IbtnEAR.Visible = true;
                                oForm.PaneLevel = 2;
                            }
                        }
                    }
                    else
                    {
                        oApplication.StatusBar.SetText("No Employee Selected to process.", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    }
                }
                else
                {
                    oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("INF_AttendanceDates"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                }

            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: HideFirstVisibleNext Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void HideNextVisibleFirst()
        {
            try
            {
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                IbtnID.Visible = true;
                IbtnId2.Visible = true;
                oForm.PaneLevel = 1;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: HideNextVisibleFirst Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private string CalculateOverTimeHours(string ShiftHours, string WorkedHours)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(WorkedHours))
                {
                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = WorkedHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOverTimeHoursSSL(string ShiftHours, string WorkedHours)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(WorkedHours))
                {
                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = WorkedHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                            ////AR
                            //int TotalMints = 0;
                            //int Totalhrs = 0;
                            //int hrs = 0;
                            //int Min = 0;

                            //TimeSpan OT = TimeCalculate(strOverTimeHours);
                            //TimeSpan t01 = TimeCalculate("00:00");
                            //totalOverTime = OT.Add(t01);
                            //Totalhrs = (totalOverTime.Hours);
                            //TotalMints = (totalOverTime.Minutes);
                            //if (TotalMints <= OTLimit)
                            //{
                            //    Min = 0;
                            //    hrs = Totalhrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            //if (TotalMints >= 45)
                            //{
                            //    TotalMints = 60;
                            //}
                            //if (TotalMints == 60)
                            //{
                            //    hrs = TotalMints / 60;
                            //    Min = TotalMints % 60;
                            //    hrs = Totalhrs + hrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            ////End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOverTimeISM(string pTimeIn, string pTimeOut, string pShiftIn, string pShiftOut, string pBufferIn, string pBufferOut, string pShiftHours, Boolean flgShiftOverlap, Boolean flgActualOverlap)
        {
            string retOTValue = "00:00";
            try
            {
                int InBuffer = 0, OutBuffer = 0, InOverTime = 0, OutOverTime = 0;
                int ValidInOT = 0, ValidOutOT = 0, FullOT = 0, intShiftHours = 0, OutBufferTime = 0;
                string tempTime = "00:00";
                InBuffer = CalculateTimeDifference(pShiftIn, pBufferIn);
                OutBuffer = CalculateTimeDifference(pBufferOut, pShiftOut);
                InOverTime = CalculateTimeDifference(pShiftIn, pTimeIn);
                OutOverTime = CalculateTimeDifferenceOverLap(pShiftOut, pTimeOut, flgShiftOverlap, flgActualOverlap);
                intShiftHours = CalculateTimeDifference(tempTime, pShiftHours);
                //if (OutOverTime > OutBuffer)
                //{
                //    OutBufferTime = OutBuffer + intShiftHours;
                //}
                //else
                //{
                //    OutBufferTime = OutBuffer - intShiftHours;
                //}


                if (InOverTime > InBuffer && InOverTime > 0)
                {
                    ValidInOT = InOverTime;
                }
                if (OutOverTime > 30 && OutOverTime > OutBuffer && OutOverTime > 0)
                {
                    ValidOutOT = OutOverTime;
                }
                if (ValidInOT > 0 || ValidOutOT > 0)
                {
                    FullOT = ValidInOT + ValidOutOT;
                }
                if (FullOT > 0)
                {
                    int hour = FullOT / 60;
                    int min = FullOT % 60;
                    retOTValue = hour.ToString().PadLeft(2, '0') + ":" + min.ToString().PadLeft(2, '0');
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
            return retOTValue;
        }

        private string CalculateOverTimeHoursSSL(string ShiftTimeIn, string ShiftTimeOut, string TimeIn, string TimeOut, string ShiftHours, string WorkedHours)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(WorkedHours))
                {
                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = WorkedHours.Split(':');
                    string[] ShiftTimeInArray = ShiftTimeIn.Split(':');
                    string[] TimeInArray = TimeIn.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2 || ShiftTimeInArray.Length != 2 || TimeInArray.Length != 2)
                    {
                        return "00:00";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("CalculateOverTimeHoursSSL" + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOverTimeHoursMEPL(string ShiftHours, string WorkedHours)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(WorkedHours))
                {
                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = WorkedHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private Decimal CalculatestrToDecimalTime(string WorkHours)
        {
            Decimal retValue = 0.0M;
            try
            {
                decimal temp = 0, hours = 0, minutes = 0;
                string[] value = new string[2];
                value = WorkHours.Split(':');
                string strhours = value[0];
                string strminutes = value[1];
                temp = Convert.ToDecimal(strminutes);
                if (temp != 0)
                {
                    minutes = temp / 60;
                }
                if (!string.IsNullOrEmpty(strhours))
                {
                    hours = Convert.ToDecimal(strhours);
                }
                retValue = hours + minutes;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatestrToDecimalTime Exception Error : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                retValue = 0.0M;
            }
            return retValue;
        }

        private string IFOutOvertimeApplicable(string ActualTimeOut, string BufferOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            DurinMin += 1440;
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicableSSL(string ActualTimeOut, string BufferOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            DurinMin += 1440;
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //strOverTimeHours = "00:00";
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int hrs = 0;
                            int Min = 0;

                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");
                            totalOverTime = OT.Add(t01);
                            Totalhrs = (totalOverTime.Hours);
                            TotalMints = (totalOverTime.Minutes);
                            if (TotalMints >= 45)
                            {
                                TotalMints = 60;
                            }
                            if (TotalMints == 60)
                            {
                                hrs = TotalMints / 60;
                                Min = TotalMints % 60;
                                hrs = Totalhrs + hrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            if (TotalMints <= 45)
                            {

                                Min = 0;
                                hrs = Totalhrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            //End

                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int hrs = 0;
                            int Min = 0;

                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");
                            totalOverTime = OT.Add(t01);
                            Totalhrs = (totalOverTime.Hours);
                            TotalMints = (totalOverTime.Minutes);
                            if (TotalMints >= 45)
                            {
                                TotalMints = 60;
                            }
                            if (TotalMints == 60)
                            {
                                hrs = TotalMints / 60;
                                Min = TotalMints % 60;
                                hrs = Totalhrs + hrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            if (TotalMints <= 45)
                            {

                                Min = 0;
                                hrs = Totalhrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            //End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicableMEPL(string ActualTimeOut, string BufferOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            DurinMin += 1440;
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //strOverTimeHours = "00:00";
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicable(string ActualTimeOut, string BufferOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            if (!flgOutOverLap)
                            {
                                DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else
                            {
                                strOverTimeHours = "00:00";
                            }
                            //strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicableStandrad(string ActualTimeOut, string BufferOutTime, bool flgOutOverLap, bool flgActualTimeOut)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int intbuffertime = 0, intTimeout = 0;
                        if (flgOutOverLap)
                        {
                            intbuffertime = (((int.Parse(StartDate[0]) * 60) + (24 * 60)) + int.Parse(StartDate[1]));
                        }
                        else
                        {
                            intbuffertime = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        }
                        if (flgActualTimeOut)
                        {
                            intTimeout = (((int.Parse(EndDate[0]) * 60) + (24 * 60)) + int.Parse(EndDate[1]));
                        }
                        else
                        {
                            intTimeout = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        }
                        //int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        int DurinMin = intTimeout - intbuffertime;
                        if (DurinMin < 0)
                        {
                            if (!flgOutOverLap)
                            {
                                DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else
                            {
                                strOverTimeHours = "00:00";
                            }
                            //strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicableSSL(string ActualTimeOut, string BufferOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            if (!flgOutOverLap)
                            {
                                DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                if (HrsDur > 0 && MinDur >= 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                else if (HrsDur == 0 && MinDur >= 0)
                                {
                                    if (MinDur < OTLimit)
                                    {
                                        HrsDur = 0;
                                        MinDur = 0;
                                        strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                    }
                                    if (MinDur >= OTLimit && HrsDur == 0)
                                    {
                                        strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                    }
                                }
                                ////AR
                                //int TotalMints = 0;
                                //int Totalhrs = 0;
                                //int hrs = 0;
                                //int Min = 0;

                                //TimeSpan OT = TimeCalculate(strOverTimeHours);
                                //TimeSpan t01 = TimeCalculate("00:00");
                                //totalOverTime = OT.Add(t01);
                                //Totalhrs = (totalOverTime.Hours);
                                //TotalMints = (totalOverTime.Minutes);
                                //if (TotalMints >= 45)
                                //{
                                //    TotalMints = 60;
                                //}
                                //if (TotalMints == 60)
                                //{
                                //    hrs = TotalMints / 60;
                                //    Min = TotalMints % 60;
                                //    hrs = Totalhrs + hrs;
                                //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                                //}
                                //if (TotalMints <= 45)
                                //{

                                //    Min = 0;
                                //    hrs = Totalhrs;
                                //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                                //}
                                ////End
                            }
                            else
                            {
                                strOverTimeHours = "00:00";
                            }
                            //strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int hrs = 0;
                            int Min = 0;

                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");
                            totalOverTime = OT.Add(t01);
                            Totalhrs = (totalOverTime.Hours);
                            TotalMints = (totalOverTime.Minutes);
                            if (TotalMints >= 45)
                            {
                                TotalMints = 60;
                            }
                            if (TotalMints == 60)
                            {
                                hrs = TotalMints / 60;
                                Min = TotalMints % 60;
                                hrs = Totalhrs + hrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            if (TotalMints <= 45)
                            {

                                Min = 0;
                                hrs = Totalhrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            //End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFOutOvertimeApplicableMEPL(string ActualTimeOut, string BufferOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    string[] StartDate = BufferOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {

                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            if (!flgOutOverLap)
                            {
                                DurinMin += 1440;
                                int HrsDur = DurinMin / 60;
                                int MinDur = DurinMin % 60;
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                //AR
                                int TotalMints = 0;
                                int Totalhrs = 0;
                                int remainder = 1;
                                // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                TimeSpan OT = TimeCalculate(strOverTimeHours);
                                TimeSpan t01 = TimeCalculate("00:00");

                                totalOverTime = OT.Add(t01);

                                Totalhrs = (totalOverTime.Hours);
                                // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                                TotalMints = (totalOverTime.Minutes);
                                //TotalMints = TotalMints == null ? 1 : TotalMints;
                                if (TotalMints == 0)
                                {
                                    TotalMints = +1;
                                }
                                if (TotalMints > 30)
                                {
                                    remainder = OTunit % Convert.ToInt32(TotalMints);
                                }
                                else if (TotalMints == 30)
                                {
                                    remainder = 30;
                                }
                                else
                                {
                                    remainder = OTunit % Convert.ToInt32(TotalMints);
                                    remainder = remainder % 2;
                                }

                                if (remainder == 1)
                                {
                                    remainder = 0;
                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                }

                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                //END
                            }
                            else
                            {
                                strOverTimeHours = "00:00";
                            }
                            //strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicable(string ActualTimeOut, string shiftOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                    double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                    if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                    {
                        decPunchTimeOUT = decPunchTimeOUT + 24;
                        //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                        //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                        double hours = Math.Floor(decPunchTimeOUT);
                        double minutes = (decPunchTimeOUT - hours) * 60;

                        int H = (int)Math.Floor(hours);
                        int M = (int)Math.Round(minutes);
                        ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                    }

                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicableSSL(string ActualTimeOut, string shiftOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                    double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                    if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                    {
                        decPunchTimeOUT = decPunchTimeOUT + 24;
                        //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                        //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                        double hours = Math.Floor(decPunchTimeOUT);
                        double minutes = (decPunchTimeOUT - hours) * 60;

                        int H = (int)Math.Floor(hours);
                        int M = (int)Math.Round(minutes);
                        ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                    }

                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int hrs = 0;
                            int Min = 0;

                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");
                            totalOverTime = OT.Add(t01);
                            Totalhrs = (totalOverTime.Hours);
                            TotalMints = (totalOverTime.Minutes);
                            if (TotalMints >= 45)
                            {
                                TotalMints = 60;
                            }
                            if (TotalMints == 60)
                            {
                                hrs = TotalMints / 60;
                                Min = TotalMints % 60;
                                hrs = Totalhrs + hrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            if (TotalMints <= 45)
                            {

                                Min = 0;
                                hrs = Totalhrs;
                                strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            }
                            //End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicableMEPL(string ActualTimeOut, string shiftOutTime)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                    double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                    if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                    {
                        decPunchTimeOUT = decPunchTimeOUT + 24;
                        //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                        //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                        double hours = Math.Floor(decPunchTimeOUT);
                        double minutes = (decPunchTimeOUT - hours) * 60;

                        int H = (int)Math.Floor(hours);
                        int M = (int)Math.Round(minutes);
                        ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                        //AR
                        int TotalMints = 0;
                        int Totalhrs = 0;
                        int remainder = 1;
                        // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                        TimeSpan OT = TimeCalculate(ActualTimeOut);
                        TimeSpan t01 = TimeCalculate("00:00");

                        totalOverTime = OT.Add(t01);

                        Totalhrs = (totalOverTime.Hours);
                        // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                        TotalMints = (totalOverTime.Minutes);
                        //TotalMints = TotalMints == null ? 1 : TotalMints;
                        if (TotalMints == 0)
                        {
                            TotalMints = +1;
                        }
                        if (TotalMints > 30)
                        {
                            remainder = OTunit % Convert.ToInt32(TotalMints);
                        }
                        else if (TotalMints == 30)
                        {
                            remainder = 30;
                        }
                        else
                        {
                            remainder = OTunit % Convert.ToInt32(TotalMints);
                            remainder = remainder % 2;
                        }

                        if (remainder == 1)
                        {
                            remainder = 0;
                            ActualTimeOut = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                        }

                        ActualTimeOut = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                        //END
                    }

                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicable(string ActualTimeOut, string shiftOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    if (!flgOutOverLap)
                    {
                        //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                        double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                        if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                        {
                            decPunchTimeOUT = decPunchTimeOUT + 24;
                            //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                            //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                            double hours = Math.Floor(decPunchTimeOUT);
                            double minutes = (decPunchTimeOUT - hours) * 60;

                            int H = (int)Math.Floor(hours);
                            int M = (int)Math.Round(minutes);
                            ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                        }
                    }
                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicableSSL(string ActualTimeOut, string shiftOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    if (!flgOutOverLap)
                    {
                        //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                        double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                        if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                        {
                            decPunchTimeOUT = decPunchTimeOUT + 24;
                            //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                            //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                            double hours = Math.Floor(decPunchTimeOUT);
                            double minutes = (decPunchTimeOUT - hours) * 60;

                            int H = (int)Math.Floor(hours);
                            int M = (int)Math.Round(minutes);
                            ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                        }
                    }
                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));


                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                            ////AR
                            //int TotalMints = 0;
                            //int Totalhrs = 0;
                            //int hrs = 0;
                            //int Min = 0;

                            ////TimeSpan OT = TimeCalculate(strOverTimeHours);
                            ////TimeSpan t01 = TimeCalculate("00:00");
                            ////totalOverTime = OT.Add(t01);
                            ////Totalhrs = (totalOverTime.Hours);
                            ////TotalMints = (totalOverTime.Minutes);
                            //Totalhrs = HrsDur;
                            //TotalMints = MinDur;
                            //if (TotalMints >= 45)
                            //{
                            //    TotalMints = 60;
                            //}
                            //if (TotalMints == 60)
                            //{
                            //    hrs = TotalMints / 60;
                            //    Min = TotalMints % 60;
                            //    hrs = Totalhrs + hrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            //if (TotalMints <= 45)
                            //{

                            //    Min = 0;
                            //    hrs = Totalhrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            ////End




                        }

                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOutOvertimeApplicableMEPL(string ActualTimeOut, string shiftOutTime, bool flgOutOverLap)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(shiftOutTime) && !string.IsNullOrEmpty(ActualTimeOut))
                {
                    if (!flgOutOverLap)
                    {
                        //decimal decPunchTimeOUT = ConvertTimeToDecimal(ActualTimeOut);
                        double decPunchTimeOUT = TimeCalculate(ActualTimeOut).TotalHours;
                        if (decPunchTimeOUT >= 0 && decPunchTimeOUT < 7.52)
                        {
                            decPunchTimeOUT = decPunchTimeOUT + 24;
                            //decimal hours = Math.Floor(decPunchTimeOUT); //take integral part
                            //decimal minutes = (decPunchTimeOUT - hours) * 60.0M;
                            double hours = Math.Floor(decPunchTimeOUT);
                            double minutes = (decPunchTimeOUT - hours) * 60;

                            int H = (int)Math.Floor(hours);
                            int M = (int)Math.Round(minutes);
                            ActualTimeOut = H.ToString().PadLeft(2, '0') + ":" + M.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(ActualTimeOut);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                ActualTimeOut = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            ActualTimeOut = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                    string[] StartDate = shiftOutTime.Split(':');
                    string[] EndDate = ActualTimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFInOvertimeApplicable(string BufferInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = BufferInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFInOvertimeApplicableSSl(string BufferInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = BufferInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                            ////AR
                            //int TotalMints = 0;
                            //int Totalhrs = 0;
                            //int hrs = 0;
                            //int Min = 0;

                            //TimeSpan OT = TimeCalculate(strOverTimeHours);
                            //TimeSpan t01 = TimeCalculate("00:00");
                            //totalOverTime = OT.Add(t01);
                            //Totalhrs = (totalOverTime.Hours);
                            //TotalMints = (totalOverTime.Minutes);
                            //if (TotalMints >= 45)
                            //{
                            //    TotalMints = 60;
                            //}
                            //if (TotalMints == 60)
                            //{
                            //    hrs = TotalMints / 60;
                            //    Min = TotalMints % 60;
                            //    hrs = Totalhrs + hrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            //if (TotalMints <= 45)
                            //{

                            //    Min = 0;
                            //    hrs = Totalhrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            ////End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string IFInOvertimeApplicableMEPL(string BufferInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(BufferInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = BufferInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateInOvertimeApplicable(string ShiftInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = ShiftInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateInOvertimeApplicableSSL(string ShiftInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = ShiftInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                            ////AR
                            //int TotalMints = 0;
                            //int Totalhrs = 0;
                            //int hrs = 0;
                            //int Min = 0;

                            //TimeSpan OT = TimeCalculate(strOverTimeHours);
                            //TimeSpan t01 = TimeCalculate("00:00");
                            //totalOverTime = OT.Add(t01);
                            //Totalhrs = (totalOverTime.Hours);
                            //TotalMints = (totalOverTime.Minutes);
                            //if (TotalMints >= 45)
                            //{
                            //    TotalMints = 60;
                            //}
                            //if (TotalMints == 60)
                            //{
                            //    hrs = TotalMints / 60;
                            //    Min = TotalMints % 60;
                            //    hrs = Totalhrs + hrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            //if (TotalMints <= 45)
                            //{

                            //    Min = 0;
                            //    hrs = Totalhrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            ////End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateInOvertimeApplicableMEPL(string ShiftInTime, string ActualTimeIn)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(ShiftInTime) && !string.IsNullOrEmpty(ActualTimeIn))
                {
                    string[] StartDate = ActualTimeIn.Split(':');
                    string[] EndDate = ShiftInTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            //AR
                            int TotalMints = 0;
                            int Totalhrs = 0;
                            int remainder = 1;
                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private decimal CalculateHourTimeCount(string ActualOTHours)
        {
            decimal OtHours = 0;
            try
            {
                if (!string.IsNullOrEmpty(ActualOTHours))
                {
                    string[] EndDate = ActualOTHours.Split(':');
                    if (EndDate.Length != 2)
                    {
                        return 0;
                    }
                    else
                    {
                        double decPunchTimeOUT = TimeCalculate(ActualOTHours).TotalHours;
                        string strOtHours = string.Format("{0:0.00}", decPunchTimeOUT);
                        OtHours = Convert.ToDecimal(strOtHours);

                        //int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));                    
                        //OtHours = DurinMin / 60;
                        //decimal min = DurinMin % 60;
                        //min = decimal.Multiply(0.01M, min);
                        //OtHours = OtHours + min;
                    }
                }
                return OtHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal CalculateStringTime(string strHours)
        {
            decimal retValue = 0M;
            try
            {
                if (!string.IsNullOrEmpty(strHours))
                {
                    string[] arrStrHours = strHours.Split(':');
                    if (arrStrHours.Length != 2)
                    {
                        retValue = 0m;
                    }
                    else
                    {
                        retValue = (Convert.ToDecimal(arrStrHours[0]) * 60) + (Convert.ToDecimal(arrStrHours[1]));
                    }
                }
            }
            catch (Exception ex)
            {
                retValue = 0m;
            }
            return retValue;
        }

        private decimal CalculateHourTimeCountSlabs(string ActualOTHours)
        {
            decimal OtHours = 0;
            try
            {
                if (!string.IsNullOrEmpty(ActualOTHours))
                {
                    string[] arrTime = ActualOTHours.Split(':');
                    if (arrTime.Length != 2)
                    {
                        return 0;
                    }
                    else
                    {
                        //double decPunchTimeOUT = TimeCalculate(ActualOTHours).TotalHours;
                        //string strOtHours = string.Format("{0:0.00}", decPunchTimeOUT);
                        //OtHours = Convert.ToDecimal(strOtHours);

                        int durinmin = ((int.Parse(arrTime[0]) * 60) + int.Parse(arrTime[1]));
                        OtHours = durinmin / 60;
                        decimal min = durinmin % 60;
                        min = decimal.Multiply(0.01m, min);
                        OtHours = OtHours + min;
                    }
                }
                return OtHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private string CalculateLateInMinutes(string ShiftTime, string TimIn)
        {
            string strLateInHours = "";
            try
            {
                if (ShiftTime == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (TimIn == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (!string.IsNullOrEmpty(ShiftTime) && !string.IsNullOrEmpty(TimIn))
                {
                    string[] StartDate = ShiftTime.Split(':');
                    string[] EndDate = TimIn.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strLateInHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strLateInHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLateInHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private string CalculateLateInMinutesStandard(string ShiftTime, string TimeIn, bool flgShiftOut, bool flgActualOut)
        {
            string strLateInHours = "";
            try
            {
                if (ShiftTime == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (TimeIn == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (!string.IsNullOrEmpty(ShiftTime) && !string.IsNullOrEmpty(TimeIn))
                {
                    string[] StartDate = ShiftTime.Split(':');
                    string[] EndDate = TimeIn.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = 0;
                        if (flgActualOut)
                        {
                            DurinMin = (((int.Parse(EndDate[0]) * 60) + (24 * 60)) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        }
                        else
                        {
                            DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) - ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        }
                        if (DurinMin < 0)
                        {
                            strLateInHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strLateInHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLateInHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private string CalculateLeaveHours(string ShiftHours, string ActualWorkingHours)
        {
            string strLeaveHours = "";
            try
            {
                if (ShiftHours == "00:00")
                {
                    return "00:00";
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(ActualWorkingHours))
                {
                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = ActualWorkingHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            strLeaveHours = "00:00";
                        }
                        else
                        {
                            int ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strLeaveHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLeaveHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private string CalculateLeaveHoursOTAdjustment(string ShiftHours, string WorkHours, string OTHours, string LateIn, string LateOut, out string AdjustedOTHour)
        {
            string strLeaveHours = ""; AdjustedOTHour = "";
            try
            {
                if (string.IsNullOrEmpty(ShiftHours) || string.IsNullOrEmpty(WorkHours))
                {
                    //if (ShiftHours == "00:00") return "00:00";
                    //if (WorkHours == "00:00") return "00:00";
                    //if (OTHours == "00:00") return "00:00";
                    return "00:00";
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(WorkHours))
                {
                    if (string.IsNullOrEmpty(OTHours)) OTHours = "00:00";
                    string[] arrShiftHours = ShiftHours.Split(':');
                    string[] arrWorkHours = WorkHours.Split(':');
                    string[] arrOTHours = OTHours.Split(':');
                    string[] arrLateIn = LateIn.Split(':');
                    string[] arrLateOut = LateOut.Split(':');


                    if (arrShiftHours.Length != 2 || arrWorkHours.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DedMin = (int.Parse(arrOTHours[0]) * 60) + int.Parse(arrOTHours[1]) - ((int.Parse(arrLateIn[0]) * 60) + int.Parse(arrLateIn[1])) - ((int.Parse(arrLateOut[0]) * 60) + int.Parse(arrLateOut[1]));
                        if (DedMin < 0)
                        {
                            strLeaveHours = "00:00";
                            AdjustedOTHour = OTHours;
                            DedMin = Math.Abs(DedMin);
                            int HrsDur = DedMin / 60;
                            int MinDur = DedMin % 60;
                            strLeaveHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                        else if (DedMin > 0)
                        {
                            int HrsDur = DedMin / 60;
                            int MinDur = DedMin % 60;
                            AdjustedOTHour = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            strLeaveHours = "00:00";
                        }
                    }
                }
                return strLeaveHours;
            }
            catch (Exception ex)
            {
                MsgError("CalculateLeaveHoursOTAdjustment : " + ex.Message);
                return "00:00";
            }

        }

        private string CalculateOverTimeHoursInandOutTime(string InTimeOT, string OutTimeOT)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(InTimeOT) && !string.IsNullOrEmpty(OutTimeOT))
                {
                    string[] StartDate = InTimeOT.Split(':');
                    string[] EndDate = OutTimeOT.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) + ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;

                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOverTimeHoursInandOutTimeSSL(string InTimeOT, string OutTimeOT)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(InTimeOT) && !string.IsNullOrEmpty(OutTimeOT))
                {
                    string[] StartDate = InTimeOT.Split(':');
                    string[] EndDate = OutTimeOT.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) + ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;

                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            if (HrsDur > 0 && MinDur >= 0)
                            {
                                strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                            }
                            else if (HrsDur == 0 && MinDur >= 0)
                            {
                                if (MinDur < OTLimit)
                                {
                                    HrsDur = 0;
                                    MinDur = 0;
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                                if (MinDur >= OTLimit && HrsDur == 0)
                                {
                                    strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                                }
                            }
                            ////AR
                            //int TotalMints = 0;
                            //int Totalhrs = 0;
                            //int hrs = 0;
                            //int Min = 0;

                            ////TimeSpan OT = TimeCalculate(strOverTimeHours);
                            ////TimeSpan t01 = TimeCalculate("00:00");
                            ////totalOverTime = OT.Add(t01);
                            ////Totalhrs = (totalOverTime.Hours);
                            ////TotalMints = (totalOverTime.Minutes);
                            //Totalhrs = HrsDur;
                            //TotalMints = MinDur;
                            //if (TotalMints >= 45)
                            //{
                            //    TotalMints = 60;
                            //}
                            //if (TotalMints == 60)
                            //{
                            //    hrs = TotalMints / 60;
                            //    Min = TotalMints % 60;
                            //    hrs = Totalhrs + hrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            //if (TotalMints <= 45)
                            //{

                            //    Min = 0;
                            //    hrs = Totalhrs;
                            //    strOverTimeHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", Min);
                            //}
                            ////End
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private string CalculateOverTimeHoursInandOutTimeMEPL(string InTimeOT, string OutTimeOT)
        {
            string strOverTimeHours = "";
            try
            {
                if (!string.IsNullOrEmpty(InTimeOT) && !string.IsNullOrEmpty(OutTimeOT))
                {
                    string[] StartDate = InTimeOT.Split(':');
                    string[] EndDate = OutTimeOT.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1])) + ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strOverTimeHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;


                            strOverTimeHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');

                            //AR

                            // strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                            TimeSpan OT = TimeCalculate(strOverTimeHours);
                            TimeSpan t01 = TimeCalculate("00:00");

                            totalOverTime = OT.Add(t01);

                            Totalhrs = (totalOverTime.Hours);
                            // Totalhrs = Convert.ToInt32((totalOverTime.TotalHours));
                            TotalMints = (totalOverTime.Minutes);
                            //TotalMints = TotalMints == null ? 1 : TotalMints;
                            if (TotalMints == 0)
                            {
                                TotalMints = +1;
                            }
                            if (TotalMints > 30)
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                            }
                            else if (TotalMints == 30)
                            {
                                remainder = 30;
                            }
                            else
                            {
                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                remainder = remainder % 2;
                            }

                            if (remainder == 1)
                            {
                                remainder = 0;
                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            }

                            //strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                            //END
                        }
                    }
                }
                return strOverTimeHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }
        }

        private bool IsBufferApplicable(string BufferTime, string DueTime)
        {
            string strLeaveHours = "";
            bool BufferApplicable = false;
            try
            {
                if (BufferTime == "00:00")
                {
                    return BufferApplicable;
                }
                if (!string.IsNullOrEmpty(BufferTime) && !string.IsNullOrEmpty(DueTime))
                {
                    string[] StartDate = DueTime.Split(':');
                    string[] EndDate = BufferTime.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin <= 0)
                        {
                            //strLeaveHours = "00:00";
                            BufferApplicable = false;
                        }
                        else
                        {
                            strLeaveHours = DueTime;
                            BufferApplicable = true;
                        }

                    }
                }
                return BufferApplicable;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return false;
            }

        }

        private void OpenNewSearchFormForm()
        {
            try
            {
                Program.EmpID = "";
                string comName = "MstSearch";
                //Program.sqlString = "empMaster";
                Program.sqlString = "empPick";
                string strLang = "ln_English";
                try
                {
                    oApplication.Forms.Item("frm_" + comName).Select();
                }
                catch
                {
                    //this.oForm.Visible = false;
                    Type oFormType = Type.GetType("ACHR.Screen." + "frm_" + comName);
                    Screen.HRMSBaseForm objScr = ((Screen.HRMSBaseForm)oFormType.GetConstructor(System.Type.EmptyTypes).Invoke(null));
                    objScr.CreateForm(oApplication, "ACHR.XMLScreen." + strLang + ".xml_" + comName + ".xml", oCompany, "frm_" + comName);
                    //this.oForm.Visible = true;

                }

            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void OpenNewSearchFormTo()
        {
            try
            {
                Program.EmpID = "";
                string comName = "MstSearch";
                //Program.sqlString = "empMaster";
                Program.sqlString = "empPick";
                string strLang = "ln_English";
                try
                {
                    oApplication.Forms.Item("frm_" + comName).Select();
                }
                catch
                {
                    //this.oForm.Visible = false;
                    Type oFormType = Type.GetType("ACHR.Screen." + "frm_" + comName);
                    Screen.HRMSBaseForm objScr = ((Screen.HRMSBaseForm)oFormType.GetConstructor(System.Type.EmptyTypes).Invoke(null));
                    objScr.CreateForm(oApplication, "ACHR.XMLScreen." + strLang + ".xml_" + comName + ".xml", oCompany, "frm_" + comName);
                    //this.oForm.Visible = true;

                }

            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SetEmpValues()
        {
            try
            {
                if (!string.IsNullOrEmpty(Program.FromEmpId))
                {
                    txtEmpFrom.Value = Program.FromEmpId;
                }
                if (!string.IsNullOrEmpty(Program.ToEmpId))
                {
                    txtEmpTo.Value = Program.ToEmpId;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void selectAllProcess()
        {
            try
            {

                oForm.Freeze(true);
                SAPbouiCOM.Column col = grdEmployees.Columns.Item("isSel");

                if (col.TitleObject.Caption == "X")
                {
                    for (int i = 0; i < dtEmployees.Rows.Count; i++)
                    {

                        dtEmployees.SetValue("isSel", i, "N");
                        col.TitleObject.Caption = "";
                    }
                }
                else
                {
                    for (int i = 0; i < dtEmployees.Rows.Count; i++)
                    {
                        dtEmployees.SetValue("isSel", i, "Y");
                        col.TitleObject.Caption = "X";
                    }
                }
                grdEmployees.LoadFromDataSource();
                oForm.Freeze(false);
            }

            catch (Exception ex)
            {
                oApplication.SetStatusBarMessage("Error occured " + ex.Message);
            }
        }

        private string CalculateHalfShiftHours(string ShiftHours)
        {
            string strLeaveHours = "";
            try
            {
                if (ShiftHours == "00:00")
                {
                    return "00:00";
                }
                if (!string.IsNullOrEmpty(ShiftHours))
                {
                    string[] StartDate = ShiftHours.Split(':');

                    if (StartDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        if (DurinMin < 0)
                        {
                            strLeaveHours = "00:00";
                        }
                        else
                        {
                            int ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            int decShiftMin = ShiftMin / 2;

                            int HrsDur = decShiftMin / 60;
                            int MinDur = decShiftMin % 60;
                            strLeaveHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLeaveHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private decimal CalculateLeaveCountOld(string ShiftHours, string ActualWorkingHours)
        {
            decimal LeaveCountX = 0.0M;
            try
            {
                if (ShiftHours == "00:00")
                {
                    return LeaveCountX;
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(ActualWorkingHours))
                {

                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = ActualWorkingHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            //strLeaveHours = "00:00";
                        }
                        else
                        {
                            int ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            decimal ShiftHoursX = ShiftMin / 60;
                            decimal LeaveHours = DurinMin / 60;
                            decimal Count = LeaveHours / ShiftHoursX;
                            decimal countMin = LeaveHours % ShiftHoursX;
                            countMin = decimal.Multiply(0.01M, countMin);
                            Count = Count + countMin;
                            LeaveCountX = Count;
                        }

                    }
                }
                return LeaveCountX;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal CalculateLeaveCount(string ShiftHours, string ActualWorkingHours)
        {
            decimal LeaveCountX = 0.0M;
            try
            {
                if (ShiftHours == "00:00")
                {
                    return LeaveCountX;
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(ActualWorkingHours))
                {

                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = ActualWorkingHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            //strLeaveHours = "00:00";
                        }
                        else
                        {
                            int ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            decimal ShiftHoursX = ShiftMin / 60;
                            decimal LeaveHours = DurinMin / 60;
                            decimal Count = LeaveHours / ShiftHoursX;
                            decimal countMin = LeaveHours % ShiftHoursX;
                            countMin = decimal.Multiply(0.01M, countMin);
                            Count = Count + countMin;
                            LeaveCountX = Count;
                        }

                    }
                }
                return LeaveCountX;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal CalculateLeaveCountForShiftDeductions(string ShiftHours, string ActualWorkingHours)
        {
            decimal LeaveCountX = 0.0M;
            try
            {
                if (ShiftHours == "00:00")
                {
                    return LeaveCountX;
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(ActualWorkingHours))
                {

                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = ActualWorkingHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            //strLeaveHours = "00:00";
                        }
                        else
                        {
                            decimal ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            decimal ShiftHoursX = ShiftMin / 60M;
                            decimal LeaveHours = Convert.ToDecimal(DurinMin) / 60M;
                            decimal Count = LeaveHours / ShiftHoursX;
                            decimal countMin = LeaveHours % ShiftHoursX;
                            countMin = decimal.Multiply(0.01M, countMin);
                            Count = Count + countMin;
                            LeaveCountX = Count;
                        }

                    }
                }
                return LeaveCountX;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal CalculateLeaveCountMEPL(string ShiftHours, string ActualWorkingHours)
        {
            decimal LeaveCountX = 0.0M;
            try
            {
                if (ShiftHours == "00:00")
                {
                    return LeaveCountX;
                }
                if (!string.IsNullOrEmpty(ShiftHours) && !string.IsNullOrEmpty(ActualWorkingHours))
                {

                    string[] StartDate = ShiftHours.Split(':');
                    string[] EndDate = ActualWorkingHours.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            //strLeaveHours = "00:00";
                        }
                        else
                        {
                            int ShiftMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                            decimal ShiftHoursX = ShiftMin / 60;
                            decimal LeaveHours = DurinMin / 60;
                            decimal Count = LeaveHours / ShiftHoursX;
                            //decimal countMin = LeaveHours % ShiftHoursX;
                            //countMin = decimal.Multiply(0.01M, countMin);
                            //Count = Count + countMin;
                            LeaveCountX = Count;
                        }

                    }
                }
                return LeaveCountX;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private string CalculateEarlyOutMinutes(string ShiftTime, string TimeOut)
        {

            string strLateInHours = "";
            try
            {
                if (ShiftTime == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (TimeOut == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (!string.IsNullOrEmpty(ShiftTime) && !string.IsNullOrEmpty(TimeOut))
                {
                    string[] StartDate = ShiftTime.Split(':');
                    string[] EndDate = TimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int ShiftTimeDur = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        int OutTimeDur = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        int DurinMin = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        if (DurinMin < 0)
                        {
                            strLateInHours = "00:00";
                            //int DurinMinLessThanZero = 0;
                            //if (OutTimeDur > ShiftTimeDur)
                            //{
                            //    DurinMinLessThanZero = ((int.Parse(StartDate[0]) * 60 + 24 * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                            //}
                            //else
                            //{
                            //    DurinMinLessThanZero = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1])) - ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                            //}
                            //int HrsDur = DurinMinLessThanZero / 60;
                            //int MinDur = DurinMinLessThanZero % 60;
                            //strLateInHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strLateInHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLateInHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private string CalculateEarlyOutMinutesISM(string ShiftTime, string TimeOut, Boolean flgShiftOverlap, Boolean flgActualOverlap)
        {
            string strLateInHours = "";
            try
            {
                if (ShiftTime == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (TimeOut == "00:00")
                {
                    strLateInHours = "00:00";
                    return strLateInHours;
                }
                if (!string.IsNullOrEmpty(ShiftTime) && !string.IsNullOrEmpty(TimeOut))
                {
                    string[] StartDate = ShiftTime.Split(':');
                    string[] EndDate = TimeOut.Split(':');
                    if (StartDate.Length != 2 || EndDate.Length != 2)
                    {
                        //return "";
                    }
                    else
                    {
                        int ShiftTimeDurantion = 0, OutTimeDur = 0, DurinMin = 0;
                        if (flgShiftOverlap)
                        {
                            ShiftTimeDurantion = (((int.Parse(StartDate[0]) * 60) + (24 * 60)) + int.Parse(StartDate[1]));
                        }
                        else
                        {
                            ShiftTimeDurantion = ((int.Parse(StartDate[0]) * 60) + int.Parse(StartDate[1]));
                        }
                        if (flgActualOverlap)
                        {
                            OutTimeDur = (((int.Parse(EndDate[0]) * 60) + (24 * 60)) + int.Parse(EndDate[1]));
                        }
                        else
                        {
                            OutTimeDur = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        }

                        DurinMin = ShiftTimeDurantion - OutTimeDur;
                        if (DurinMin < 0)
                        {
                            strLateInHours = "00:00";
                        }
                        else
                        {
                            int HrsDur = DurinMin / 60;
                            int MinDur = DurinMin % 60;
                            strLateInHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                        }

                    }
                }
                return strLateInHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return "";
            }

        }

        private string GetAttendanceStatus_NEW(string LateInMinutes, string EarlyOutMinutes)
        {
            try
            {
                string strStatus = "";
                if (!string.IsNullOrEmpty(LateInMinutes) && LateInMinutes != "00:00")
                {
                    strStatus = strStatus + " LateIn";
                }
                if (!string.IsNullOrEmpty(EarlyOutMinutes) && EarlyOutMinutes != "00:00")
                {
                    strStatus = strStatus + " Early Out";
                }
                return strStatus;
            }
            catch (Exception Ex)
            {
                return "";
            }

        }

        private decimal ConvertTimeToDecimal(string ActualHours)
        {
            decimal OtHours = 0;
            try
            {
                if (!string.IsNullOrEmpty(ActualHours))
                {
                    string[] EndDate = ActualHours.Split(':');
                    if (EndDate.Length != 2)
                    {
                        return 0;
                    }
                    else
                    {
                        double decPunchTimeOUT = TimeCalculate(ActualHours).TotalHours;
                        OtHours = Convert.ToDecimal(decPunchTimeOUT);
                        //int DurinMin = ((int.Parse(EndDate[0]) * 60) + int.Parse(EndDate[1]));
                        //OtHours = DurinMin / 60;
                        //decimal min = DurinMin % 60;
                        //min = decimal.Multiply(0.01M, min);
                        //OtHours = OtHours + min;
                    }
                }
                return OtHours;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText(ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal setRowAmntOld(MstEmployee emp, decimal Overtimehours, string Periodid, string strOverTimeType)
        {
            short daysOT = 0;
            decimal HoursOT = 0;
            decimal fixValue = 0.0M;
            decimal daysinYear = 0.0M;
            decimal amount = 0.0M;
            decimal baseValue = 0.00M;
            decimal value = 0.00M;

            short days = (short)emp.CfgPayrollDefination.WorkDays;
            decimal workhours = (decimal)emp.CfgPayrollDefination.WorkHours;
            decimal monthHours = Convert.ToDecimal(30.00 * 8.00);
            try
            {
                string code = strOverTimeType; //cb.Value; //Convert.ToString(dtOT.GetValue("Code", rowNum));
                if (string.IsNullOrEmpty(code) || code == "-1")
                {
                    oApplication.StatusBar.SetText("Please select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return 0;
                }
                if (!string.IsNullOrEmpty(code))
                {
                    var OTTYpe = dbHrPayroll.MstOverTime.Where(o => o.ID.ToString() == code).FirstOrDefault();
                    if (OTTYpe != null)
                    {
                        value = Convert.ToDecimal(OTTYpe.Value.Value);
                        daysOT = string.IsNullOrEmpty(OTTYpe.Days) ? Convert.ToInt16(0) : Convert.ToInt16(OTTYpe.Days);
                        HoursOT = string.IsNullOrEmpty(OTTYpe.Hours) ? 0 : Convert.ToDecimal(OTTYpe.Hours);
                        fixValue = OTTYpe.FixValue == null ? 0 : Convert.ToDecimal(OTTYpe.FixValue);
                        daysinYear = OTTYpe.DaysinYear == null ? 0 : Convert.ToDecimal(OTTYpe.DaysinYear);
                        if (OTTYpe.ValueType == "POB")
                        {
                            baseValue = (decimal)emp.BasicSalary;
                        }
                        if (OTTYpe.ValueType == "POG")
                        {
                            baseValue = ds.getEmpGross(emp);
                        }
                        if (OTTYpe.ValueType == "Fix")
                        {
                            baseValue = OTTYpe.Value.Value;
                        }

                    }
                }
                if (HoursOT > 0)
                {
                    workhours = HoursOT;
                }
                if (daysOT > 0)
                {
                    days = daysOT;
                }
                if (daysOT <= 0)
                {
                    string PayrollPeriod = Periodid;// cbPeriod.Value.Trim();
                    if (!string.IsNullOrEmpty(PayrollPeriod))
                    {
                        CfgPeriodDates LeaveFromPeriod = dbHrPayroll.CfgPeriodDates.Where(p => p.ID == Convert.ToInt32(PayrollPeriod)).FirstOrDefault();
                        if (LeaveFromPeriod != null)
                        {
                            if (days < 1)
                            {
                                days = Convert.ToInt16(System.DateTime.DaysInMonth(LeaveFromPeriod.StartDate.Value.Date.Year, LeaveFromPeriod.StartDate.Value.Date.Month));
                            }
                            else if (days < 1)
                            {
                                days = Convert.ToInt16(System.DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month));
                            }
                        }
                    }
                }
                monthHours = Convert.ToDecimal(days * workhours);
                decimal hours = Overtimehours; //Convert.ToDecimal(dtOT.GetValue("Hours", rowNum));
                decimal baseAmoun = baseValue;  //Convert.ToDecimal(dtOT.GetValue("BaseVal", rowNum));
                decimal Val = value; //Convert.ToDecimal(dtOT.GetValue("Value", rowNum));

                if (fixValue > 0 && daysinYear > 0)
                {
                    baseAmoun = baseAmoun + fixValue;
                    baseAmoun = baseAmoun * 12;
                    baseAmoun = baseAmoun / daysinYear;
                    baseAmoun = baseAmoun / workhours;
                    //baseAmoun = baseAmoun * 2;  //2 Tiem of Noraml Working Hours
                    amount = ((baseAmoun) * Val / 100) * hours;
                    //amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                }
                else
                {
                    amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                }
                //dtOT.SetValue("Amount", rowNum, amount.ToString());

                return amount;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error in Function setRowAmnt.Error is  " + ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal setRowAmnt(MstEmployee emp, decimal Overtimehours, string Periodid, string strOverTimeType)
        {
            short daysOT = 0;
            decimal HoursOT = 0;
            decimal fixValue = 0.0M;
            decimal daysinYear = 0.0M;
            decimal amount = 0.0M, formulaAmount = 0; ;
            decimal baseValue = 0.00M;
            decimal value = 0.00M;
            Boolean flgFormula = false;
            int otLineID = 0;
            short days = (short)emp.CfgPayrollDefination.WorkDays;
            decimal workhours = (decimal)emp.CfgPayrollDefination.WorkHours;
            decimal monthHours = Convert.ToDecimal(30.00 * 8.00);
            //decimal monthHours = Convert.ToDecimal(days * workhours);
            try
            {
                string code = strOverTimeType; //cb.Value; //Convert.ToString(dtOT.GetValue("Code", rowNum));
                if (string.IsNullOrEmpty(code) || code == "-1")
                {
                    oApplication.StatusBar.SetText("Please select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return 0;
                }
                if (!string.IsNullOrEmpty(code))
                {
                    var OTTYpe = dbHrPayroll.MstOverTime.Where(o => o.ID.ToString() == code).FirstOrDefault();
                    if (OTTYpe != null)
                    {
                        value = Convert.ToDecimal(OTTYpe.Value.Value);
                        daysOT = string.IsNullOrEmpty(OTTYpe.Days) ? Convert.ToInt16(0) : Convert.ToInt16(OTTYpe.Days);
                        HoursOT = string.IsNullOrEmpty(OTTYpe.Hours) ? 0 : Convert.ToDecimal(OTTYpe.Hours);
                        fixValue = OTTYpe.FixValue == null ? 0 : Convert.ToDecimal(OTTYpe.FixValue);
                        daysinYear = OTTYpe.DaysinYear == null ? 0 : Convert.ToDecimal(OTTYpe.DaysinYear);
                        flgFormula = OTTYpe.FlgFormula == null ? false : Convert.ToBoolean(OTTYpe.FlgFormula);
                        if (OTTYpe.ValueType == "POB")
                        {
                            baseValue = (decimal)emp.BasicSalary;
                        }
                        if (OTTYpe.ValueType == "POG")
                        {
                            baseValue = ds.getEmpGross(emp);
                        }
                        if (OTTYpe.ValueType == "FIX")
                        {
                            baseValue = OTTYpe.Value.Value;
                        }
                        otLineID = Convert.ToInt32(OTTYpe.ID);
                        SelectedEmp = emp.EmpID;
                    }

                    if (HoursOT > 0)
                    {
                        workhours = HoursOT;
                    }
                    if (daysOT > 0)
                    {
                        days = daysOT;
                    }
                    if (daysOT <= 0)
                    {
                        string PayrollPeriod = Periodid;// cbPeriod.Value.Trim();
                        if (!string.IsNullOrEmpty(PayrollPeriod))
                        {
                            CfgPeriodDates LeaveFromPeriod = dbHrPayroll.CfgPeriodDates.Where(p => p.ID == Convert.ToInt32(PayrollPeriod)).FirstOrDefault();
                            if (LeaveFromPeriod != null)
                            {
                                if (days < 1)
                                {
                                    days = Convert.ToInt16(System.DateTime.DaysInMonth(LeaveFromPeriod.StartDate.Value.Date.Year, LeaveFromPeriod.StartDate.Value.Date.Month));
                                }
                                else if (days < 1)
                                {
                                    days = Convert.ToInt16(System.DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month));
                                }
                            }
                        }
                    }
                    monthHours = Convert.ToDecimal(days * workhours);
                    decimal hours = Overtimehours; //Convert.ToDecimal(dtOT.GetValue("Hours", rowNum));
                    decimal baseAmoun = baseValue;  //Convert.ToDecimal(dtOT.GetValue("BaseVal", rowNum));
                    decimal Val = value; //Convert.ToDecimal(dtOT.GetValue("Value", rowNum));
                    if (flgFormula)
                    {
                        formulaAmount = ParseFormula(otLineID);
                    }
                    if (fixValue > 0 && daysinYear > 0)
                    {
                        baseAmoun = baseAmoun + fixValue;
                        baseAmoun = baseAmoun * 12;
                        baseAmoun = baseAmoun / daysinYear;
                        baseAmoun = baseAmoun / workhours;
                        decimal baseAmountFormula = 0;
                        baseAmountFormula = baseAmountFormula * 12;
                        baseAmountFormula = baseAmountFormula / daysinYear;
                        baseAmountFormula = baseAmountFormula / workhours;
                        amount = ((baseAmoun * Val / 100) + baseAmountFormula) * hours;
                        //baseAmoun = baseAmoun * 2;  //2 Tiem of Noraml Working Hours
                        //amount = ((baseAmoun) * Val / 100) * hours;
                        //amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                    }
                    else
                    {
                        //amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                        if (OTTYpe.ValueType == "FIX")
                        {
                            amount = baseValue * hours;
                        }
                        else
                        {
                            amount = (((baseAmoun / monthHours) * Val / 100) + (formulaAmount / monthHours)) * hours;
                        }
                    }
                    //dtOT.SetValue("Amount", rowNum, amount.ToString());
                }
                return amount;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error in Function setRowAmnt.Error is  " + ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }

        private decimal setRowAmnt(MstEmployee emp, decimal Overtimehours, string Periodid, string strOverTimeType, decimal Duration)
        {
            short daysOT = 0;
            decimal HoursOT = 0;
            decimal fixValue = 0.0M;
            decimal daysinYear = 0.0M;
            decimal amount = 0.0M, formulaAmount = 0; ;
            decimal baseValue = 0.00M;
            decimal value = 0.00M;
            Boolean flgFormula = false;
            int otLineID = 0;
            short days = (short)emp.CfgPayrollDefination.WorkDays;
            decimal workhours = (decimal)emp.CfgPayrollDefination.WorkHours;
            decimal monthHours = Convert.ToDecimal(30.00 * 8.00);
            //decimal monthHours = Convert.ToDecimal(days * workhours);
            try
            {
                string code = strOverTimeType; //cb.Value; //Convert.ToString(dtOT.GetValue("Code", rowNum));
                if (string.IsNullOrEmpty(code) || code == "-1")
                {
                    oApplication.StatusBar.SetText("Please select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return 0;
                }
                if (!string.IsNullOrEmpty(code))
                {
                    var OTTYpe = dbHrPayroll.MstOverTime.Where(o => o.ID.ToString() == code).FirstOrDefault();
                    if (OTTYpe != null)
                    {
                        value = Convert.ToDecimal(OTTYpe.Value.Value);
                        daysOT = string.IsNullOrEmpty(OTTYpe.Days) ? Convert.ToInt16(0) : Convert.ToInt16(OTTYpe.Days);
                        HoursOT = string.IsNullOrEmpty(OTTYpe.Hours) ? 0 : Convert.ToDecimal(OTTYpe.Hours);
                        fixValue = OTTYpe.FixValue == null ? 0 : Convert.ToDecimal(OTTYpe.FixValue);
                        daysinYear = OTTYpe.DaysinYear == null ? 0 : Convert.ToDecimal(OTTYpe.DaysinYear);
                        flgFormula = OTTYpe.FlgFormula == null ? false : Convert.ToBoolean(OTTYpe.FlgFormula);
                        if (OTTYpe.ValueType == "POB")
                        {
                            baseValue = (decimal)emp.BasicSalary;
                        }
                        if (OTTYpe.ValueType == "POG")
                        {
                            baseValue = ds.getEmpGross(emp);
                        }
                        if (OTTYpe.ValueType == "FIX")
                        {
                            baseValue = OTTYpe.Value.Value;
                        }
                        otLineID = Convert.ToInt32(OTTYpe.ID);
                        SelectedEmp = emp.EmpID;
                    }

                    if (HoursOT > 0)
                    {
                        workhours = HoursOT;
                    }
                    else
                    {
                        workhours = Duration;
                    }
                    if (daysOT > 0)
                    {
                        days = daysOT;
                    }
                    if (daysOT <= 0)
                    {
                        string PayrollPeriod = Periodid;// cbPeriod.Value.Trim();
                        if (!string.IsNullOrEmpty(PayrollPeriod))
                        {
                            CfgPeriodDates LeaveFromPeriod = dbHrPayroll.CfgPeriodDates.Where(p => p.ID == Convert.ToInt32(PayrollPeriod)).FirstOrDefault();
                            if (LeaveFromPeriod != null)
                            {
                                if (days < 1)
                                {
                                    days = Convert.ToInt16(System.DateTime.DaysInMonth(LeaveFromPeriod.StartDate.Value.Date.Year, LeaveFromPeriod.StartDate.Value.Date.Month));
                                }
                                else if (days < 1)
                                {
                                    days = Convert.ToInt16(System.DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month));
                                }
                            }
                        }
                    }
                    monthHours = Convert.ToDecimal(days * workhours);
                    decimal hours = Overtimehours; //Convert.ToDecimal(dtOT.GetValue("Hours", rowNum));
                    decimal baseAmoun = baseValue;  //Convert.ToDecimal(dtOT.GetValue("BaseVal", rowNum));
                    decimal Val = value; //Convert.ToDecimal(dtOT.GetValue("Value", rowNum));
                    if (flgFormula)
                    {
                        formulaAmount = ParseFormula(otLineID);
                    }
                    if (fixValue > 0 && daysinYear > 0)
                    {
                        baseAmoun = baseAmoun + fixValue;
                        baseAmoun = baseAmoun * 12;
                        baseAmoun = baseAmoun / daysinYear;
                        baseAmoun = baseAmoun / workhours;
                        decimal baseAmountFormula = 0;
                        baseAmountFormula = baseAmountFormula * 12;
                        baseAmountFormula = baseAmountFormula / daysinYear;
                        baseAmountFormula = baseAmountFormula / workhours;
                        amount = ((baseAmoun * Val / 100) + baseAmountFormula) * hours;
                        //baseAmoun = baseAmoun * 2;  //2 Tiem of Noraml Working Hours
                        //amount = ((baseAmoun) * Val / 100) * hours;
                        //amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                    }
                    else
                    {
                        //amount = ((baseAmoun / monthHours) * Val / 100) * hours;
                        if (OTTYpe.ValueType == "FIX")
                        {
                            amount = baseValue * hours;
                        }
                        else
                        {
                            amount = (((baseAmoun / monthHours) * Val / 100) + (formulaAmount / monthHours)) * hours;
                        }
                    }
                    //dtOT.SetValue("Amount", rowNum, amount.ToString());
                }
                return amount;
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error in Function setRowAmnt.Error is  " + ex.Message + " Trace: " + ex.StackTrace, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                return 0;
            }

        }
        #region Formula Base OverTime
        private decimal ParseFormula(int OTMasterID)
        {
            decimal retValue = 0;
            try
            {
                MstOverTime otMaster = (from a in dbHrPayroll.MstOverTime where a.ID == OTMasterID select a).FirstOrDefault();
                if (otMaster == null) return 0;
                string otExpression = otMaster.Expression;
                oListOfElementAmount.Clear();
                GetComponents(otExpression);
                if (oListOfElementAmount.Count > 0)
                {
                    foreach (var OneElement in oListOfElementAmount)
                    {
                        otExpression = otExpression.Replace(OneElement.ElementName, OneElement.ElementAmount.ToString());
                    }
                    //oApplication.StatusBar.SetText("Expresion : " + otExpression, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Success);
                    Program.objHrmsUI.logger.LogEntry(Program.objHrmsUI.AppVersion, "EmpID : " + SelectedEmp + " Expression : " + otExpression);
                    System.Data.DataTable dt = new System.Data.DataTable();
                    retValue = Convert.ToDecimal(dt.Compute(otExpression, ""));
                }
            }
            catch (Exception ex)
            {
                Program.objHrmsUI.logger.LogException(Program.objHrmsUI.AppVersion, ex);
            }
            return retValue;
        }

        private void GetComponents(string pexpression)
        {
            try
            {
                int charCount = 0;
                string pString = "";
                List<string> oElementList = new List<string>();
                foreach (char OneChar in pexpression)
                {
                    if ((OneChar >= 65 && OneChar <= 90) || (OneChar >= 97 && OneChar <= 122) || (OneChar >= 48 && OneChar <= 57))
                    {
                        pString += Convert.ToString(OneChar);
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(pString))
                        {
                            oElementList.Add(pString);
                            pString = "";
                        }
                    }
                    charCount++;
                }
                Program.objHrmsUI.logger.LogEntry(Program.objHrmsUI.AppVersion, "Paramet List : " + oElementList.Count.ToString());
                if (oElementList.Count > 0)
                {
                    MstEmployee oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == SelectedEmp select a).FirstOrDefault();
                    foreach (string OneComponent in oElementList)
                    {
                        if (OneComponent == "BS" || OneComponent == "GS")
                        {
                            Program.ElementList oBj = new Program.ElementList();
                            oBj.ElementName = OneComponent;
                            if (OneComponent == "BS")
                            {
                                oBj.ElementAmount = Convert.ToDecimal(oEmp.BasicSalary);
                            }
                            else if (OneComponent == "GS")
                            {
                                oBj.ElementAmount = ds.getEmpGross(oEmp, 1, 0);
                            }
                            oListOfElementAmount.Add(oBj);
                            continue;
                        }
                        else
                        {
                            #region Element Calculations
                            TrnsEmployeeElementDetail oEle = (from a in dbHrPayroll.TrnsEmployeeElementDetail
                                                              where a.TrnsEmployeeElement.EmployeeId == oEmp.ID && a.MstElements.ElementName == OneComponent
                                                              select a).FirstOrDefault();
                            if (oEle != null)
                            {
                                if (oEle.ElementType == "Ear")
                                {
                                    decimal elementamount = 0;
                                    decimal elementvalue = 0;
                                    decimal empGross = ds.getEmpGross(oEmp, 1, 0);
                                    string ValueType = oEle.ValueType.Trim();
                                    elementvalue = Convert.ToDecimal(oEle.Value);
                                    if (ValueType == "POB")
                                    {
                                        elementamount = Convert.ToDecimal(elementvalue) / 100 * (decimal)oEmp.BasicSalary;
                                    }
                                    if (ValueType == "POG")
                                    {
                                        elementamount = Convert.ToDecimal(elementvalue) / 100 * empGross;
                                    }
                                    if (ValueType == "FIX")
                                    {
                                        elementamount = elementvalue;
                                    }
                                    Program.ElementList oBj = new Program.ElementList();
                                    oBj.ElementName = OneComponent;
                                    oBj.ElementAmount = elementamount;
                                    oListOfElementAmount.Add(oBj);
                                    continue;
                                }
                                else if (oEle.ElementType == "Ded")
                                {
                                    decimal elementamount = 0;
                                    decimal elementvalue = 0;
                                    decimal empGross = ds.getEmpGross(oEmp, 1, 0);
                                    string ValueType = oEle.ValueType.Trim();
                                    elementvalue = Convert.ToDecimal(oEle.Value);
                                    if (ValueType == "POB")
                                    {
                                        elementamount = Convert.ToDecimal(elementvalue) / 100 * (decimal)oEmp.BasicSalary;
                                    }
                                    if (ValueType == "POG")
                                    {
                                        elementamount = Convert.ToDecimal(elementvalue) / 100 * empGross;
                                    }
                                    if (ValueType == "FIX")
                                    {
                                        elementamount = elementvalue;
                                    }
                                    Program.ElementList oBj = new Program.ElementList();
                                    oBj.ElementName = OneComponent;
                                    oBj.ElementAmount = (-1) * elementamount;
                                    oListOfElementAmount.Add(oBj);
                                    continue;
                                }
                            }
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Program.objHrmsUI.logger.LogException(Program.objHrmsUI.AppVersion, ex);
            }
        }
        #endregion

        private void SaveAttendanceRecordStandard()
        {
            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "", strRemarks = "";
            string strLeaveCount = "";
            grdAttendance.FlushToDataSource();

            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeOut missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                        //strTimeIn = "00:00";
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeIn missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                        //strTimeOut = "00:00";
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strRemarks = (grdAttendance.Columns.Item(clRemarks.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            oOldVal.Remarks = strRemarks;

                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1" && strOverTimeType != "")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        else
                        {
                            oOldVal.OTHour = "00:00";
                            oOldVal.OTType = null;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                            oOldVal.FlgIsNewLeave = isNewLeave;
                            oOldVal.LeaveDedRule = strLeaveDedRule;
                        }
                        else
                        {
                            oOldVal.LeaveType = null;
                            oOldVal.LeaveHour = "00:00";
                            oOldVal.LeaveCount = 0m;
                            oOldVal.FlgIsNewLeave = false;
                            oOldVal.LeaveDedRule = strLeaveDedRule;
                        }

                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                    }
                    dbHrPayroll.SubmitChanges();
                }

                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();


                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();

                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;
                        }
                        dbHrPayroll.SubmitChanges();
                    }

                }
                MsgSuccess("Record saved successfully.");
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                logger(Ex);
            }
        }

        private void SaveAttendanceRecordOriginal()
        {
            // grdEmployees.Columns.Item("LH").Cells.Item("23").Click();

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "";
            string strLeaveCount = "";
            grdAttendance.FlushToDataSource();
            TrnsEmployeeOvertime EmpOverTime;


            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    isNewLeave = false;
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();


                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();




                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        else
                        {
                            oOldVal.OTHour = "00:00";
                            oOldVal.OTType = null;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        }
                        else
                        {
                            oOldVal.LeaveType = null;
                            oOldVal.LeaveHour = null;
                            oOldVal.LeaveCount = null;
                            strLeaveType = "-1";
                            strLeaveHours = null;
                        }

                        oOldVal.LeaveDedRule = strLeaveDedRule;
                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        //oOldVal.LeaveType = Convert.ToInt32(strLeaveType);
                        //oOldVal.LeaveHour = strLeaveHours;
                        //oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        oOldVal.FlgIsNewLeave = isNewLeave;
                    }


                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.PunchedDate >= startDate && tempat.PunchedDate <= EndDate && tempat.FlgProcessed == false).ToList();
                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;

                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);


                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordPost()
        {
            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            TrnsEmployeeOvertime EmpOverTime;
            int LeaveDocNum = 0;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;
            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    using (dbHRMS oDBObject = new dbHRMS(Program.ConStrHRMS))
                    {
                        recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                        isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                        strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        intEmpID = oDBObject.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                        strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                        if (recId > 0)
                        {

                            TrnsAttendanceRegister oOldVal = oDBObject.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                            if (isNewLeave)
                            {
                                string leaveUnits = "";
                                LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);
                                if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                                {
                                    var LeaveType = oDBObject.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                    if (LeaveType == null)
                                    {
                                        oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        return;
                                    }
                                    var CheckBalance = (from a in oEmployeeLeaveCollection
                                                        where a.EmployeeCode == strEmpCode
                                                        && a.LeaveCode == LeaveType.Code
                                                        select a).FirstOrDefault();
                                    if (CheckBalance == null)
                                    {
                                        oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    //Chechking for Previus Leaves for Same day
                                    #region Leave Request
                                    var ChechkForLeave = oDBObject.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                    if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                    {

                                        //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                        TrnsLeavesRequest AlreadyEnteredLeave = (from a in oDBObject.TrnsLeavesRequest
                                                                                 where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                                 select a).FirstOrDefault();
                                        if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.UnitsID == "Day")
                                        {
                                            oApplication.StatusBar.SetText("Leave Already Entered For Date " + leaveDate.Date.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(LeaveCountTotal))
                                            {
                                                if (LeaveCountTotal == "0.5")
                                                {
                                                    leaveUnits = "HalfDay";
                                                }
                                                else
                                                {
                                                    leaveUnits = "Day";
                                                }
                                            }
                                            //int? intIdt = oDBObject.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                            //intIdt = intIdt == null ? 1 : intIdt + 1;

                                            TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                            objLeaveReq.EmpID = intEmpID;
                                            objLeaveReq.Series = -1;
                                            objLeaveReq.EmpName = strEmpName.Trim();
                                            //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                            objLeaveReq.DocNum = LeaveDocNum;
                                            LeaveDocNum++;
                                            objLeaveReq.DocDate = DateTime.Now;
                                            objLeaveReq.LeaveFrom = leaveDate;
                                            objLeaveReq.LeaveTo = leaveDate;
                                            objLeaveReq.UnitsID = leaveUnits;
                                            objLeaveReq.UnitsLOVType = "LeaveUnits";
                                            objLeaveReq.FlgPaid = false;
                                            objLeaveReq.FlgVisa = false;
                                            objLeaveReq.FlgMedical = false;
                                            objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                            if (LeaveType != null)
                                            {
                                                objLeaveReq.LeaveType = LeaveType.ID;
                                            }
                                            objLeaveReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                            objLeaveReq.CreateDate = DateTime.Now;
                                            objLeaveReq.CreatedBy = oCompany.UserName;

                                            oDBObject.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            if (LeaveCountTotal == "0.5")
                                            {
                                                leaveUnits = "HalfDay";
                                            }
                                            else
                                            {
                                                leaveUnits = "Day";
                                            }
                                        }
                                        //int? intIdt = oDBObject.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                        //intIdt = intIdt == null ? 1 : intIdt + 1;

                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                        objLeaveReq.EmpID = intEmpID;
                                        objLeaveReq.Series = -1;
                                        objLeaveReq.EmpName = strEmpName.Trim();
                                        //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                        //objLeaveReq.DocNum = intIdt;
                                        objLeaveReq.DocNum = LeaveDocNum;
                                        LeaveDocNum++;
                                        objLeaveReq.DocDate = DateTime.Now;
                                        objLeaveReq.LeaveFrom = leaveDate;
                                        objLeaveReq.LeaveTo = leaveDate;
                                        objLeaveReq.UnitsID = leaveUnits;
                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                        objLeaveReq.FlgMedical = false;
                                        objLeaveReq.FlgPaid = false;
                                        objLeaveReq.FlgVisa = false;
                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        if (LeaveType != null)
                                        {
                                            objLeaveReq.LeaveType = LeaveType.ID;
                                        }
                                        objLeaveReq.LeaveDescription = LeaveType.Description;//strLeaveType;
                                        objLeaveReq.CreateDate = DateTime.Now;
                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                        oDBObject.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);

                                    }
                                }
                            }
                            #endregion
                            //dbHrPayroll.SubmitChanges();
                            #region OverTime
                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                            {
                                //decimal monthHours = Convert.ToDecimal(30.00 * 8.00);                            
                                //MstEmployee emp = (from p in dbHrPayroll.MstEmployee where p.EmpID == strEmpCode select p).Single();
                                //decimal baseAmoun = emp.BasicSalary.Value;
                                //short days = (short)emp.CfgPayrollDefination.WorkDays;
                                //CfgPeriodDates payrollPeriod = (from p in dbHrPayroll.CfgPeriodDates where p.ID == oOldVal.PeriodID select p).Single();
                                //if (emp.CfgPayrollDefination.WorkDays > 0)
                                //{
                                //    monthHours = Convert.ToDecimal(emp.CfgPayrollDefination.WorkDays * emp.CfgPayrollDefination.WorkHours);
                                //}
                                //else
                                //{
                                //    if (payrollPeriod != null)
                                //    {
                                //        if (days < 1)
                                //        {
                                //            double dblDays=(payrollPeriod.EndDate.Value.Date - payrollPeriod.StartDate.Value.Date).TotalDays + 1;
                                //            days = Convert.ToInt16(dblDays);                                       
                                //        }
                                //        else if (days < 1)
                                //        {
                                //            days = Convert.ToInt16(System.DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month));
                                //        }
                                //        short workhours = (short)emp.CfgPayrollDefination.WorkHours;
                                //        monthHours = Convert.ToDecimal(days * workhours);
                                //    }
                                //}
                                decimal OtCount = 0;
                                //Enter OverTime Hours
                                if (string.IsNullOrEmpty(strOverTimeType))
                                {
                                    oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    return;
                                }
                                else
                                {

                                    decimal amount = 0;
                                    decimal workhours = 0;
                                    short daysOT = 0;
                                    decimal HoursOT = 0;
                                    //Insert Child Record
                                    var OverTime = oDBObject.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                    if (OverTime != null)
                                    {
                                        var EmpRecord = oDBObject.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                        OtCount = CalculateHourTimeCount(strOverTimeHours);
                                        amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                        string strAmount = string.Format("{0:0.00}", amount);
                                        bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                        if (!flgOtApplicable)
                                        {
                                            oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            continue;
                                        }
                                        if (EmpRecord != null)
                                        {
                                            EmpOverTime = oDBObject.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                            if (EmpOverTime == null)
                                            {
                                                EmpOverTime = new TrnsEmployeeOvertime();
                                                oDBObject.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                            }
                                            TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                            EmpOverTime.EmployeeId = intEmpID;
                                            EmpOverTime.Period = oOldVal.PeriodID;
                                            EmpOverTime.CreateDate = DateTime.Now;
                                            EmpOverTime.UserId = oCompany.UserName;
                                            EmpOverTimeDet.OvertimeID = OverTime.ID;
                                            EmpOverTimeDet.ValueType = OverTime.ValueType;
                                            EmpOverTimeDet.OTValue = OverTime.Value;
                                            EmpOverTimeDet.OTDate = leaveDate;
                                            EmpOverTimeDet.FromTime = "";
                                            EmpOverTimeDet.ToTime = "";
                                            EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                            EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                            EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                            EmpOverTimeDet.FlgActive = true;
                                            EmpOverTimeDet.CreateDate = DateTime.Now;
                                            EmpOverTimeDet.UserId = oCompany.UserName;
                                            EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                            //dbHrPayroll.SubmitChanges();
                                            oDBObject.SubmitChanges();
                                        }
                                    }

                                }
                            }
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                            {
                                oOldVal.OTHour = strOverTimeHours.Trim();
                                oOldVal.OTType = oDBObject.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                            }
                            if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                            {
                                oOldVal.LeaveType = oDBObject.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                                oOldVal.LeaveHour = strLeaveHours.Trim();
                            }
                            oOldVal.UpdateDate = DateTime.Now;
                            oOldVal.Processed = true;
                            oOldVal.FlgPosted = false;
                            oOldVal.UpdatedBy = oCompany.UserName;
                            #endregion
                            //Following Code Delete TempAttendance Records After Process.
                            #region Record Delete TrnsTempAttendance
                            //var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                            //if (Record != null && Record.Count > 0)
                            //{
                            //    int k = 0;
                            //    foreach (var v in Record)
                            //    {
                            //        TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID).FirstOrDefault();
                            //        dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                            //        k += 1;
                            //    }
                            //}
                            var Record = (from v in oDBObject.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                            if (Record != null && Record.Count > 0)
                            {
                                int k = 0;
                                foreach (var v in Record)
                                {
                                    TrnsTempAttendance oOldTemp = oDBObject.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                    //dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                    oDBObject.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                    k += 1;
                                }
                            }
                            #endregion


                        }

                        oDBObject.SubmitChanges();
                    }

                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);

                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordSpell()
        {
            // grdEmployees.Columns.Item("LH").Cells.Item("23").Click();

            bool isNewLeave = false;
            int recId = 0;
            string strReportingTime = "";
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "";
            string strLeaveCount = "", strTourHrs = "", strTotalHrs = "", strStandardHrs = "", strOTAdjustment = "";
            grdAttendance.FlushToDataSource();
            TrnsEmployeeOvertime EmpOverTime;


            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    isNewLeave = false;
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strReportingTime = (grdAttendance.Columns.Item("Rtime").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTourHrs = (grdAttendance.Columns.Item("AdjHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTotalHrs = (grdAttendance.Columns.Item("TotalHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strStandardHrs = (grdAttendance.Columns.Item("StandHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOTAdjustment = (grdAttendance.Columns.Item("OTAdjt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();


                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            oOldVal.TourHours = strTourHrs.Trim();
                            oOldVal.TotalWorkingHours = strTotalHrs.Trim();
                            oOldVal.StandardPaidHours = strStandardHrs.Trim();
                            oOldVal.ReportingTime = strReportingTime.Trim();
                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OvertimeAdjustment = strOTAdjustment.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        }
                        else
                        {
                            strLeaveType = "-1";
                            strLeaveHours = null;
                        }

                        oOldVal.LeaveDedRule = strLeaveDedRule;
                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        //oOldVal.LeaveType = Convert.ToInt32(strLeaveType);
                        //oOldVal.LeaveHour = strLeaveHours;
                        //oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        oOldVal.FlgIsNewLeave = isNewLeave;
                    }


                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.PunchedDate >= startDate && tempat.PunchedDate <= EndDate && tempat.FlgProcessed == false).ToList();
                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;

                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);


                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordPostSpell()
        {
            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "", strTourHrs = "", strTotalHrs = "", strStandardHrs = "", strOTAdjustment = ""; ;
            TrnsEmployeeOvertime EmpOverTime;
            int LeaveDocNum = 0;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;
            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    using (dbHRMS oDBObject = new dbHRMS(Program.ConStrHRMS))
                    {
                        recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                        isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                        strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        intEmpID = oDBObject.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                        strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                        strTourHrs = (grdAttendance.Columns.Item("AdjHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strTotalHrs = (grdAttendance.Columns.Item("TotalHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strStandardHrs = (grdAttendance.Columns.Item("StandHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        strOTAdjustment = (grdAttendance.Columns.Item("OTAdjt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                        if (recId > 0)
                        {

                            TrnsAttendanceRegister oOldVal = oDBObject.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                            if (isNewLeave)
                            {
                                string leaveUnits = "";
                                LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);
                                if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                                {
                                    var LeaveType = oDBObject.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                    if (LeaveType == null)
                                    {
                                        oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        return;
                                    }
                                    //Chechking for Previus Leaves for Same day
                                    #region Leave Request
                                    var ChechkForLeave = oDBObject.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                    if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                    {

                                        //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                        TrnsLeavesRequest AlreadyEnteredLeave = (from a in oDBObject.TrnsLeavesRequest
                                                                                 where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                                 select a).FirstOrDefault();
                                        if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.UnitsID == "Day")
                                        {
                                            oApplication.StatusBar.SetText("Leave Already Entered For Date " + leaveDate.Date.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(LeaveCountTotal))
                                            {
                                                if (LeaveCountTotal == "0.5")
                                                {
                                                    leaveUnits = "HalfDay";
                                                }
                                                else
                                                {
                                                    leaveUnits = "Day";
                                                }
                                            }
                                            //int? intIdt = oDBObject.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                            //intIdt = intIdt == null ? 1 : intIdt + 1;

                                            TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                            objLeaveReq.EmpID = intEmpID;
                                            objLeaveReq.Series = -1;
                                            objLeaveReq.EmpName = strEmpName.Trim();
                                            //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                            objLeaveReq.DocNum = LeaveDocNum;
                                            LeaveDocNum++;
                                            objLeaveReq.DocDate = DateTime.Now;
                                            objLeaveReq.LeaveFrom = leaveDate;
                                            objLeaveReq.LeaveTo = leaveDate;
                                            objLeaveReq.UnitsID = leaveUnits;
                                            objLeaveReq.UnitsLOVType = "LeaveUnits";
                                            objLeaveReq.FlgPaid = false;
                                            objLeaveReq.FlgVisa = false;
                                            objLeaveReq.FlgMedical = false;
                                            objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                            if (LeaveType != null)
                                            {
                                                objLeaveReq.LeaveType = LeaveType.ID;
                                            }
                                            objLeaveReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                            objLeaveReq.CreateDate = DateTime.Now;
                                            objLeaveReq.CreatedBy = oCompany.UserName;

                                            oDBObject.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            if (LeaveCountTotal == "0.5")
                                            {
                                                leaveUnits = "HalfDay";
                                            }
                                            else
                                            {
                                                leaveUnits = "Day";
                                            }
                                        }
                                        //int? intIdt = oDBObject.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                        //intIdt = intIdt == null ? 1 : intIdt + 1;

                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                        objLeaveReq.EmpID = intEmpID;
                                        objLeaveReq.Series = -1;
                                        objLeaveReq.EmpName = strEmpName.Trim();
                                        //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                        //objLeaveReq.DocNum = intIdt;
                                        objLeaveReq.DocNum = LeaveDocNum;
                                        LeaveDocNum++;
                                        objLeaveReq.DocDate = DateTime.Now;
                                        objLeaveReq.LeaveFrom = leaveDate;
                                        objLeaveReq.LeaveTo = leaveDate;
                                        objLeaveReq.UnitsID = leaveUnits;
                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                        objLeaveReq.FlgMedical = false;
                                        objLeaveReq.FlgPaid = false;
                                        objLeaveReq.FlgVisa = false;
                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        if (LeaveType != null)
                                        {
                                            objLeaveReq.LeaveType = LeaveType.ID;
                                        }
                                        objLeaveReq.LeaveDescription = LeaveType.Description;//strLeaveType;
                                        objLeaveReq.CreateDate = DateTime.Now;
                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                        oDBObject.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);

                                    }
                                }
                            }
                            #endregion
                            //dbHrPayroll.SubmitChanges();
                            #region OverTime

                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                            {

                                decimal OtCount = 0;
                                //Enter OverTime Hours
                                if (string.IsNullOrEmpty(strOverTimeType))
                                {
                                    oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    return;
                                }
                                else
                                {

                                    decimal amount = 0;
                                    decimal workhours = 0;
                                    short daysOT = 0;
                                    decimal HoursOT = 0;
                                    //Insert Child Record
                                    var OverTime = oDBObject.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                    if (OverTime != null)
                                    {
                                        var EmpRecord = oDBObject.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                        if (!string.IsNullOrEmpty(strOTAdjustment) && strOTAdjustment != "00:00")
                                        {
                                            OtCount = CalculateHourTimeCount(strOTAdjustment);
                                        }
                                        else
                                        {
                                            OtCount = CalculateHourTimeCount(strOverTimeHours);
                                        }

                                        amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                        string strAmount = string.Format("{0:0.00}", amount);
                                        bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                        if (!flgOtApplicable)
                                        {
                                            oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            continue;
                                        }
                                        if (EmpRecord != null)
                                        {
                                            EmpOverTime = oDBObject.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                            if (EmpOverTime == null)
                                            {
                                                EmpOverTime = new TrnsEmployeeOvertime();
                                                oDBObject.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                            }
                                            TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                            EmpOverTime.EmployeeId = intEmpID;
                                            EmpOverTime.Period = oOldVal.PeriodID;
                                            EmpOverTime.CreateDate = DateTime.Now;
                                            EmpOverTime.UserId = oCompany.UserName;
                                            EmpOverTimeDet.OvertimeID = OverTime.ID;
                                            EmpOverTimeDet.ValueType = OverTime.ValueType;
                                            EmpOverTimeDet.OTValue = OverTime.Value;
                                            EmpOverTimeDet.OTDate = leaveDate;
                                            EmpOverTimeDet.FromTime = "";
                                            EmpOverTimeDet.ToTime = "";
                                            EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                            EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                            EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                            EmpOverTimeDet.FlgActive = true;
                                            EmpOverTimeDet.CreateDate = DateTime.Now;
                                            EmpOverTimeDet.UserId = oCompany.UserName;
                                            EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                            //dbHrPayroll.SubmitChanges();
                                            oDBObject.SubmitChanges();
                                        }
                                    }

                                }
                            }
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                            {
                                oOldVal.OTHour = strOverTimeHours.Trim();
                                oOldVal.OTType = oDBObject.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                            }
                            if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                            {
                                oOldVal.LeaveType = oDBObject.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                                oOldVal.LeaveHour = strLeaveHours.Trim();
                            }
                            oOldVal.UpdateDate = DateTime.Now;
                            oOldVal.Processed = true;
                            oOldVal.FlgPosted = false;
                            oOldVal.UpdatedBy = oCompany.UserName;
                            #endregion
                            //Following Code Delete TempAttendance Records After Process.
                            #region Record Delete TrnsTempAttendance
                            //var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                            //if (Record != null && Record.Count > 0)
                            //{
                            //    int k = 0;
                            //    foreach (var v in Record)
                            //    {
                            //        TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID).FirstOrDefault();
                            //        dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                            //        k += 1;
                            //    }
                            //}
                            var Record = (from v in oDBObject.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                            if (Record != null && Record.Count > 0)
                            {
                                int k = 0;
                                foreach (var v in Record)
                                {
                                    TrnsTempAttendance oOldTemp = oDBObject.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                    //dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                    oDBObject.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                    k += 1;
                                }
                            }
                            #endregion


                        }

                        oDBObject.SubmitChanges();
                    }

                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);

                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordMEPL()
        {
            // grdEmployees.Columns.Item("LH").Cells.Item("23").Click();



            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            grdAttendance.FlushToDataSource();
            TrnsEmployeeOvertime EmpOverTime;


            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();


                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();

                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();

                        }
                        else
                        {
                            strLeaveType = null;
                            strLeaveHours = null;
                        }

                        oOldVal.LeaveDedRule = strLeaveDedRule;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        //oOldVal.FlgisNewLeave = isNewLeave;

                    }


                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.PunchedDate >= startDate && tempat.PunchedDate <= EndDate && tempat.FlgProcessed == false).ToList();
                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;

                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);


                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordMEPLPost()
        {

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string Status = "";
            TrnsEmployeeOvertime EmpOverTime;

            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    Status = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    //Status
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();

                        if (isNewLeave)
                        {
                            string leaveUnits = "";
                            decimal basicsalary = 0;
                            decimal LeaveDeductedAmount = 0;
                            decimal TempLeaveCount = 0;
                            LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);

                            if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                            {
                                var LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                if (LeaveType == null)
                                {
                                    oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    return;
                                }
                                //Chechking for Previus Leaves for Same day
                                var ChechkForLeave = dbHrPayroll.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                {
                                    //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                    TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                             select a).FirstOrDefault();
                                    if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.UnitsID == "MIN")
                                    {
                                        oApplication.StatusBar.SetText("Leave Already Entered For Date " + leaveDate.Date.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            //if (LeaveCountTotal == "0.5")
                                            //{
                                            leaveUnits = "MIN";
                                            //}
                                            //else
                                            //{
                                            //    leaveUnits = "Day";
                                            //}
                                        }
                                        //int? intIdt = dbHrPayroll.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                        int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.ID);
                                        intIdt = intIdt == null ? 1 : intIdt + 1;

                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                        objLeaveReq.EmpID = intEmpID;
                                        objLeaveReq.Series = -1;
                                        objLeaveReq.EmpName = strEmpName.Trim();
                                        //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                        objLeaveReq.DocNum = intIdt;
                                        objLeaveReq.DocDate = DateTime.Now;
                                        objLeaveReq.LeaveFrom = leaveDate;
                                        objLeaveReq.LeaveTo = leaveDate;
                                        objLeaveReq.UnitsID = leaveUnits;
                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                        //objLeaveReq.DeductAmnt

                                        objLeaveReq.FlgPaid = false;
                                        objLeaveReq.FlgVisa = false;
                                        objLeaveReq.FlgMedical = false;
                                        TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;

                                        string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";
                                        //if (employeetype.ToLower().StartsWith("con") && Status == " LateIn" || Status == "Early Out")
                                        if (employeetype.ToLower().StartsWith("con") & TempLeaveCount < 1)
                                        {
                                            basicsalary = Convert.ToDecimal(oEmployee.BasicSalary);
                                            decimal decLeaveHrs = ConvertTimeToDecimal(strLeaveHours);

                                            LeaveDeductedAmount = ((basicsalary / 30) / 8) * decLeaveHrs;
                                            objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                        }

                                        objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                        if (LeaveType != null)
                                        {
                                            objLeaveReq.LeaveType = LeaveType.ID;
                                        }
                                        objLeaveReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                        objLeaveReq.CreateDate = DateTime.Now;
                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                        //Commit for test
                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(LeaveCountTotal))
                                    {
                                        //if (LeaveCountTotal == "0.5")
                                        //{
                                        leaveUnits = "MIN";
                                        //}
                                        //else
                                        //{
                                        //    leaveUnits = "Day";
                                        //}
                                    }
                                    // int? intIdt = dbHrPayroll.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                    int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.ID);
                                    intIdt = intIdt == null ? 1 : intIdt + 1;



                                    TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                    objLeaveReq.EmpID = intEmpID;
                                    objLeaveReq.Series = -1;
                                    objLeaveReq.EmpName = strEmpName.Trim();
                                    //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                    objLeaveReq.DocNum = intIdt;
                                    objLeaveReq.DocDate = DateTime.Now;
                                    objLeaveReq.LeaveFrom = leaveDate;
                                    objLeaveReq.LeaveTo = leaveDate;
                                    objLeaveReq.UnitsID = leaveUnits;
                                    objLeaveReq.UnitsLOVType = "LeaveUnits";
                                    objLeaveReq.FlgMedical = false;
                                    objLeaveReq.FlgPaid = false;
                                    objLeaveReq.FlgVisa = false;
                                    TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";
                                    //if (employeetype.ToLower().StartsWith("con") && (Status == " LateIn" || Status == "Early Out"))
                                    if (employeetype.ToLower().StartsWith("con") & TempLeaveCount < 1)
                                    {
                                        basicsalary = Convert.ToDecimal(oEmployee.BasicSalary);
                                        decimal decLeaveHrs = ConvertTimeToDecimal(strLeaveHours);

                                        LeaveDeductedAmount = ((basicsalary / 30) / 8) * decLeaveHrs;
                                        objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                    }
                                    objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                    if (LeaveType != null)
                                    {
                                        objLeaveReq.LeaveType = LeaveType.ID;
                                    }
                                    objLeaveReq.LeaveDescription = LeaveType.Description;//strLeaveType;
                                    objLeaveReq.CreateDate = DateTime.Now;
                                    objLeaveReq.CreatedBy = oCompany.UserName;
                                    //Commit for test
                                    dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                }
                            }
                        }

                        //OverTime Working Starts

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                        {
                            decimal OtCount = 0;
                            //Enter OverTime Hours
                            if (string.IsNullOrEmpty(strOverTimeType))
                            {
                                oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            else
                            {

                                decimal amount = 0;
                                decimal workhours = 0;
                                short daysOT = 0;
                                decimal HoursOT = 0;
                                //Insert Child Record
                                var OverTime = dbHrPayroll.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                if (OverTime != null)
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                    OtCount = CalculateHourTimeCount(strOverTimeHours);
                                    amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                    string strAmount = string.Format("{0:0.00}", amount);
                                    bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                    if (!flgOtApplicable)
                                    {
                                        oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    if (EmpRecord != null)
                                    {
                                        EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                        if (EmpOverTime == null)
                                        {
                                            EmpOverTime = new TrnsEmployeeOvertime();
                                            dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                        }
                                        TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                        EmpOverTime.EmployeeId = intEmpID;
                                        EmpOverTime.Period = oOldVal.PeriodID;
                                        EmpOverTime.CreateDate = DateTime.Now;
                                        EmpOverTime.UserId = oCompany.UserName;
                                        EmpOverTimeDet.OvertimeID = OverTime.ID;
                                        EmpOverTimeDet.ValueType = OverTime.ValueType;
                                        EmpOverTimeDet.OTValue = OverTime.Value;
                                        EmpOverTimeDet.OTDate = leaveDate;
                                        EmpOverTimeDet.FromTime = "";
                                        EmpOverTimeDet.ToTime = "";
                                        EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                        EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                        EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                        EmpOverTimeDet.FlgActive = true;
                                        EmpOverTimeDet.CreateDate = DateTime.Now;
                                        EmpOverTimeDet.UserId = oCompany.UserName;
                                        EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                        //Commit for test
                                        dbHrPayroll.SubmitChanges();
                                    }
                                }
                            }
                        }


                        oOldVal.TimeIn = strTimeIn.Trim();
                        oOldVal.TimeOut = strTimeOut.Trim();
                        oOldVal.WorkHour = strWorkHours.Trim();
                        //oOldVal.CalculatedUnits = Convert.ToInt32(CalculatedUnits.Trim());
                        //oOldVal.ManualUnits = Convert.ToInt32(UserUnits.Trim());
                        oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                        oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                        oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                        oOldVal.LateInMin = strLateInMinutes.Trim();
                        oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                        //oOldVal.FlgisNewLeave = isNewLeave;

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                        }
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = true;
                        oOldVal.UpdatedBy = oCompany.UserName;

                        //Following Code Delete TempAttendance Records After Process.

                        var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                        if (Record != null && Record.Count > 0)
                        {
                            int k = 0;
                            foreach (var v in Record)
                            {
                                TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                k += 1;
                            }
                        }
                    }
                    //Call new OT method
                    //Commit for test
                    dbHrPayroll.SubmitChanges();
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);

                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordSSL()
        {
            bool isNewLeave = false, flgModified = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "";
            string strLeaveCount = "";
            string strPreTimeIn = "", strPreTimeOut = "";

            grdAttendance.FlushToDataSource();
            TrnsEmployeeOvertime EmpOverTime;

            DateTime leaveDate = DateTime.MinValue;
            try
            {

                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strPreTimeIn = (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strPreTimeOut = (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    flgModified = (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            oOldVal.PreTimeIn = strPreTimeIn;
                            oOldVal.PreTimeOut = strPreTimeOut;
                            oOldVal.FlgModified = flgModified;
                            oOldVal.LeaveHour = strLeaveHours;
                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        }
                        else
                        {
                            strLeaveType = null;
                            strLeaveHours = null;
                        }

                        oOldVal.LeaveDedRule = strLeaveDedRule;
                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        oOldVal.FlgIsNewLeave = isNewLeave;
                    }


                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;

                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);


                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordBikiya()
        {
            // grdEmployees.Columns.Item("LH").Cells.Item("23").Click();

            bool isNewLeave = false, flgModified = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "";
            string strLeaveCount = "";
            string strPreTimeIn = "", strPreTimeOut = "";

            grdAttendance.FlushToDataSource();
            TrnsEmployeeOvertime EmpOverTime;


            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strPreTimeIn = (grdAttendance.Columns.Item(clPreTimeIn.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strPreTimeOut = (grdAttendance.Columns.Item(clPreTimeOut.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    flgModified = (grdAttendance.Columns.Item(clModify.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            oOldVal.PreTimeIn = strPreTimeIn;
                            oOldVal.PreTimeOut = strPreTimeOut;
                            oOldVal.FlgModified = flgModified;
                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                        }
                        else
                        {
                            strLeaveType = null;
                            strLeaveHours = null;
                        }

                        oOldVal.LeaveDedRule = strLeaveDedRule;
                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        oOldVal.FlgIsNewLeave = isNewLeave;
                    }


                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.PunchedDate >= startDate && tempat.PunchedDate <= EndDate && tempat.FlgProcessed == false).ToList();
                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;

                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);


                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();

                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordSSLPost()
        {

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            int LeaveDocNum = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string Status = "";
            string LWPDefault = "";
            TrnsEmployeeOvertime EmpOverTime;

            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            try
            {
                var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                if (Convert.ToBoolean(oAttRule.FlgWOPOverFlow))
                {
                    LWPDefault = oAttRule.LeaveTypeWOP.Trim();
                }
                else
                {
                    MsgError("Configuration of Without Pay required in Attendance Rule.");
                    return;
                }
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    Status = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    //Status
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (isNewLeave)
                        {
                            string leaveUnits = "";
                            decimal basicsalary = 0;
                            decimal LeaveDeductedAmount = 0;
                            decimal TempLeaveCount = 0;
                            LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);

                            if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                            {
                                MstLeaveType LeaveType = null;
                                LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                if (LeaveType == null)
                                {
                                    oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    return;
                                }
                                var oCalendar = (from a in dbHrPayroll.MstCalendar
                                                 where (a.FlgActive == null ? false : a.FlgActive) == true
                                                 select a).FirstOrDefault();

                                var oEmpLevType = (from a in dbHrPayroll.MstEmployeeLeaves
                                                   where a.MstEmployee.EmpID == strEmpCode
                                                   && a.LeaveType == LeaveType.ID
                                                   && a.FromDt == oCalendar.StartDate
                                                   select a).FirstOrDefault();
                                if (oEmpLevType == null)
                                {
                                    LeaveType = (from a in dbHrPayroll.MstLeaveType
                                                 where a.Code == LWPDefault
                                                 select a).FirstOrDefault();
                                }
                                //Chechking for Previus Leaves for Same day
                                var ChechkForLeave = dbHrPayroll.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                {
                                    //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                    TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                             select a).FirstOrDefault();
                                    if (AlreadyEnteredLeave != null)
                                    {
                                        MsgWarning("Leave already posted in system @ " + leaveDate.ToString("MM/dd/yyyy") + " Emp Code : " + strEmpCode);

                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            if (LeaveCountTotal == "0.5")
                                            {
                                                leaveUnits = "HalfDay";
                                            }
                                            else if (LeaveCountTotal == "1.0")
                                            {
                                                leaveUnits = "Day";
                                            }
                                            else
                                            {
                                                leaveUnits = "MIN";
                                            }
                                        }
                                        //int? intIdt = dbHrPayroll.TrnsLeavesRequest.Min(u => (int?)u.ID);
                                        //int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.ID);
                                        //intIdt = intIdt == null ? 1 : intIdt + 1;

                                        TrnsLeavesRequest oLevReq = new TrnsLeavesRequest();
                                        oLevReq.EmpID = intEmpID;
                                        oLevReq.Series = -1;
                                        oLevReq.EmpName = strEmpName.Trim();
                                        //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                        oLevReq.DocNum = LeaveDocNum;
                                        LeaveDocNum++;
                                        oLevReq.DocDate = DateTime.Now;
                                        oLevReq.LeaveFrom = leaveDate;
                                        oLevReq.LeaveTo = leaveDate;
                                        oLevReq.UnitsID = leaveUnits;
                                        oLevReq.UnitsLOVType = "LeaveUnits";
                                        oLevReq.FlgPaid = false;
                                        oLevReq.FlgVisa = false;
                                        oLevReq.FlgMedical = false;
                                        TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        oLevReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        if (LeaveType != null)
                                        {
                                            oLevReq.LeaveType = LeaveType.ID;
                                        }
                                        oLevReq.LeaveDescription = LeaveType.Description + " AP"; //strLeaveType;
                                        oLevReq.CreateDate = DateTime.Now;
                                        oLevReq.UpdateDate = DateTime.Now;
                                        oLevReq.CreatedBy = oCompany.UserName;
                                        oLevReq.UpdatedBy = oCompany.UserName;
                                        //Commit for test
                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(oLevReq);
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(LeaveCountTotal))
                                    {
                                        if (LeaveCountTotal == "0.5")
                                        {
                                            leaveUnits = "HalfDay";
                                        }
                                        else if (LeaveCountTotal == "1.0")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else
                                        {
                                            leaveUnits = "MIN";
                                        }
                                    }
                                    TrnsLeavesRequest oLevReq = new TrnsLeavesRequest();
                                    oLevReq.EmpID = intEmpID;
                                    oLevReq.Series = -1;
                                    oLevReq.EmpName = strEmpName.Trim();
                                    //objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                    oLevReq.DocNum = LeaveDocNum;
                                    LeaveDocNum++;
                                    oLevReq.DocDate = DateTime.Now;
                                    oLevReq.LeaveFrom = leaveDate;
                                    oLevReq.LeaveTo = leaveDate;
                                    oLevReq.UnitsID = leaveUnits;
                                    oLevReq.UnitsLOVType = "LeaveUnits";
                                    oLevReq.FlgPaid = false;
                                    oLevReq.FlgVisa = false;
                                    oLevReq.FlgMedical = false;
                                    TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    oLevReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    if (LeaveType != null)
                                    {
                                        oLevReq.LeaveType = LeaveType.ID;
                                    }
                                    oLevReq.LeaveDescription = LeaveType.Description + " AP"; //strLeaveType;
                                    oLevReq.CreateDate = DateTime.Now;
                                    oLevReq.UpdateDate = DateTime.Now;
                                    oLevReq.CreatedBy = oCompany.UserName;
                                    oLevReq.UpdatedBy = oCompany.UserName;
                                    //Commit for test
                                    dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(oLevReq);
                                }
                            }
                        }
                        //OverTime Working Starts
                        #region OT Disable Row Wise
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && oEmployee.OTSlabs == null)
                        {
                            decimal OtCount = 0;
                            //Enter OverTime Hours
                            if (string.IsNullOrEmpty(strOverTimeType))
                            {
                                oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            else
                            {
                                decimal amount = 0;
                                decimal workhours = 0;
                                short daysOT = 0;
                                decimal HoursOT = 0;
                                //Insert Child Record
                                var OverTime = dbHrPayroll.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                if (OverTime != null)
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                    OtCount = CalculateHourTimeCount(strOverTimeHours);
                                    amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                    string strAmount = string.Format("{0:0.00}", amount);
                                    bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                    if (!flgOtApplicable)
                                    {
                                        oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    if (EmpRecord != null)
                                    {
                                        EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                        if (EmpOverTime == null)
                                        {
                                            EmpOverTime = new TrnsEmployeeOvertime();
                                            dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                        }
                                        TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                        EmpOverTime.EmployeeId = intEmpID;
                                        EmpOverTime.Period = oOldVal.PeriodID;
                                        EmpOverTime.CreateDate = DateTime.Now;
                                        EmpOverTime.UserId = oCompany.UserName;
                                        EmpOverTimeDet.OvertimeID = OverTime.ID;
                                        EmpOverTimeDet.ValueType = OverTime.ValueType;
                                        EmpOverTimeDet.OTValue = OverTime.Value;
                                        EmpOverTimeDet.OTDate = leaveDate;
                                        EmpOverTimeDet.FromTime = "";
                                        EmpOverTimeDet.ToTime = "";
                                        EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                        EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                        EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                        EmpOverTimeDet.FlgActive = true;
                                        EmpOverTimeDet.CreateDate = DateTime.Now;
                                        EmpOverTimeDet.UserId = oCompany.UserName;
                                        EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                        //Commit for test
                                        dbHrPayroll.SubmitChanges();
                                    }
                                }
                            }
                        }
                        #endregion
                        oOldVal.TimeIn = strTimeIn.Trim();
                        oOldVal.TimeOut = strTimeOut.Trim();
                        oOldVal.WorkHour = strWorkHours.Trim();
                        //oOldVal.CalculatedUnits = Convert.ToInt32(CalculatedUnits.Trim());
                        //oOldVal.ManualUnits = Convert.ToInt32(UserUnits.Trim());
                        oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                        oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                        oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                        oOldVal.LateInMin = strLateInMinutes.Trim();
                        oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                        //oOldVal.FlgisNewLeave = isNewLeave;

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                        }
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = true;
                        oOldVal.UpdatedBy = oCompany.UserName;
                        //Following Code Delete TempAttendance Records After Process.
                        var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                        if (Record != null && Record.Count > 0)
                        {
                            int k = 0;
                            foreach (var v in Record)
                            {
                                //TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                //dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                //k += 1;
                            }
                        }
                    }
                }
                dbHrPayroll.SubmitChanges();
                //Call new OT method
                OTPostingSSL();
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordBikiyaPost()
        {

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            int LeaveDocNum = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string Status = "";
            TrnsEmployeeOvertime EmpOverTime;

            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    Status = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    //Status
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();

                        if (isNewLeave)
                        {
                            string leaveUnits = "";
                            decimal basicsalary = 0;
                            decimal LeaveDeductedAmount = 0;
                            decimal TempLeaveCount = 0;
                            LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);

                            if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                            {
                                MstLeaveType LeaveType = null;
                                LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                if (LeaveType == null)
                                {
                                    oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    return;
                                }
                                var CheckBalance = (from a in oEmployeeLeaveCollection
                                                    where a.EmployeeCode == oEmployee.EmpID
                                                    && a.LeaveCode == LeaveType.Code
                                                    select a).FirstOrDefault();
                                if (CheckBalance == null)
                                {
                                    oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    return;
                                }
                                else if (CheckBalance != null)
                                {
                                    if (CheckBalance.Balance >= Convert.ToDecimal(LeaveCountTotal))
                                    {
                                        CheckBalance.Balance -= Convert.ToDecimal(LeaveCountTotal);
                                    }
                                    else
                                    {
                                        if (CheckBalance.LeaveCode == "Casual")
                                        {
                                            LeaveType = (from a in dbHrPayroll.MstLeaveType
                                                         where a.Code == "Sick"
                                                         select a).FirstOrDefault();
                                            var CheckBalance2 = (from a in oEmployeeLeaveCollection
                                                                 where a.EmployeeCode == oEmployee.EmpID && a.LeaveCode == LeaveType.Code
                                                                 select a).FirstOrDefault();
                                            if (CheckBalance2 == null)
                                            {
                                                oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                return;
                                            }
                                            else if (CheckBalance2 != null)
                                            {
                                                if (CheckBalance2.Balance >= Convert.ToDecimal(LeaveCountTotal))
                                                {
                                                    CheckBalance2.Balance -= Convert.ToDecimal(LeaveCountTotal);
                                                }
                                                else
                                                {
                                                    if (CheckBalance2.LeaveCode == "Sick")
                                                    {
                                                        LeaveType = (from a in dbHrPayroll.MstLeaveType
                                                                     where a.Code == "Annual"
                                                                     select a).FirstOrDefault();
                                                        var CheckBalance3 = (from a in oEmployeeLeaveCollection
                                                                             where a.EmployeeCode == oEmployee.EmpID && a.LeaveCode == LeaveType.Code
                                                                             select a).FirstOrDefault();
                                                        if (CheckBalance3 == null)
                                                        {
                                                            oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                            return;
                                                        }
                                                        else if (CheckBalance3 != null)
                                                        {
                                                            if (CheckBalance3.Balance >= Convert.ToDecimal(LeaveCountTotal))
                                                            {
                                                                CheckBalance3.Balance -= Convert.ToDecimal(LeaveCountTotal);
                                                            }
                                                            else
                                                            {
                                                                if (CheckBalance3.LeaveCode == "Annual")
                                                                {
                                                                    LeaveType = (from a in dbHrPayroll.MstLeaveType
                                                                                 where a.Code == "Absent"
                                                                                 select a).FirstOrDefault();
                                                                    var CheckBalance4 = (from a in oEmployeeLeaveCollection
                                                                                         where a.EmployeeCode == oEmployee.EmpID && a.LeaveCode == LeaveType.Code
                                                                                         select a).FirstOrDefault();
                                                                    if (CheckBalance4 == null)
                                                                    {
                                                                        oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                                                        return;
                                                                    }
                                                                    else if (CheckBalance4 != null)
                                                                    {
                                                                        if (CheckBalance4.Balance >= Convert.ToDecimal(LeaveCountTotal))
                                                                        {
                                                                            CheckBalance4.Balance -= Convert.ToDecimal(LeaveCountTotal);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //Chechking for Previus Leaves for Same day
                                var ChechkForLeave = dbHrPayroll.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                {
                                    //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                    TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                             select a).FirstOrDefault();
                                    //if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.UnitsID == "MIN")
                                    //Modified by Rouf
                                    if (AlreadyEnteredLeave != null)
                                    {
                                        oApplication.StatusBar.SetText("Leave Already Entered For Employee id " + strEmpName + " on Date " + leaveDate.Date.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            if (LeaveCountTotal == "0.5")
                                            {
                                                leaveUnits = "HalfDay";
                                            }
                                            else if (LeaveCountTotal == "1.00")
                                            {
                                                leaveUnits = "Day";
                                            }
                                            else if (LeaveCountTotal == "1.0")
                                            {
                                                leaveUnits = "Day";
                                            }
                                            else if (LeaveCountTotal == "1")
                                            {
                                                leaveUnits = "Day";
                                            }
                                            else
                                            {
                                                leaveUnits = "MIN";
                                            }
                                        }
                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                        objLeaveReq.EmpID = intEmpID;
                                        objLeaveReq.Series = -1;
                                        objLeaveReq.EmpName = strEmpName.Trim();
                                        objLeaveReq.DocNum = LeaveDocNum;
                                        LeaveDocNum++;
                                        objLeaveReq.DocDate = DateTime.Now;
                                        objLeaveReq.LeaveFrom = leaveDate;
                                        objLeaveReq.LeaveTo = leaveDate;
                                        objLeaveReq.UnitsID = leaveUnits;
                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                        //objLeaveReq.DeductAmnt

                                        objLeaveReq.FlgPaid = false;
                                        objLeaveReq.FlgVisa = false;
                                        objLeaveReq.FlgMedical = false;
                                        TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;

                                        string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";
                                        //if (employeetype.ToLower().StartsWith("con") && Status == " LateIn" || Status == "Early Out")
                                        if (employeetype.ToLower().StartsWith("con") & TempLeaveCount < 1)
                                        {
                                            basicsalary = Convert.ToDecimal(oEmployee.BasicSalary);
                                            decimal decLeaveHrs = ConvertTimeToDecimal(strLeaveHours);

                                            LeaveDeductedAmount = ((basicsalary / 30) / 8) * decLeaveHrs;
                                            objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                        }
                                        objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                        if (LeaveType != null)
                                        {
                                            objLeaveReq.LeaveType = LeaveType.ID;
                                        }
                                        objLeaveReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                        objLeaveReq.CreateDate = DateTime.Now;
                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                        //Commit for test
                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(LeaveCountTotal))
                                    {
                                        if (LeaveCountTotal == "0.5")
                                        {
                                            leaveUnits = "HalfDay";
                                        }
                                        else if (LeaveCountTotal == "1.00")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else if (LeaveCountTotal == "1.0")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else if (LeaveCountTotal == "1")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else
                                        {
                                            leaveUnits = "MIN";
                                        }
                                    }
                                    TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                    objLeaveReq.EmpID = intEmpID;
                                    objLeaveReq.Series = -1;
                                    objLeaveReq.EmpName = strEmpName.Trim();
                                    objLeaveReq.DocNum = LeaveDocNum;
                                    LeaveDocNum++;
                                    objLeaveReq.DocDate = DateTime.Now;
                                    objLeaveReq.LeaveFrom = leaveDate;
                                    objLeaveReq.LeaveTo = leaveDate;
                                    objLeaveReq.UnitsID = leaveUnits;
                                    objLeaveReq.UnitsLOVType = "LeaveUnits";
                                    objLeaveReq.FlgMedical = false;
                                    objLeaveReq.FlgPaid = false;
                                    objLeaveReq.FlgVisa = false;
                                    TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";
                                    if (employeetype.ToLower().StartsWith("con") & TempLeaveCount < 1)
                                    {
                                        basicsalary = Convert.ToDecimal(oEmployee.BasicSalary);
                                        decimal decLeaveHrs = ConvertTimeToDecimal(strLeaveHours);

                                        LeaveDeductedAmount = ((basicsalary / 30) / 8) * decLeaveHrs;
                                        objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                    }
                                    objLeaveReq.DeductAmnt = LeaveDeductedAmount;
                                    if (LeaveType != null)
                                    {
                                        objLeaveReq.LeaveType = LeaveType.ID;
                                    }
                                    objLeaveReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                    objLeaveReq.CreateDate = DateTime.Now;
                                    objLeaveReq.CreatedBy = oCompany.UserName;
                                    dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                }
                            }
                        }

                        //OverTime Working Starts

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && oEmployee.OTSlabs == null)
                        {
                            decimal OtCount = 0;
                            //Enter OverTime Hours
                            if (string.IsNullOrEmpty(strOverTimeType))
                            {
                                oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            else
                            {

                                decimal amount = 0;
                                decimal workhours = 0;
                                short daysOT = 0;
                                decimal HoursOT = 0;
                                //Insert Child Record
                                var OverTime = dbHrPayroll.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                if (OverTime != null)
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                    OtCount = CalculateHourTimeCount(strOverTimeHours);
                                    amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                    string strAmount = string.Format("{0:0.00}", amount);
                                    bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                    if (!flgOtApplicable)
                                    {
                                        oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    if (EmpRecord != null)
                                    {
                                        EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                        if (EmpOverTime == null)
                                        {
                                            EmpOverTime = new TrnsEmployeeOvertime();
                                            dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                        }
                                        TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                        EmpOverTime.EmployeeId = intEmpID;
                                        EmpOverTime.Period = oOldVal.PeriodID;
                                        EmpOverTime.CreateDate = DateTime.Now;
                                        EmpOverTime.UserId = oCompany.UserName;
                                        EmpOverTimeDet.OvertimeID = OverTime.ID;
                                        EmpOverTimeDet.ValueType = OverTime.ValueType;
                                        EmpOverTimeDet.OTValue = OverTime.Value;
                                        EmpOverTimeDet.OTDate = leaveDate;
                                        EmpOverTimeDet.FromTime = "";
                                        EmpOverTimeDet.ToTime = "";
                                        EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                        EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                        EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                        EmpOverTimeDet.FlgActive = true;
                                        EmpOverTimeDet.CreateDate = DateTime.Now;
                                        EmpOverTimeDet.UserId = oCompany.UserName;
                                        EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                        //Commit for test
                                        dbHrPayroll.SubmitChanges();
                                    }
                                }

                            }
                        }
                        oOldVal.TimeIn = strTimeIn.Trim();
                        oOldVal.TimeOut = strTimeOut.Trim();
                        oOldVal.WorkHour = strWorkHours.Trim();
                        //oOldVal.CalculatedUnits = Convert.ToInt32(CalculatedUnits.Trim());
                        //oOldVal.ManualUnits = Convert.ToInt32(UserUnits.Trim());
                        oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                        oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                        oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                        oOldVal.LateInMin = strLateInMinutes.Trim();
                        oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                        //oOldVal.FlgisNewLeave = isNewLeave;
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                        }
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = true;
                        oOldVal.UpdatedBy = oCompany.UserName;

                        //Following Code Delete TempAttendance Records After Process.

                        var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                        if (Record != null && Record.Count > 0)
                        {
                            int k = 0;
                            foreach (var v in Record)
                            {
                                TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                k += 1;
                            }
                        }
                    }
                }
                dbHrPayroll.SubmitChanges();
                //Call new OT method
                OTPostingSSL();
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: SaveAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordISM()
        {
            // grdEmployees.Columns.Item("LH").Cells.Item("23").Click();

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string strLeaveDedRule = "";
            string strDescription = "";
            string strLeaveCount = "";
            grdAttendance.FlushToDataSource();

            DateTime leaveDate = DateTime.MinValue;
            try
            {
                //
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeOut missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeIn missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;

                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strLeaveDedRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();

                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        else
                        {
                            oOldVal.OTHour = "00:00";
                            oOldVal.OTType = null;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                            oOldVal.FlgIsNewLeave = isNewLeave;
                            oOldVal.LeaveDedRule = strLeaveDedRule;
                        }
                        else
                        {
                            oOldVal.LeaveType = null;
                            oOldVal.LeaveHour = "00:00";
                            oOldVal.LeaveCount = 0m;
                            oOldVal.FlgIsNewLeave = false;
                            oOldVal.LeaveDedRule = "";
                        }

                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;
                    }
                    dbHrPayroll.SubmitChanges();
                }
                //Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.PunchedDate >= startDate && tempat.PunchedDate <= EndDate && tempat.FlgProcessed == false).ToList();
                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;
                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    //END Update flgProcessed in trnsTempAttendance
                }
                MsgSuccess("Record saved successfully.");
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                logger(Ex);
            }
        }

        private void SaveAttendanceRecordISMPost()
        {

            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            int LeaveDocNum = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string CalculatedUnits = "";
            string UserUnits = "";
            string OTUnits = "";
            string Status = "";
            string strDRType = "";
            bool flgOTRecord = false;
            string LastEmployee = "";
            TrnsEmployeeOvertime EmpOverTime = null;

            DateTime leaveDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    CalculatedUnits = (grdAttendance.Columns.Item("Cmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    UserUnits = (grdAttendance.Columns.Item("Wmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    OTUnits = (grdAttendance.Columns.Item("OTmin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    Status = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDRType = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    //Status
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        #region Leave Area
                        if (isNewLeave)
                        {
                            string leaveUnits = "";
                            decimal basicsalary = 0;
                            decimal LeaveDeductedAmount = 0;
                            decimal TempLeaveCount = 0;
                            LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);
                            if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                            {
                                MstLeaveType LeaveType = null;
                                LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                if (LeaveType == null)
                                {
                                    MsgError("Please Select Valid Leave Type, EmpCode : " + clEmpCode);
                                    return;
                                }
                                //Chechking for Previous Leaves for Same day
                                var ChechkForLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                      where a.MstEmployee.EmpID == strEmpCode
                                                      && a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate
                                                      select a).FirstOrDefault();
                                if (ChechkForLeave != null)
                                {
                                    TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID == strEmpCode
                                                                             select a).FirstOrDefault();
                                    if (AlreadyEnteredLeave != null)
                                    {
                                        MsgError("Leave already entered for date : " + leaveDate.Date.ToString("MM/dd/yyyy") + " EmpID : " + strEmpCode);
                                    }
                                    else// if (strDRType == "DR_01")
                                    {
                                        if (LeaveCountTotal == "0.5")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else if (LeaveCountTotal == "1.0")
                                        {
                                            leaveUnits = "Day";
                                        }
                                        else
                                        {
                                            leaveUnits = "MIN";
                                        }
                                        TrnsLeavesRequest oLevReq = new TrnsLeavesRequest();
                                        oLevReq.EmpID = intEmpID;
                                        oLevReq.Series = -1;
                                        oLevReq.EmpName = strEmpName.Trim();
                                        oLevReq.DocNum = LeaveDocNum;
                                        LeaveDocNum++;
                                        oLevReq.DocDate = DateTime.Now;
                                        oLevReq.LeaveFrom = leaveDate;
                                        oLevReq.LeaveTo = leaveDate;
                                        oLevReq.UnitsID = leaveUnits;
                                        oLevReq.UnitsLOVType = "LeaveUnits";
                                        //objLeaveReq.DeductAmnt

                                        oLevReq.FlgPaid = false;
                                        oLevReq.FlgVisa = false;
                                        oLevReq.FlgMedical = false;
                                        TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        oLevReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        if (LeaveType != null)
                                        {
                                            oLevReq.LeaveType = LeaveType.ID;
                                        }
                                        oLevReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                        oLevReq.CreateDate = DateTime.Now;
                                        oLevReq.CreatedBy = oCompany.UserName;
                                        //Commit for test
                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(oLevReq);
                                    }
                                }
                                else
                                {
                                    if (LeaveCountTotal == "0.5")
                                    {
                                        leaveUnits = "Day";
                                    }
                                    else if (LeaveCountTotal == "1.0")
                                    {
                                        leaveUnits = "Day";
                                    }
                                    else
                                    {
                                        leaveUnits = "MIN";
                                    }
                                    TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                    objLeaveReq.EmpID = intEmpID;
                                    objLeaveReq.Series = -1;
                                    objLeaveReq.EmpName = strEmpName.Trim();
                                    objLeaveReq.DocNum = LeaveDocNum;
                                    LeaveDocNum++;
                                    objLeaveReq.DocDate = DateTime.Now;
                                    objLeaveReq.LeaveFrom = leaveDate;
                                    objLeaveReq.LeaveTo = leaveDate;
                                    objLeaveReq.UnitsID = leaveUnits;
                                    objLeaveReq.UnitsLOVType = "LeaveUnits";
                                    objLeaveReq.FlgMedical = false;
                                    objLeaveReq.FlgPaid = false;
                                    objLeaveReq.FlgVisa = false;
                                    TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    if (LeaveType != null)
                                    {
                                        objLeaveReq.LeaveType = LeaveType.ID;
                                    }
                                    objLeaveReq.LeaveDescription = LeaveType.Description;
                                    objLeaveReq.CreateDate = DateTime.Now;
                                    objLeaveReq.CreatedBy = oCompany.UserName;
                                    dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                }
                            }
                        }
                        #endregion

                        #region OT Area
                        if (LastEmployee != strEmpCode)
                        {
                            flgOTRecord = false;
                            LastEmployee = strEmpCode;
                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && oEmployee.OTSlabs == null)
                        {
                            decimal OtCount = 0;
                            //Enter OverTime Hours
                            if (string.IsNullOrEmpty(strOverTimeType))
                            {
                                oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            else
                            {

                                decimal amount = 0;
                                decimal workhours = 0;
                                short daysOT = 0;
                                decimal HoursOT = 0;
                                //Insert Child Record
                                var OverTime = dbHrPayroll.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                if (OverTime != null)
                                {
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                    OtCount = CalculateHourTimeCount(strOverTimeHours);
                                    amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString());
                                    string strAmount = string.Format("{0:0.00}", amount);
                                    bool flgOtApplicable = EmpRecord.FlgOTApplicable == null ? false : EmpRecord.FlgOTApplicable.Value;
                                    if (!flgOtApplicable)
                                    {
                                        oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + EmpRecord.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    if (EmpRecord != null)
                                    {
                                        if (!flgOTRecord)
                                        {
                                            EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                        }
                                        if (EmpOverTime == null & !flgOTRecord)
                                        {
                                            EmpOverTime = new TrnsEmployeeOvertime();
                                            dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                            flgOTRecord = true;
                                        }
                                        TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                        EmpOverTime.EmployeeId = intEmpID;
                                        EmpOverTime.Period = oOldVal.PeriodID;
                                        EmpOverTime.CreateDate = DateTime.Now;
                                        EmpOverTime.UserId = oCompany.UserName;
                                        EmpOverTimeDet.OvertimeID = OverTime.ID;
                                        EmpOverTimeDet.ValueType = OverTime.ValueType;
                                        EmpOverTimeDet.OTValue = OverTime.Value;
                                        EmpOverTimeDet.OTDate = leaveDate;
                                        EmpOverTimeDet.FromTime = "";
                                        EmpOverTimeDet.ToTime = "";
                                        EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                        EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                        EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                        EmpOverTimeDet.FlgActive = true;
                                        EmpOverTimeDet.CreateDate = DateTime.Now;
                                        EmpOverTimeDet.UserId = oCompany.UserName;
                                        EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                        //Commit for test
                                        //dbHrPayroll.SubmitChanges();
                                    }
                                }

                            }
                        }
                        #endregion

                        oOldVal.TimeIn = strTimeIn.Trim();
                        oOldVal.TimeOut = strTimeOut.Trim();
                        oOldVal.WorkHour = strWorkHours.Trim();
                        //oOldVal.CalculatedUnits = Convert.ToInt32(CalculatedUnits.Trim());
                        //oOldVal.ManualUnits = Convert.ToInt32(UserUnits.Trim());
                        oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                        oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                        oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                        oOldVal.LateInMin = strLateInMinutes.Trim();
                        oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                        oOldVal.FlgIsNewLeave = isNewLeave;

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                        }
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = true;
                        oOldVal.UpdatedBy = oCompany.UserName;

                        //Following Code Delete TempAttendance Records After Process.

                        var record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                        if (record != null && record.Count > 0)
                        {
                            int k = 0;
                            foreach (var v in record)
                            {
                                TrnsTempAttendance ooldtemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID && tmp.PunchedDate >= startDate && tmp.PunchedDate <= EndDate).FirstOrDefault();
                                dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(ooldtemp);
                                k += 1;
                            }
                        }
                    }
                }
                dbHrPayroll.SubmitChanges();
                MsgSuccess("Attendance Posted Successfully.");
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                logger(Ex);
            }
        }

        #region Void Proccesed OR Posted Attendance

        private void VoidAttendance()
        {

            try
            {
                if (optProcessedAttendance.Selected)
                {
                    VoidProcessedAttendance();
                }
                else if (optPostedAttendance.Selected)
                {
                    if (Program.objHrmsUI.isSuperUser)
                    {
                        VoidPostedAttendance();
                    }
                    else
                    {
                        oApplication.StatusBar.SetText("Only super user allow to post attendance", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                    }

                }
                else if (optProcessedAttendance.Selected == false && optPostedAttendance.Selected == false)
                {
                    oApplication.StatusBar.SetText("Check Required for Unpost Processed/Posted Attendance", SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                    return;
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void VoidProcessedAttendance()
        {
            string strEmpCode = "", strEmpName = "";
            DateTime GetAttendanceDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

            try
            {
                int confirm = oApplication.MessageBox("Are you sure you want to unpost Processed Attendance? ", 3, "Yes", "No", "Cancel");
                if (confirm == 2 || confirm == 3) return;
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        flgSave_Posted = false;
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oPayroll = (from p in dbHrPayroll.CfgPayrollDefination
                                        where p.ID.ToString() == cmbPayroll.Value.ToString()
                                        select p).FirstOrDefault();

                        var oPeriod = (from prd in dbHrPayroll.CfgPeriodDates
                                       where prd.ID.ToString() == cmbPeriod.Value.ToString()
                                       select prd).FirstOrDefault();

                        var oEmployee = (from e in dbHrPayroll.MstEmployee
                                         where e.EmpID == strEmpCode
                                         && e.PayrollID == oPayroll.ID
                                         select e).FirstOrDefault();

                        int oCount = (from atr in dbHrPayroll.TrnsAttendanceRegister
                                      where atr.EmpID == oEmployee.ID
                                      && atr.Date >= startDate
                                      && atr.Date <= EndDate
                                      && atr.PeriodID == oPeriod.ID
                                      && (atr.Processed == null ? false : atr.Processed == true)
                                      select atr).Count();
                        if (oCount == 0)
                        {
                            oApplication.StatusBar.SetText("EmpID '" + oEmployee.EmpID + "' has no recod found in Processed Attendance", SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                            continue;
                        }

                        var oProcessedAttendance = (from atr in dbHrPayroll.TrnsAttendanceRegister
                                                    where atr.EmpID == oEmployee.ID
                                                    && atr.Date >= startDate
                                                    && atr.Date <= EndDate
                                                    && atr.PeriodID == oPeriod.ID
                                                    && (atr.Processed == null ? false : atr.Processed == true)
                                                    select atr).ToList();
                        foreach (var oneline in oProcessedAttendance)
                        {
                            if (oneline.FlgPosted.GetValueOrDefault() == false)
                            {
                                var oEmp = (from e in dbHrPayroll.MstEmployee
                                            where e.ID == oneline.EmpID
                                            select e).FirstOrDefault();

                                var oTempAttendance = (from at in dbHrPayroll.TrnsTempAttendance
                                                       where at.EmpID == oEmp.EmpID
                                                       && at.PunchedDate == oneline.Date
                                                       select at).ToList();

                                if (oTempAttendance != null)
                                {
                                    foreach (var onelineProcessed in oTempAttendance)
                                    {
                                        onelineProcessed.FlgProcessed = false;
                                    }
                                }
                                oneline.TimeIn = null;
                                oneline.TimeOut = null;
                                oneline.LateInMin = null;
                                oneline.EarlyOutMin = null;
                                oneline.WorkHour = null;
                                oneline.OTType = null;
                                oneline.OTHour = null;
                                oneline.LeaveHour = null;
                                oneline.LeaveCount = null;
                                oneline.LeaveType = null;
                                oneline.Description = null;
                                oneline.LeaveDedRule = null;
                                oneline.FlgIsNewLeave = null;
                                oneline.Remarks = null;
                                oneline.Processed = false;
                            }
                            else
                            {
                                oApplication.StatusBar.SetText("Please void first Posted Attendance ", SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                continue;
                            }

                            #region Cancel Leaves
                            //var oLeaves = (from l in dbHrPayroll.TrnsLeavesRequest
                            //               where oneline.EmpID == l.EmpID
                            //               && l.LeaveFrom >= oneline.Date
                            //               && l.LeaveTo <= oneline.Date
                            //               && l.AttendanceID == oneline.Id
                            //               select l).FirstOrDefault();
                            //if (oLeaves != null)
                            //{
                            //    dbHrPayroll.TrnsLeavesRequest.DeleteOnSubmit(oLeaves);
                            //}
                            ///dbHrPayroll.SubmitChanges();
                            #endregion

                            #region Cancel OverTime
                            //var oOverTime = (from ot in dbHrPayroll.TrnsEmployeeOvertime
                            //                 where oneline.EmpID == ot.EmployeeId
                            //                 && ot.Period == oPeriod.ID
                            //                 && ot.AttendanceID == oneline.Id
                            //                 select ot).FirstOrDefault();
                            //if (oOverTime != null)
                            //{
                            //    dbHrPayroll.TrnsEmployeeOvertime.DeleteOnSubmit(oOverTime);
                            //}

                            #endregion
                        }

                        dbHrPayroll.SubmitChanges();
                        flgSave_Posted = true;

                    }
                    //else
                    //{
                    //    oApplication.StatusBar.SetText("Please select Employee", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                    //    flgSave_Posted = false;
                    //    return;
                    //}
                }
                //if (flgSave_Posted == false)
                //{
                //   // oApplication.StatusBar.SetText("Please select Employee", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                //    flgSave_Posted = false;
                //    return;
                //}
                if (flgSave_Posted == true)
                {
                    oApplication.MessageBox("Processed Attendance chage to Un-Processed");
                }

            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("VoidProcessedAttendance : " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void VoidPostedAttendance()
        {
            string strEmpCode = "", strEmpName = "";
            DateTime GetAttendanceDate = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;

            startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
            EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

            try
            {
                int confirm = oApplication.MessageBox("Are you sure you want to unpost Posted Attendance? ", 3, "Yes", "No", "Cancel");
                if (confirm == 2 || confirm == 3) return;
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        flgSave_Posted = false;
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oPayroll = (from p in dbHrPayroll.CfgPayrollDefination
                                        where p.ID.ToString() == cmbPayroll.Value.ToString()
                                        select p).FirstOrDefault();

                        var oPeriod = (from prd in dbHrPayroll.CfgPeriodDates
                                       where prd.ID.ToString() == cmbPeriod.Value.ToString()
                                       select prd).FirstOrDefault();

                        var oEmployee = (from e in dbHrPayroll.MstEmployee
                                         where e.EmpID == strEmpCode
                                         && e.PayrollID == oPayroll.ID
                                         select e).FirstOrDefault();

                        int oCount = (from atr in dbHrPayroll.TrnsAttendanceRegister
                                      where atr.EmpID == oEmployee.ID
                                      && atr.Date >= startDate
                                      && atr.Date <= EndDate
                                      && atr.PeriodID == oPeriod.ID
                                      && (atr.FlgPosted == null ? false : atr.FlgPosted == true)
                                      select atr).Count();

                        if (oCount == 0)
                        {
                            oApplication.StatusBar.SetText("EmpID '" + oEmployee.EmpID + "' has no recod found in Posted Attendance", SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                            continue;
                        }

                        var oPostedAttendance = (from atr in dbHrPayroll.TrnsAttendanceRegister
                                                 where atr.EmpID == oEmployee.ID
                                                 && atr.Date >= startDate
                                                 && atr.Date <= EndDate
                                                 && atr.PeriodID == oPeriod.ID
                                                 && (atr.FlgPosted == null ? false : atr.FlgPosted == true)
                                                 select atr).ToList();

                        foreach (var oneline in oPostedAttendance)
                        {
                            #region Cancel Leaves
                            var oLeaves = (from l in dbHrPayroll.TrnsLeavesRequest
                                           where oneline.EmpID == l.EmpID
                                           && l.LeaveFrom >= oneline.Date
                                           && l.LeaveTo <= oneline.Date
                                           && l.AttendanceID == oneline.Id
                                           select l).FirstOrDefault();

                            if (oLeaves != null)
                            {
                                dbHrPayroll.TrnsLeavesRequest.DeleteOnSubmit(oLeaves);
                            }
                            ///dbHrPayroll.SubmitChanges();
                            #endregion

                            #region Cancel OverTime
                            var oOverTime = (from ot in dbHrPayroll.TrnsEmployeeOvertime
                                             where oneline.EmpID == ot.EmployeeId
                                             && ot.Period == oPeriod.ID
                                             && ot.AttendanceID == oneline.Id
                                             select ot).FirstOrDefault();
                            if (oOverTime != null)
                            {
                                dbHrPayroll.TrnsEmployeeOvertime.DeleteOnSubmit(oOverTime);
                            }

                            #endregion
                            oneline.FlgPosted = false;
                        }
                        dbHrPayroll.SubmitChanges();
                        flgSave_Posted = true;
                    }
                    //else
                    //{
                    //    oApplication.StatusBar.SetText("Please select Employee", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                    //    flgSave_Posted = false;
                    //    return;
                    //}
                }
                //if (flgSave_Posted == false)
                //{
                //    oApplication.StatusBar.SetText("Please select Employee", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                //    flgSave_Posted = false;
                //    return;
                //}
                if (flgSave_Posted == true)
                {
                    oApplication.MessageBox("Posted Attendance chage to Un-Posted");
                }
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("VoidPostedAttendance : " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }
        #endregion

        private void OTPostingSSL()
        {
            try
            {
                foreach (var oLine in Program.oOTSlabs)
                {
                    string empCode = oLine.EmpCode;
                    string otTimeSlab1 = string.Empty, otTimeSlab2 = string.Empty;
                    int otMinS1 = 0, otHourS1 = 0, tempS1 = 0;
                    int otMinS2 = 0, otHourS2 = 0, tempS2 = 0;
                    Boolean flgSlab1 = false, flgSlab2 = false;
                    if (oLine.OTmins > oLine.PresentDays)
                    {
                        flgSlab2 = true;
                        tempS2 = oLine.OTmins - oLine.PresentDays;
                        otHourS2 = tempS2 / 60;
                        otMinS2 = tempS2 % 60;
                        otTimeSlab2 = otHourS2.ToString("00") + ":" + otMinS2.ToString("00");
                    }
                    else
                    {
                        flgSlab2 = false;
                    }
                    if (oLine.OTmins >= oLine.PresentDays)
                    {
                        flgSlab1 = true;
                        tempS1 = oLine.PresentDays;
                        otHourS1 = tempS1 / 60;
                        otMinS1 = tempS1 % 60;
                        otTimeSlab1 = otHourS1.ToString("00") + ":" + otMinS1.ToString("00");
                    }
                    else
                    {
                        flgSlab1 = true;
                        tempS1 = oLine.OTmins;
                        otHourS1 = tempS1 / 60;
                        otMinS1 = tempS1 % 60;
                        otTimeSlab1 = otHourS1.ToString("00") + ":" + otMinS1.ToString("00");
                    }

                    if (flgSlab1)
                    {
                        decimal OtCount = 0;
                        var oPeriod = (from a in dbHrPayroll.CfgPeriodDates
                                       where a.ID.ToString() == cmbPeriod.Value.Trim()
                                       select a).FirstOrDefault();
                        var oEmp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == empCode
                                    select a).FirstOrDefault();
                        if (oEmp.OTSlabs == null)
                        {
                            oApplication.StatusBar.SetText("OT Slab didn't selected", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                            return;
                        }
                        var otSlab1 = (from a in dbHrPayroll.TrnsOTSlabDetail
                                       where a.ParentID == oEmp.OTSlabs && a.Priority == 1
                                       select a).FirstOrDefault();
                        if (otSlab1 == null)
                        {
                            oApplication.StatusBar.SetText("OT Slab detail didn't found priority 1", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                            return;
                        }
                        decimal amount = 0;
                        decimal workhours = 0;
                        short daysOT = 0;
                        decimal HoursOT = 0;
                        //Insert Child Record
                        var OverTime = (from a in dbHrPayroll.MstOverTime
                                        where a.ID == otSlab1.OTType
                                        select a).FirstOrDefault();
                        TrnsEmployeeOvertime oDoc = (from a in dbHrPayroll.TrnsEmployeeOvertime
                                                     where a.EmployeeId == oEmp.ID && a.Period == oPeriod.ID
                                                     select a).FirstOrDefault();
                        if (OverTime != null)
                        {
                            OtCount = CalculateHourTimeCountSlabs(otTimeSlab1);
                            amount = setRowAmnt(oEmp, OtCount, cmbPeriod.Value.Trim(), OverTime.ID.ToString());
                            string strAmount = string.Format("{0:0.00}", amount);
                            bool flgOtApplicable = oEmp.FlgOTApplicable == null ? false : oEmp.FlgOTApplicable.Value;
                            if (!flgOtApplicable)
                            {
                                oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + oEmp.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                continue;
                            }

                            //TrnsEmployeeOvertime oDoc = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();

                            if (oDoc == null)
                            {
                                oDoc = new TrnsEmployeeOvertime();
                                dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(oDoc);
                            }
                            TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                            oDoc.EmployeeId = oEmp.ID;
                            oDoc.Period = oPeriod.ID;
                            oDoc.CreateDate = DateTime.Now;
                            oDoc.UserId = oCompany.UserName;
                            EmpOverTimeDet.OvertimeID = OverTime.ID;
                            EmpOverTimeDet.ValueType = OverTime.ValueType;
                            EmpOverTimeDet.OTValue = OverTime.Value;
                            EmpOverTimeDet.OTDate = oPeriod.StartDate.Value.AddDays(1);
                            EmpOverTimeDet.FromTime = "";
                            EmpOverTimeDet.ToTime = "";
                            EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                            EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                            EmpOverTimeDet.BasicSalary = oEmp.BasicSalary;
                            EmpOverTimeDet.FlgActive = true;
                            EmpOverTimeDet.CreateDate = DateTime.Now;
                            EmpOverTimeDet.UserId = oCompany.UserName;
                            oDoc.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                            //Commit for test
                        }
                        if (flgSlab2)
                        {
                            var otSlab2 = (from a in dbHrPayroll.TrnsOTSlabDetail
                                           where a.ParentID == oEmp.OTSlabs && a.Priority == 2
                                           select a).FirstOrDefault();
                            if (otSlab2 == null)
                            {
                                oApplication.StatusBar.SetText("OT Slab detail didn't found priority 1", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            amount = 0;
                            workhours = 0;
                            daysOT = 0;
                            HoursOT = 0;
                            //Insert Child Record
                            var OverTimeS2 = (from a in dbHrPayroll.MstOverTime
                                              where a.ID == otSlab2.OTType
                                              select a).FirstOrDefault();
                            if (OverTimeS2 != null)
                            {
                                OtCount = CalculateHourTimeCountSlabs(otTimeSlab2);
                                amount = setRowAmnt(oEmp, OtCount, cmbPeriod.Value.Trim(), OverTimeS2.ID.ToString());
                                string strAmount = string.Format("{0:0.00}", amount);
                                bool flgOtApplicable = oEmp.FlgOTApplicable == null ? false : oEmp.FlgOTApplicable.Value;
                                if (!flgOtApplicable)
                                {
                                    oApplication.StatusBar.SetText("Overtime not applicable to employee with empcode " + oEmp.EmpID, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    continue;
                                }

                                //TrnsEmployeeOvertime oDoc = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                oDoc.EmployeeId = oEmp.ID;
                                oDoc.Period = oPeriod.ID;
                                oDoc.CreateDate = DateTime.Now;
                                oDoc.UserId = oCompany.UserName;
                                EmpOverTimeDet.OvertimeID = OverTimeS2.ID;
                                EmpOverTimeDet.ValueType = OverTimeS2.ValueType;
                                EmpOverTimeDet.OTValue = OverTimeS2.Value;
                                EmpOverTimeDet.OTDate = oPeriod.StartDate.Value.AddDays(2);
                                EmpOverTimeDet.FromTime = "";
                                EmpOverTimeDet.ToTime = "";
                                EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                EmpOverTimeDet.BasicSalary = oEmp.BasicSalary;
                                EmpOverTimeDet.FlgActive = true;
                                EmpOverTimeDet.CreateDate = DateTime.Now;
                                EmpOverTimeDet.UserId = oCompany.UserName;
                                oDoc.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                //Commit for test
                            }
                        }
                    }
                }
                dbHrPayroll.SubmitChanges();
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("OTPostingSSL : " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SaveAttendanceRecordCC()
        {
            bool isNewLeave = false;
            int recId = 0;
            string strTimeIn = "";
            string strTimeOut = "";
            string strWorkHours = "";
            string strLeaveType = "";
            string strLeaveHours = "";
            string strEmpCode = "";
            string strEmpName = "";
            int intEmpID = 0;
            string LeaveCountTotal = "";
            string strleaveDate = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string strCostCenter = "";
            TrnsEmployeeOvertime EmpOverTime;
            DateTime leaveDate = DateTime.MinValue;

            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeOut missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                    {
                        oApplication.StatusBar.SetText("TimeIn missing for Employee with Code " + strEmpCode + " on Dated " + strleaveDate, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                        return;
                    }
                }

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    recId = Convert.ToInt32((grdAttendance.Columns.Item("Id").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                    isNewLeave = (grdAttendance.Columns.Item("IsNewL").Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked;
                    strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strWorkHours = (grdAttendance.Columns.Item("WHrs").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    strLeaveHours = (grdAttendance.Columns.Item("LH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCountTotal = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strLateInMinutes = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEarlyOutMinutes = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strEmpName = (grdAttendance.Columns.Item("EmpName").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeHours = (grdAttendance.Columns.Item("OTH").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strOverTimeType = (grdAttendance.Columns.Item("OTT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    strleaveDate = (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    leaveDate = DateTime.ParseExact(strleaveDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    strCostCenter = (grdAttendance.Columns.Item("clCC").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (!string.IsNullOrEmpty(strCostCenter))
                        {
                            TrnsAttendanceRegisterDetail oNew = new TrnsAttendanceRegisterDetail();
                            oNew.TimeInCC = strTimeIn;
                            oNew.TimeOutCC = strTimeOut;
                            oNew.TotalHours = CalculatestrToDecimalTime(strWorkHours);
                            oNew.CostCenter = strCostCenter;
                            oOldVal.TrnsAttendanceRegisterDetail.Add(oNew);
                        }
                        if (isNewLeave)
                        {
                            string leaveUnits = "";
                            LeaveCountTotal = string.Format("{0:0.00}", LeaveCountTotal);
                            if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                            {
                                var LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault();
                                if (LeaveType == null)
                                {
                                    oApplication.StatusBar.SetText("Please Select Valid Leave Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    return;
                                }
                                //Chechking for Previus Leaves for Same day
                                var ChechkForLeave = dbHrPayroll.TrnsLeavesRequest.Where(lr => lr.EmpID == intEmpID).ToList();
                                if (ChechkForLeave != null && ChechkForLeave.Count > 0)
                                {
                                    //var AlreadyEnteredLeave = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= leaveDate && leaveDate <= pd.LeaveTo).FirstOrDefault();
                                    TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.LeaveFrom <= leaveDate && a.LeaveTo >= leaveDate && a.MstEmployee.EmpID.Contains(strEmpCode)
                                                                             select a).FirstOrDefault();
                                    if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.UnitsID == "Day")
                                    {
                                        oApplication.StatusBar.SetText("Leave Already Entered For Date " + leaveDate.Date.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(LeaveCountTotal))
                                        {
                                            if (LeaveCountTotal == "0.5")
                                            {
                                                leaveUnits = "HalfDay";
                                            }
                                            else
                                            {
                                                leaveUnits = "Day";
                                            }
                                        }
                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                        objLeaveReq.EmpID = intEmpID;
                                        objLeaveReq.Series = -1;
                                        objLeaveReq.EmpName = strEmpName.Trim();
                                        objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                        objLeaveReq.DocDate = DateTime.Now;
                                        objLeaveReq.LeaveFrom = leaveDate;
                                        objLeaveReq.LeaveTo = leaveDate;
                                        objLeaveReq.UnitsID = leaveUnits;
                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                        objLeaveReq.FlgMedical = false;
                                        objLeaveReq.FlgPaid = false;
                                        objLeaveReq.FlgVisa = false;
                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                        if (LeaveType != null)
                                        {
                                            objLeaveReq.LeaveType = LeaveType.ID;
                                        }
                                        objLeaveReq.LeaveDescription = strLeaveType;
                                        objLeaveReq.CreateDate = DateTime.Now;
                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(LeaveCountTotal))
                                    {
                                        if (LeaveCountTotal == "0.5")
                                        {
                                            leaveUnits = "HalfDay";
                                        }
                                        else
                                        {
                                            leaveUnits = "Day";
                                        }
                                    }
                                    TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                    objLeaveReq.EmpID = intEmpID;
                                    objLeaveReq.Series = -1;
                                    objLeaveReq.EmpName = strEmpName.Trim();
                                    objLeaveReq.DocNum = dbHrPayroll.TrnsLeavesRequest.Count() + 1;
                                    objLeaveReq.DocDate = DateTime.Now;
                                    objLeaveReq.LeaveFrom = leaveDate;
                                    objLeaveReq.LeaveTo = leaveDate;
                                    objLeaveReq.UnitsID = leaveUnits;
                                    objLeaveReq.UnitsLOVType = "LeaveUnits";
                                    objLeaveReq.FlgPaid = false;
                                    objLeaveReq.FlgMedical = false;
                                    objLeaveReq.FlgVisa = false;
                                    objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                    if (LeaveType != null)
                                    {
                                        objLeaveReq.LeaveType = LeaveType.ID;
                                    }
                                    objLeaveReq.LeaveDescription = strLeaveType;
                                    objLeaveReq.CreateDate = DateTime.Now;
                                    objLeaveReq.CreatedBy = oCompany.UserName;
                                    dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                }
                            }
                        }

                        //dbHrPayroll.SubmitChanges();

                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                        {
                            decimal monthHours = Convert.ToDecimal(30.00 * 8.00);
                            MstEmployee emp = (from p in dbHrPayroll.MstEmployee where p.EmpID == strEmpCode select p).Single();
                            decimal baseAmoun = emp.BasicSalary.Value;
                            short days = (short)emp.CfgPayrollDefination.WorkDays;
                            CfgPeriodDates payrollPeriod = (from p in dbHrPayroll.CfgPeriodDates where p.ID == oOldVal.PeriodID select p).Single();
                            if (emp.CfgPayrollDefination.WorkDays > 0)
                            {
                                monthHours = Convert.ToDecimal(emp.CfgPayrollDefination.WorkDays * emp.CfgPayrollDefination.WorkHours);
                            }
                            else
                            {
                                if (payrollPeriod != null)
                                {
                                    if (days < 1)
                                    {
                                        //days = Convert.ToInt16(System.DateTime.DaysInMonth(payrollPeriod.StartDate.Value.Date.Year, payrollPeriod.StartDate.Value.Date.Month));
                                        double dblDays = (payrollPeriod.EndDate.Value.Date - payrollPeriod.StartDate.Value.Date).TotalDays + 1;
                                        days = Convert.ToInt16(dblDays);
                                    }
                                    else if (days < 1)
                                    {
                                        days = Convert.ToInt16(System.DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month));
                                    }
                                    short workhours = (short)emp.CfgPayrollDefination.WorkHours;
                                    monthHours = Convert.ToDecimal(days * workhours);
                                }
                            }
                            decimal OtCount = 0;
                            //Enter OverTime Hours
                            if (string.IsNullOrEmpty(strOverTimeType))
                            {
                                oApplication.StatusBar.SetText("Please Select OverTime Type", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                return;
                            }
                            else
                            {

                                decimal amount = 0;
                                decimal workhours = 0;
                                //Insert Child Record
                                var OverTime = dbHrPayroll.MstOverTime.Where(O => O.Code == strOverTimeType).FirstOrDefault();
                                if (OverTime != null)
                                {
                                    if (!string.IsNullOrEmpty(OverTime.Days) && OverTime.Days != "0")
                                    {
                                        days = Convert.ToInt16(OverTime.Days);
                                    }
                                    if (!string.IsNullOrEmpty(OverTime.Hours) && OverTime.Hours != "0")
                                    {
                                        workhours = Convert.ToDecimal(OverTime.Hours);
                                    }
                                    if (days > 0 && workhours > 0)
                                    {
                                        monthHours = days * workhours;
                                    }
                                    var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                    OtCount = CalculateHourTimeCount(strOverTimeHours);
                                    decimal Val = OverTime.Value.Value;
                                    if (!string.IsNullOrEmpty(EmpRecord.EmployeeContractType) && EmpRecord.EmployeeContractType.Contains("DWGS"))
                                    {
                                        string strShiftHoursX = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                        decimal ShiftHoursCount = CalculateHourTimeCount(strShiftHoursX);
                                        amount = EmpRecord.BasicSalary.Value / ShiftHoursCount * OtCount;
                                    }
                                    else
                                    {
                                        amount = ((baseAmoun / monthHours) * Val / 100) * OtCount;
                                    }
                                    string strAmount = string.Format("{0:0.00}", amount);

                                    if (EmpRecord != null)
                                    {
                                        EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                        if (EmpOverTime == null)
                                        {
                                            EmpOverTime = new TrnsEmployeeOvertime();
                                            dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                        }
                                        TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                        EmpOverTime.EmployeeId = intEmpID;
                                        EmpOverTime.Period = oOldVal.PeriodID;
                                        EmpOverTime.CreateDate = DateTime.Now;
                                        EmpOverTime.UserId = oCompany.UserName;


                                        EmpOverTimeDet.OvertimeID = OverTime.ID;
                                        EmpOverTimeDet.ValueType = OverTime.ValueType;
                                        EmpOverTimeDet.OTValue = OverTime.Value;
                                        EmpOverTimeDet.OTDate = leaveDate;
                                        EmpOverTimeDet.FromTime = "";
                                        EmpOverTimeDet.ToTime = "";
                                        EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                        EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                        EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                        EmpOverTimeDet.FlgActive = true;
                                        EmpOverTimeDet.CreateDate = DateTime.Now;
                                        EmpOverTimeDet.UserId = oCompany.UserName;
                                        EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);
                                        dbHrPayroll.SubmitChanges();
                                    }
                                }

                            }
                        }
                        oOldVal.TimeIn = strTimeIn.Trim();
                        oOldVal.TimeOut = strTimeOut.Trim();
                        oOldVal.WorkHour = strWorkHours.Trim();
                        oOldVal.LateInMin = strLateInMinutes.Trim();
                        oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                        }
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;

                        //Following Code Delete TempAttendance Records After Process.

                        var Record = (from v in dbHrPayroll.TrnsTempAttendance where v.PunchedDate == leaveDate && v.EmpID == strEmpCode select v).ToList();
                        if (Record != null && Record.Count > 0)
                        {
                            int k = 0;
                            foreach (var v in Record)
                            {
                                TrnsTempAttendance oOldTemp = dbHrPayroll.TrnsTempAttendance.Where(tmp => tmp.ID == v.ID).FirstOrDefault();
                                dbHrPayroll.TrnsTempAttendance.DeleteOnSubmit(oOldTemp);
                                k += 1;
                            }
                        }
                    }
                    dbHrPayroll.SubmitChanges();
                }
                oApplication.StatusBar.SetText(Program.objHrmsUI.getStrMsg("RecordSavedSuccessfully"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("SaveAttendanceRecordCC Exception : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void picEmpFrom()
        {
            SearchKeyVal.Clear();
            if (!string.IsNullOrEmpty(txtEmpFrom.Value))
            {
                SearchKeyVal.Add("EmpID", txtEmpFrom.Value.ToString());
            }
            string strSql = sqlString.getSql("empAttendanceFrom", SearchKeyVal);
            picker pic = new picker(oApplication, ds.getDataTable(strSql));
            System.Data.DataTable st = pic.ShowInput("Select Employee", "Select Employee for Attendance Process");
            pic = null;
            if (st.Rows.Count > 0)
            {
                txtEmpFrom.Value = st.Rows[0][0].ToString();
            }
        }

        private void picEmpTo()
        {
            PrepareSearchKeyHash();
            string strSql = sqlString.getSql("empAttendanceTo", SearchKeyVal);
            picker pic = new picker(oApplication, ds.getDataTable(strSql));
            System.Data.DataTable st = pic.ShowInput("Select Employee", "Select Employee for Attendance Process");
            pic = null;
            if (st.Rows.Count > 0)
            {
                txtEmpTo.Value = st.Rows[0][0].ToString();
            }
        }

        private static TimeSpan TimeCalculate(string Hours)
        {
            try
            {
                TimeSpan spanShiftHrs = new TimeSpan(int.Parse(Hours.Split(':')[0]),
           int.Parse(Hours.Split(':')[1]), 0);
                return spanShiftHrs;
            }
            catch (Exception ex)
            {

                throw;
            }

        }

        #region Standard Attendance Processing and Posting

        private void LoadEmployeeAttendanceRecordStandard()
        {
            DateTime StartDate = DateTime.MinValue, dtError = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            string strEmpCode = string.Empty, strEmpName, strWorkHours, strShortHours, strTotalWorkingHours, strDesc, shiftName, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, StartGraceTime, EndGraceTime;
            string shiftHours, strTimeIn = "00:00", strTimeOut = "00:00", strOverTimeHours, strOverTimeType, strEarlyOutMinutes, strLeaveHours, strLeaveType, strLeaveTypeCode, strStatus, strDeductionRule;
            string strLateInMinutes, strStandardWorkingHours = "00:00", shiftReportingTime = "00:00", strOtAdjustment = "00:00";
            string strDay, strRemarks, strPreTimeIn, strPreTimeOut;
            Boolean flgOverTime, flgLeaveIsNew, flgInOverLap, flgOutOverLap, flgProcessed, flgNewImport, flgPosted, flgShiftExpectedOut, flgShiftExpectedIn;
            decimal LeaveCount = 0;
            int RecordCounter = 0, intLeaveType = -1;
            decimal TempTimeIn = 0, ReportingTime = 0, TempPreTimeOut = 0;
            string strPreviousTimeOut = "";
            try
            {

                StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                totalCnt = 0;
                oSelectedEmployee.Clear();
                for (int j = 0; j < dtEmployees.Rows.Count; j++)
                {
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(j + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        string empid = Convert.ToString(dtEmployees.GetValue("EmpCode", j));
                        oSelectedEmployee.Add(empid);
                    }
                }

                totalCnt = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Attendance Processing", totalCnt, false);
                prog.Value = 0;

                //for (int i = 0; i < dtEmployees.Rows.Count; i++)
                for (int i = 0; i < oSelectedEmployee.Count; i++)
                {
                    System.Windows.Forms.Application.DoEvents();

                    prog.Value += 1;
                    strEmpCode = oSelectedEmployee[i]; //Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    //strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    strEmpName = oEmp.FirstName + ' ' + oEmp.MiddleName + ' ' + oEmp.LastName;
                    for (DateTime x = StartDate; x <= EndDate; x = x.AddDays(1))
                    {
                        if (oEmp != null)
                        {
                            bool IsHoliday = false, IsPublicHoliday = false;
                            bool flgActualTimeOutOverlap = false;
                            bool flgActualTimeInOverlap = false;
                            strDesc = string.Empty;
                            strTimeIn = string.Empty;
                            strTimeOut = string.Empty;
                            strWorkHours = string.Empty;
                            strShortHours = string.Empty;
                            shiftTimeIn = string.Empty;
                            shiftTimeOut = string.Empty;
                            shiftHours = string.Empty;
                            shiftBufferTimeIn = string.Empty;
                            shiftBufferTimeOut = string.Empty;
                            StartGraceTime = string.Empty;
                            EndGraceTime = string.Empty;
                            strOverTimeHours = string.Empty;
                            strLateInMinutes = string.Empty;
                            strEarlyOutMinutes = string.Empty;
                            strStatus = string.Empty;
                            strLeaveHours = string.Empty;
                            strLeaveType = string.Empty;
                            strOverTimeType = string.Empty;
                            strLeaveTypeCode = string.Empty;
                            strDeductionRule = string.Empty;
                            flgLeaveIsNew = false;
                            flgOverTime = false;
                            flgInOverLap = false;
                            flgOutOverLap = false;
                            flgProcessed = false;
                            flgPosted = false;

                            flgShiftExpectedIn = false;
                            flgShiftExpectedOut = false;
                            intLeaveType = -1;
                            LeaveCount = 0;
                            strDesc = "";
                            strDay = string.Empty;
                            strRemarks = string.Empty;
                            strTotalWorkingHours = string.Empty;
                            string EmpCalenderID = oEmp.EmpCalender;
                            dtError = x;

                            flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                            where a.Date == x && a.EmpID == oEmp.ID
                                            select a.Processed).FirstOrDefault() ?? false;

                            flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                         where a.Date == x && a.EmpID == oEmp.ID
                                         select a.FlgPosted).FirstOrDefault() ?? false;

                            if (flgPosted) continue;

                            string dayofWeeks = Convert.ToString(x.DayOfWeek);
                            decimal decShiftTimeIn = 0M;
                            decimal decShiftTimeOut = 0M;
                            decimal decTimeIn = 0M;
                            decimal decTimeOut = 0M;
                            decimal decTimeOutCheck24Hrs = 0M;
                            decimal Time24Hours = ConvertTimeToDecimal("23:59");
                            decimal decBufferTimeIn = 0M;

                            if (!flgProcessed)
                            {
                                #region Read from temp attendance
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();
                                if (oAttendanceRegister != null)
                                {
                                    #region Shift Data
                                    strDay = string.IsNullOrEmpty(oAttendanceRegister.DateDay) ? "" : oAttendanceRegister.DateDay;
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails
                                                       where a.Day == dayofWeeks
                                                       && a.ShiftID == oAttendanceRegister.MstShifts.Id
                                                       select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftReportingTime = shiftTimeIn;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        StartGraceTime = ShiftDetail.StartGraceTime;
                                        EndGraceTime = ShiftDetail.EndGraceTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap == null ? false : ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                                        flgShiftExpectedIn = ShiftDetail.FlgExpectedIn == null ? false : ShiftDetail.FlgExpectedIn.Value;
                                        flgShiftExpectedOut = ShiftDetail.FlgExpectedOut == null ? false : ShiftDetail.FlgExpectedOut.Value;
                                        decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                        decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);

                                    }
                                    #endregion

                                    DateTime nextDay = x.AddDays(1);
                                    DateTime previosDay = x.AddDays(-1);

                                    var TempAttendanceList = (from a in dbHrPayroll.TrnsTempAttendance
                                                              where a.EmpID == oEmp.EmpID
                                                              && a.PunchedDate >= StartDate
                                                              && a.PunchedDate <= EndDate
                                                              //select a).ToList();
                                                              select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendance = (from a in dbHrPayroll.TrnsTempAttendance
                                                          where a.EmpID == oEmp.EmpID
                                                          && a.PunchedDate == x
                                                          //select a).ToList();
                                                          select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendanceNextDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                 where a.EmpID == oEmp.EmpID
                                                                 && a.PunchedDate == nextDay
                                                                 //select a).ToList();
                                                                 select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendancePreviousDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                     where a.EmpID == oEmp.EmpID
                                                                     && a.PunchedDate == previosDay
                                                                     select a).ToList();

                                    decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                    decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                    decBufferTimeIn = ConvertTimeToDecimal(shiftBufferTimeIn);

                                    TempTimeIn = CalculateStringTime(strTimeIn);
                                    ReportingTime = CalculateStringTime(shiftReportingTime);
                                    decimal decGetTotalHours = 0, decProductiveHours = 0;
                                    double decShortHours = 0;
                                        // clsShortHrs.Visible = true;
                                        #region Working Hours on the basis of Multipule Time In and Outs
                                        #region Get data from temp attendance
                                        //clsShortHrs.Visible = false;
                                        if (!flgInOverLap && !flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = false;
                                            flgActualTimeInOverlap = false;

                                            if (TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));

                                                if (flgShiftExpectedOut)
                                                {
                                                    flgActualTimeOutOverlap = true;

                                                    strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                    strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                    strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                    if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                    {

                                                        TempTimeIn = CalculateStringTime(strTimeIn);
                                                        TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            strTimeOut = strPreviousTimeOut;
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                    else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                    {

                                                        TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                        TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            strTimeOut = "";
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    #region If Employee Time Out After 00:00
                                                    decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                                    decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                                    if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                                    {
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                    else
                                                    {
                                                        flgActualTimeOutOverlap = true;

                                                        if (TempAttendance.Count > 0)
                                                        {
                                                            strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                            strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                            strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                            {

                                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    strTimeOut = strPreviousTimeOut;
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                            {
                                                                TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    strTimeOut = "";
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                        }

                                                    }
                                                    #endregion
                                                }

                                            }

                                        }
                                        else if (!flgInOverLap && flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = true;
                                            flgActualTimeInOverlap = false;

                                            if (TempAttendance.Count > 0)
                                            {


                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));

                                                if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(strTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        strTimeOut = strPreviousTimeOut;
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                                else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        strTimeOut = "";
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                            }
                                        }
                                        else if (flgInOverLap && !flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = false;
                                            flgActualTimeInOverlap = true;


                                            if (TempAttendance.Count > 0 && TempAttendancePreviousDay.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                            }
                                        }

                                        decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                        decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                        {
                                            flgActualTimeOutOverlap = false;
                                        }
                                        else
                                        {
                                            flgActualTimeOutOverlap = true;
                                        }
                                        if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                        {
                                            strWorkHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                            if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == false)
                                            {

                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                ReportingTime = CalculateStringTime(shiftReportingTime);
                                                if (TempTimeIn < ReportingTime)
                                                {
                                                    strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                }
                                                else
                                                {
                                                    strTotalWorkingHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                }
                                            }
                                        }

                                        strStandardWorkingHours = "00:00";
                                        if (CompanyName.ToLower() == "spell")
                                        {
                                            decimal TemShiftHours = 0, TempWorkingHours = 0;
                                            TemShiftHours = CalculateStringTime(shiftHours);
                                            TempWorkingHours = CalculateStringTime(strWorkHours);
                                            if (TempWorkingHours > TemShiftHours)
                                            {
                                                strStandardWorkingHours = shiftHours;
                                            }
                                            else
                                            {
                                                strStandardWorkingHours = strWorkHours;
                                            }
                                        }
                                        decGetTotalHours = 0; decProductiveHours = 0;
                                        decShortHours = 0;
                                        string strGetTotalHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                        decGetTotalHours = CalculateStringTime(strGetTotalHours);
                                        decProductiveHours = CalculateStringTime(strWorkHours);
                                        if (decGetTotalHours > decProductiveHours)
                                        {
                                            decShortHours = Convert.ToDouble(decGetTotalHours - decProductiveHours);

                                            TimeSpan ShortDuration = TimeSpan.FromMinutes(decShortHours);
                                            string output = ShortDuration.ToString("h\\:mm");
                                            int hrs = ShortDuration.Hours;
                                            int mint = ShortDuration.Minutes;
                                            strShortHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                        }

                                        #endregion
                                    //If Set for Off Day
                                    #region Off Day Working.

                                    //if (oAttendanceRegister.FlgOffDay != null)
                                    //{
                                    //    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    //    {
                                    //        //shiftTimeIn = "00:00";
                                    //        //shiftTimeOut = "00:00";
                                    //        //shiftHours = "00:00";
                                    //        //shiftBufferTimeIn = "00:00";
                                    //        //shiftBufferTimeOut = "00:00";
                                    //    }
                                    //}

                                    #endregion

                                    //Weekend Calculation
                                    #region Weekend

                                    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                    }
                                    #endregion

                                    //Public Holiday Calculation   
                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            IsPublicHoliday = true;
                                            strDesc = "Off Day";
                                            strRemarks = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion

                                    //Calculate LateIn Minutes
                                    #region Calculate LateIn Minutes
                                    if (!string.IsNullOrEmpty(strTimeIn))
                                    {
                                        strLateInMinutes = CalculateLateInMinutesStandard(shiftTimeIn, strTimeIn, flgOutOverLap, flgActualTimeInOverlap);
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                            }
                                            else
                                            {
                                                //MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes);
                                                //return;
                                                //strLateInMinutes = "00:00";
                                                //strStatus += " Wrong TimeIn/LateIn Need Review ";
                                            }
                                        }
                                        //Buffer Period  Included Here                                      

                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            #region Company Level Grace Time
                                            string BufferInTime = AttendanceRule.GpAfterStartTime;
                                            if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Shift Grace Time
                                            if (!string.IsNullOrEmpty(StartGraceTime) && StartGraceTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(StartGraceTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                            #endregion
                                        }


                                    }
                                    else
                                    {
                                        strLateInMinutes = "00:00";
                                    }
                                    #endregion

                                    //Calculate Earlyout Minutes
                                    #region Calculate Earlyout Minutes
                                    if (!string.IsNullOrEmpty(strTimeOut))
                                    {

                                        //if (strTimeIn != null)
                                        decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                        if (!string.IsNullOrEmpty(strTimeIn) && strTimeIn != "00:00")
                                        {
                                            decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        }
                                        else
                                        {
                                            decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                        }
                                        if (decShiftTimeIn > decTimeOut && flgOutOverLap == false)
                                        {
                                            //Do Nothing
                                            strEarlyOutMinutes = "00:00";
                                        }
                                        else
                                        {
                                            strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                            if (!string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strEarlyOutMinutes, shiftName).FirstOrDefault();
                                                if (GetDeductionRules != null)
                                                {
                                                    string DeductionType = GetDeductionRules.DeductionRuleType;
                                                    int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                    bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }
                                                else
                                                {
                                                    //MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes + " on Date " + x);
                                                    //return;
                                                    //strEarlyOutMinutes = "00:00";
                                                    //strStatus += " Wrong TimeOut/EarlyOut Need Review. ";
                                                    var DeductionAttendanceRule = (from a in dbHrPayroll.TrnsDeductionRulesDetail
                                                                                   where a.FKID == a.TrnsDeductionRules.ID
                                                                                   && a.TrnsDeductionRules.ID == ShiftDetail.MstShifts.DeductionRuleID
                                                                                   && a.Code == "DR_03"
                                                                                   select a).FirstOrDefault();
                                                    if (DeductionAttendanceRule != null)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == DeductionAttendanceRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = shiftHours;
                                                        LeaveCount = Convert.ToDecimal(DeductionAttendanceRule.LeaveCount);
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = DeductionAttendanceRule.Code;
                                                    }


                                                }
                                            }

                                            var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                            if (AttendanceRule != null)
                                            {
                                                #region Company Level Grace
                                                string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region Shift End Grace Time
                                                if (!string.IsNullOrEmpty(EndGraceTime) && EndGraceTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(EndGraceTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                                #endregion
                                            }


                                        }
                                    }
                                    else
                                    {
                                        strEarlyOutMinutes = "00:00";
                                    }
                                    #endregion

                                    // Status is not in Use in Current Version
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        if (string.IsNullOrEmpty(strStatus))
                                        {
                                            strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                        }
                                    }
                                    //Calculate OverTime Here   
                                        #region Calculate OverTime Here
                                        if (!string.IsNullOrEmpty(strWorkHours))
                                        {
                                            decimal decWorkHours = ConvertTimeToDecimal(strWorkHours);
                                            decimal decshiftHours = ConvertTimeToDecimal(shiftHours);
                                            Boolean flgPayroll = false;
                                            flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);

                                            if (Convert.ToBoolean(oEmp.FlgOTApplicable))
                                            {
                                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay) || (IsHoliday == true))
                                                {
                                                    //if (Convert.ToBoolean(oEmp.FlgOffDayApplicable) || (IsHoliday == true))

                                                    strOverTimeHours = strWorkHours;
                                                    if (IsHoliday == true && ShiftDetail.MstShifts.FlgHoliDayOverTime.GetValueOrDefault() == true)
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegister.MstShifts.HoliDayOverTimeMstOverTime.ID
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                    else if (ShiftDetail.MstShifts.FlgOffDayOverTime.GetValueOrDefault() == true)
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                    else if (flgPayroll)
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }

                                                }
                                                //else if (decWorkHours > decshiftHours)
                                                else
                                                {

                                                    if (decWorkHours > decshiftHours)
                                                    {
                                                        //Overtime offday logic commented as used above.
                                                        string strInOverTime = "00:00";
                                                        string strOutOverTime = "00:00";
                                                        Time24Hours = ConvertTimeToDecimal("23:59");
                                                        //decimal decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);

                                                        #region  OverTime from Shift

                                                        if (!flgPayroll)
                                                        {
                                                            flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;

                                                            if (!flgOverTime)
                                                            {
                                                                strOverTimeHours = "";
                                                                strOverTimeType = "";
                                                            }
                                                            else
                                                            {
                                                                bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                                bool flgShiftOTWorkHours = oAttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegister.MstShifts.FlgOTWrkHrs.Value;
                                                                if (flgShiftOTWorkHours)
                                                                {
                                                                    if (flgEmployeeOTCheck)
                                                                    {
                                                                        strOverTimeHours = CalculateOverTimeISM(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours, flgOutOverLap, flgActualTimeOutOverlap);

                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeHours = "";
                                                                        strOverTimeType = "";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (flgEmployeeOTCheck)
                                                                    {
                                                                        if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                                        {
                                                                            shiftBufferTimeIn = shiftTimeIn;
                                                                        }
                                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                                        {
                                                                            shiftBufferTimeOut = shiftTimeOut;
                                                                        }
                                                                        strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                                        if (strInOverTime != "00:00")
                                                                        {
                                                                            //CalculateIN Overtime AccordingToShift
                                                                            strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                                        }
                                                                        decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                                                        decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);
                                                                        //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                        //{
                                                                        //    strOutOverTime = strWorkHours;
                                                                        //}
                                                                        if (decTimeOut <= Time24Hours && decShiftTimeIn > decTimeOut)
                                                                        {
                                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                                        }
                                                                        else if (decTimeOut > decshiftBufferTimeOut)
                                                                        {
                                                                            //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                            //{
                                                                            //    strOutOverTime = strWorkHours;
                                                                            //}
                                                                            //else
                                                                            //{
                                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                                            //}

                                                                        }

                                                                        if (strOutOverTime != "00:00")
                                                                        {
                                                                            //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);

                                                                            //strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                                            if (flgActualTimeOutOverlap == true)
                                                                            {
                                                                                strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                                            }
                                                                            else
                                                                            {
                                                                                //strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut);
                                                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                                            }

                                                                        }

                                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);

                                                                    }

                                                                    else
                                                                    {
                                                                        strOverTimeHours = "";
                                                                    }
                                                                }
                                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                                {

                                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                       where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                       select a.Code).FirstOrDefault() ?? "";
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeType = "";
                                                                }
                                                            }
                                                        }
                                                        #endregion

                                                        #region OverTime from Payroll
                                                        else
                                                        {

                                                            if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                            {
                                                                shiftBufferTimeIn = shiftTimeIn;
                                                            }
                                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                            {
                                                                shiftBufferTimeOut = shiftTimeOut;
                                                            }
                                                            strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                            if (strInOverTime != "00:00")
                                                            {
                                                                //CalculateIN Overtime AccordingToShift
                                                                strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                            }
                                                            //strOutOverTime = IFOutOvertimeApplicableSSL(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                            //IFOutOvertimeApplicableStandrad
                                                            if (strOutOverTime != "00:00")
                                                            {
                                                                //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                            }
                                                            if (decTimeIn > decShiftTimeIn)
                                                            {
                                                                strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                            }
                                                            //OverTime on Weekend
                                                            if (shiftHours == "00:00")
                                                            {
                                                                strOverTimeHours = strWorkHours;
                                                            }
                                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                            {
                                                                //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                   where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                                   select a.Code).FirstOrDefault() ?? "";
                                                            }

                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                strOverTimeHours = "";
                                                strOverTimeType = "";
                                            }
                                        }
                                        #endregion
                                    //Calculate New Leaves Structured.
                                    #region Calculate Leaves
                                    //Full Days Leave Absent
                                    #region Full Leave Case
                                    if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && shiftHours != "00:00")
                                    {

                                        var PostedLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                           where a.MstEmployee.EmpID == oEmp.EmpID
                                                           && a.LeaveFrom <= x && a.LeaveTo >= x && a.DocAprStatus == "LV0006"
                                                           select a).FirstOrDefault();
                                        if (PostedLeave != null)
                                        {
                                            strLeaveHours = "00:00";
                                            LeaveCount = 0M;
                                            strLeaveType = "";
                                            strLeaveTypeCode = "";
                                            intLeaveType = 0;
                                            flgLeaveIsNew = false;
                                            strDeductionRule = "";
                                            strDesc = "Leave already Posted.";
                                        }
                                        else
                                        {
                                            if (oAttendanceRegister.FlgOffDay != true)
                                            {
                                                if (Program.systemInfo.FlgAbsent == true)
                                                {

                                                }
                                                if ((oEmp.DefaultOffDay != null ? oEmp.DefaultOffDay.ToLower() : "") != dayofWeeks.ToLower())
                                                {
                                                    var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                                    where a.Code == "DR_03"
                                                                    select a).FirstOrDefault();

                                                    if (oDedRule != null)
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = shiftHours;
                                                            LeaveCount = 1.0M;
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            //strDesc = "";
                                                        }
                                                        else
                                                        {
                                                            MsgError("Leave Type not selected in deduction rule 3.");
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion


                                    //Work Hour differ's from Shift Hours
                                    #region Work Hour Differs Shift Hours
                                    if (!string.IsNullOrEmpty(strWorkHours) && shiftHours != "00:00")
                                    {
                                        if ((oEmp.DefaultOffDay != null ? oEmp.DefaultOffDay.ToLower() : "") != dayofWeeks.ToLower())
                                        {
                                            string TempLeaveHours = "";
                                            TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, strWorkHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);
                                            if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                            {
                                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                if (oDedRule != null)
                                                {
                                                    if (oDedRule.Code == "DR_02")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;// CalculateHalfShiftHours(shiftHours);
                                                            LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                    else if (oDedRule.Code == "DR_01")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;
                                                            LeaveCount = GetLeaveCountOnMinLeaves(strLeaveHours, shiftHours);
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                    else if (oDedRule.Code == "DR_03")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;
                                                            LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    #endregion
                                    //Time In / Time Out Missing.
                                    #region Time In,Out Missing.
                                    if (((string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut)) ||
                                            (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)))
                                        && (Convert.ToBoolean(Program.systemInfo.FlgAbsent.GetValueOrDefault()))
                                        && !(Convert.ToBoolean(oAttendanceRegister.FlgOffDay.GetValueOrDefault()))
                                        && !IsHoliday)
                                    {
                                        var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                        if (oAttRule != null)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                            if (oLeaveMaster != null)
                                            {
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = oLeaveMaster.Description;
                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                intLeaveType = oLeaveMaster.ID;
                                                flgLeaveIsNew = true;
                                                strDeductionRule = "DR_03";
                                            }
                                        }
                                    }
                                    else if (((string.IsNullOrEmpty(strTimeIn) || string.IsNullOrEmpty(strTimeOut)))
                                        && (Convert.ToBoolean(Program.systemInfo.FlgAbsent == false))
                                        && (Convert.ToBoolean(oAttendanceRegister.FlgOffDay == false)))
                                    {
                                        LeaveCount = 0.0M;
                                        strLeaveTypeCode = "";
                                        flgLeaveIsNew = false;
                                    }
                                    #endregion

                                    #endregion

                                    if (strLeaveHours.Trim() == "")
                                    {
                                        strLeaveHours = "00:00";
                                    }
                                    if (strOverTimeHours.Trim() == "")
                                    {
                                        strOverTimeHours = "00:00";
                                    }

                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegister.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue(clDay.DataBind.Alias, RecordCounter, strDay);
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("ReportingTime", RecordCounter, shiftReportingTime.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("ShortHours", RecordCounter, strShortHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.0000}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue("AdjHrs", RecordCounter, "00:00");
                                    dtAttendance.SetValue("TotalHrs", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTAdjt", RecordCounter, "00:00");
                                    dtAttendance.SetValue("StandHrs", RecordCounter, strStandardWorkingHours);
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clRemarks.DataBind.Alias, RecordCounter, strRemarks);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    if (oEmp.JoiningDate > x)
                                    {
                                        //oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " is New Joiner, date of joining is: " + Convert.ToDateTime(oEmp.JoiningDate).ToString("MM/dd/yyyy") + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    }
                                    else
                                    {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                }
                                #endregion
                            }

                            else
                            {
                                #region Read from saved attendance
                                IsHoliday = false;
                                IsPublicHoliday = false;
                                var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                select a).FirstOrDefault();
                                if (oAttendanceRegisterSaved != null)
                                {
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegisterSaved.MstShifts.Description) ? "" : oAttendanceRegisterSaved.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegisterSaved.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                    }
                                    strStatus = "";
                                    strTimeIn = oAttendanceRegisterSaved.TimeIn;
                                    strTimeOut = oAttendanceRegisterSaved.TimeOut;
                                    strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                    strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                    strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                    strOverTimeHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour) ? "" : oAttendanceRegisterSaved.OTHour;
                                    strDeductionRule = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveDedRule) ? "" : oAttendanceRegisterSaved.LeaveDedRule.Trim();
                                    strLeaveType = oAttendanceRegisterSaved.LeaveType == null ? "" : Convert.ToString(oAttendanceRegisterSaved.LeaveType);
                                    strDesc = oAttendanceRegisterSaved.Description == null ? "" : (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) ? "Off Day" : "");
                                    strLeaveHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveHour) ? "" : oAttendanceRegisterSaved.LeaveHour;
                                    flgLeaveIsNew = Convert.ToBoolean(oAttendanceRegisterSaved.FlgIsNewLeave);
                                    strRemarks = string.IsNullOrEmpty(oAttendanceRegisterSaved.Remarks) ? "" : oAttendanceRegisterSaved.Remarks;
                                    strDay = string.IsNullOrEmpty(oAttendanceRegisterSaved.DateDay) ? "" : oAttendanceRegisterSaved.DateDay;
                                    strPreTimeIn = string.IsNullOrEmpty(oAttendanceRegisterSaved.PreTimeIn) ? "" : oAttendanceRegisterSaved.PreTimeIn;
                                    strPreTimeOut = string.IsNullOrEmpty(oAttendanceRegisterSaved.PreTimeOut) ? "" : oAttendanceRegisterSaved.PreTimeOut;
                                    strStandardWorkingHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.StandardPaidHours) ? "" : oAttendanceRegisterSaved.StandardPaidHours;
                                    shiftReportingTime = string.IsNullOrEmpty(oAttendanceRegisterSaved.ReportingTime) ? "" : oAttendanceRegisterSaved.ReportingTime;
                                    strOtAdjustment = string.IsNullOrEmpty(oAttendanceRegisterSaved.OvertimeAdjustment) ? "" : oAttendanceRegisterSaved.OvertimeAdjustment;
                                    strShortHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.ShortHours) ? "" : oAttendanceRegisterSaved.ShortHours;
                                    #region Weekend
                                    if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                        IsHoliday = true;
                                    }

                                    if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay))
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                        IsHoliday = true;
                                        if (!string.IsNullOrEmpty(strWorkHours) && strWorkHours != "00:00")
                                        {
                                            bool flgShiftOffDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.OverTime.Value;
                                            if (flgShiftOffDayOTHours)
                                            {
                                                strOverTimeHours = strWorkHours;
                                                if (flgShiftOffDayOTHours)
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegisterSaved.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            IsPublicHoliday = true;
                                            strDesc = "Off Day";
                                            strRemarks = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion

                                    #region Calculate OverTime Here

                                    if (!string.IsNullOrEmpty(strWorkHours) && strWorkHours != "00:00")
                                    {
                                        decimal decWorkHours = ConvertTimeToDecimal(strWorkHours);
                                        decimal decshiftHours = ConvertTimeToDecimal(shiftHours);
                                        bool flgEmployeeOTCheck = oAttendanceRegisterSaved.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegisterSaved.MstEmployee.FlgOTApplicable.Value;
                                        bool flgShiftOTHours = oAttendanceRegisterSaved.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegisterSaved.MstShifts.FlgOTWrkHrs.Value;
                                        bool flgShiftOffDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime.Value;
                                        bool flgShiftHoliDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgHoliDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.FlgHoliDayOverTime.Value;
                                        Boolean flgOvertimePayrollSetup = oEmp.CfgPayrollDefination.FlgOT != null ? Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT) : false;
                                        Boolean flgPayroll = false;
                                        flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                        if (flgEmployeeOTCheck)
                                        {
                                            if (flgShiftOffDayOTHours || flgShiftOTHours || flgShiftHoliDayOTHours)
                                            {
                                                if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) || (IsHoliday == true) || IsPublicHoliday == true)
                                                {
                                                    if (flgShiftOffDayOTHours || flgShiftHoliDayOTHours || IsHoliday == true || IsPublicHoliday == true)
                                                    {
                                                        strOverTimeHours = strWorkHours;
                                                        if (IsPublicHoliday == true && flgShiftHoliDayOTHours)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.MstShifts.HoliDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else if (flgShiftOffDayOTHours && Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay))
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else if (flgOvertimePayrollSetup)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.OTType
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegisterSaved.OTType
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                }
                                            }
                                            else if (flgPayroll)
                                            {
                                                if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegisterSaved.OTType
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                            }
                                        }

                                    }
                                    #endregion

                                    if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) || (IsHoliday == true))
                                    {
                                        strLeaveTypeCode = "-1";
                                        LeaveCount = 0;
                                        flgLeaveIsNew = false;
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(strLeaveType))
                                        {
                                            strLeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID.ToString() == strLeaveType select a.Code).FirstOrDefault() ?? "";
                                            LeaveCount = Convert.ToDecimal(oAttendanceRegisterSaved.LeaveCount);

                                        }
                                    }
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }


                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegisterSaved.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue(clDay.DataBind.Alias, RecordCounter, strDay);
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("ReportingTime", RecordCounter, shiftReportingTime.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("ShortHours", RecordCounter, strShortHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.0000}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue("AdjHrs", RecordCounter, "00:00");
                                    dtAttendance.SetValue("TotalHrs", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTAdjt", RecordCounter, strOtAdjustment.Trim());
                                    dtAttendance.SetValue("StandHrs", RecordCounter, strStandardWorkingHours);
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clRemarks.DataBind.Alias, RecordCounter, strRemarks);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                        }
                    }
                    prog.Text = "(" + prog.Value.ToString() + " of " + totalCnt.ToString() + " ) Attendance Processing of EmpID--> " + strEmpCode + "";
                }
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
                #region Company wise Logics               
                if (Program.systemInfo.FlgLateInEarlyOutLeaveRules == true)
                {
                    CalculatingLateInOrEarlyOut();
                }
                else if (CompanyName.ToLower() == "ssl")
                {
                    ApplyDeductionsSSL();
                }
                var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                       select a).FirstOrDefault();
                if (oAttendanceRule != null)
                {
                    if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                    {
                        SandWichLeave();
                    }
                }
                if (CompanyName.ToLower() == "ism")
                {
                    SandWichLeave();
                }
                #endregion
                if (flgDirectSave == true)
                {
                    SaveAttendanceRecordStandard();
                }
                grdAttendance.LoadFromDataSource();



            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error loading records EmpCode : " + strEmpCode + " Date : " + dtError.ToString("MM/dd/yyyy") + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                }
                prog = null;
            }
        }

        private void LoadEmployeeAttendanceRecordStandardDirectSave()
        {
            SAPbouiCOM.ProgressBar prog = null;
            DateTime StartDate = DateTime.MinValue, dtError = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            string strEmpCode = string.Empty, strEmpName, strWorkHours, strShortHours, strTotalWorkingHours, strDesc, shiftName, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, StartGraceTime, EndGraceTime;
            string shiftHours, strTimeIn = "00:00", strTimeOut = "00:00", strOverTimeHours, strOverTimeType, strEarlyOutMinutes, strLeaveHours, strLeaveType, strLeaveTypeCode, strStatus, strDeductionRule;
            string strLateInMinutes, strStandardWorkingHours = "00:00", shiftReportingTime = "00:00", strOtAdjustment = "00:00";
            string strDay, strRemarks, strPreTimeIn, strPreTimeOut;
            Boolean flgOverTime, flgLeaveIsNew, flgInOverLap, flgOutOverLap, flgProcessed, flgNewImport, flgPosted, flgShiftExpectedOut, flgShiftExpectedIn;
            decimal LeaveCount = 0;
            int RecordCounter = 0, intLeaveType = -1;
            decimal TempTimeIn = 0, ReportingTime = 0, TempPreTimeOut = 0;
            string strPreviousTimeOut = "";
            try
            {
                StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);


                totalCnt = 0;
                oSelectedEmployee.Clear();
                for (int j = 0; j < dtEmployees.Rows.Count; j++)
                {

                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(j + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        string empid = Convert.ToString(dtEmployees.GetValue("EmpCode", j));
                        oSelectedEmployee.Add(empid);

                    }
                }

                totalCnt = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Attendance Processing", totalCnt, false);
                prog.Value = 0;
                for (int i = 0; i < oSelectedEmployee.Count; i++)
                // for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    System.Windows.Forms.Application.DoEvents();
                    //bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    //if (!ifSelected)
                    //{
                    //    continue;
                    //}
                    prog.Value += 1;
                    strEmpCode = oSelectedEmployee[i]; //Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    //strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    strEmpName = oEmp.FirstName + ' ' + oEmp.MiddleName + ' ' + oEmp.LastName;
                    for (DateTime x = StartDate; x <= EndDate; x = x.AddDays(1))
                    {
                        if (oEmp != null)
                        {
                            bool IsHoliday = false, IsPublicHoliday = false;
                            bool flgActualTimeOutOverlap = false;
                            bool flgActualTimeInOverlap = false;
                            strDesc = string.Empty; strTimeIn = string.Empty; strTimeOut = string.Empty;
                            strWorkHours = string.Empty; shiftTimeIn = string.Empty; shiftTimeOut = string.Empty;
                            shiftHours = string.Empty; shiftBufferTimeIn = string.Empty; shiftBufferTimeOut = string.Empty;
                            StartGraceTime = string.Empty; EndGraceTime = string.Empty; strOverTimeHours = string.Empty;
                            strLateInMinutes = string.Empty; strEarlyOutMinutes = string.Empty;
                            strStatus = string.Empty; strLeaveHours = string.Empty; strLeaveType = string.Empty;
                            strOverTimeType = string.Empty; strLeaveTypeCode = string.Empty;
                            strDeductionRule = string.Empty; flgLeaveIsNew = false; flgOverTime = false;
                            flgInOverLap = false; flgOutOverLap = false; flgProcessed = false;
                            flgPosted = false; flgShiftExpectedIn = false; flgShiftExpectedOut = false;
                            intLeaveType = -1; LeaveCount = 0; strDesc = "";
                            strDay = string.Empty; strRemarks = string.Empty;
                            shiftBufferTimeIn = string.Empty;
                            shiftBufferTimeOut = string.Empty;
                            strTotalWorkingHours = string.Empty;
                            strShortHours = string.Empty;
                            string EmpCalenderID = oEmp.EmpCalender;
                            dtError = x;

                            flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                            where a.Date == x && a.EmpID == oEmp.ID
                                            select a.Processed).FirstOrDefault() ?? false;

                            //flgNewImport = (from a in dbHrPayroll.TrnsTempAttendance
                            //                where a.PunchedDate == x && a.EmpID == oEmp.EmpID
                            //                orderby a.ID descending
                            //                select (a.FlgProcessed != null ? a.FlgProcessed : false)).FirstOrDefault() ?? false;

                            flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                         where a.Date == x && a.EmpID == oEmp.ID
                                         select a.FlgPosted).FirstOrDefault() ?? false;
                            if (flgPosted) continue;
                            string dayofWeeks = Convert.ToString(x.DayOfWeek);

                            decimal decTimeOutCheck24Hrs = 0M;
                            decimal Time24Hours = ConvertTimeToDecimal("23:59");
                            decimal decShiftTimeIn = 0M;
                            decimal decShiftTimeOut = 0M;
                            decimal decTimeIn = 0M;
                            decimal decTimeOut = 0M;
                            decimal decBufferTimeIn = 0M;
                            if (!flgProcessed)
                            {
                                #region Read from temp attendance
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();
                                if (oAttendanceRegister != null)
                                {
                                    #region Shift Data
                                    strDay = string.IsNullOrEmpty(oAttendanceRegister.DateDay) ? "" : oAttendanceRegister.DateDay;
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails
                                                       where a.Day == dayofWeeks
                                                       && a.ShiftID == oAttendanceRegister.MstShifts.Id
                                                       select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftReportingTime = shiftTimeIn;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        StartGraceTime = ShiftDetail.StartGraceTime;
                                        EndGraceTime = ShiftDetail.EndGraceTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap == null ? false : ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap == null ? false : ShiftDetail.FlgOutOverlap.Value;
                                        flgShiftExpectedIn = ShiftDetail.FlgExpectedIn == null ? false : ShiftDetail.FlgExpectedIn.Value;
                                        flgShiftExpectedOut = ShiftDetail.FlgExpectedOut == null ? false : ShiftDetail.FlgExpectedOut.Value;
                                        decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                        decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);

                                    }
                                    #endregion

                                    DateTime nextDay = x.AddDays(1);
                                    DateTime previosDay = x.AddDays(-1);

                                    var TempAttendanceList = (from a in dbHrPayroll.TrnsTempAttendance
                                                              where a.EmpID == oEmp.EmpID
                                                              && a.PunchedDate >= StartDate
                                                              && a.PunchedDate <= EndDate
                                                              //select a).ToList();
                                                              select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendance = (from a in dbHrPayroll.TrnsTempAttendance
                                                          where a.EmpID == oEmp.EmpID
                                                          && a.PunchedDate == x
                                                          //select a).ToList();
                                                          select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendanceNextDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                 where a.EmpID == oEmp.EmpID
                                                                 && a.PunchedDate == nextDay
                                                                 //select a).ToList();
                                                                 select a).OrderBy(b => b.PunchedDate).ThenBy(t => t.PunchedTime).ToList();

                                    var TempAttendancePreviousDay = (from a in dbHrPayroll.TrnsTempAttendance
                                                                     where a.EmpID == oEmp.EmpID
                                                                     && a.PunchedDate == previosDay
                                                                     select a).ToList();

                                    decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                    decShiftTimeOut = ConvertTimeToDecimal(shiftTimeOut);
                                    decBufferTimeIn = ConvertTimeToDecimal(shiftBufferTimeIn);

                                    TempTimeIn = CalculateStringTime(strTimeIn);
                                    ReportingTime = CalculateStringTime(shiftReportingTime);
                                    decimal decGetTotalHours = 0, decProductiveHours = 0;
                                    double decShortHours = 0;
                                    if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == true)
                                    {
                                        // clsShortHrs.Visible = true;
                                        #region Working Hours on the basis of Multipule Time In and Outs
                                        if (!flgInOverLap && !flgOutOverLap)
                                        {
                                            if (TempAttendance != null && TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                ReportingTime = CalculateStringTime(shiftReportingTime);
                                                if (flgShiftExpectedOut)
                                                {
                                                    flgActualTimeOutOverlap = true;


                                                    var oTempAttNext = (from a in dbHrPayroll.TrnsTempAttendance
                                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == nextDay
                                                                        select a).ToList();


                                                    strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                    strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                    strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));


                                                    if (TempTimeIn < ReportingTime)
                                                    {
                                                        //strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                        strTimeIn = shiftReportingTime;
                                                    }

                                                    if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                    {
                                                        TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            //strTimeOut = strPreviousTimeOut;
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                    else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                    {

                                                        TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            strTimeOut = "";
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                                    decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                                    if (TempTimeIn < ReportingTime)
                                                    {
                                                        //strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                        strTimeIn = shiftReportingTime;
                                                    }
                                                    if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                                    {
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                    else
                                                    {
                                                        flgActualTimeOutOverlap = true;
                                                        #region If Employee Time Out After 00:00


                                                        if (TempAttendanceNextDay.Count > 0)
                                                        {
                                                            strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                            strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                            strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                            {
                                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    //strTimeOut = strPreviousTimeOut;
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                            {

                                                                TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    strTimeOut = "";
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                }

                                            }
                                        }
                                        else if (!flgInOverLap && flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = true;
                                            flgActualTimeInOverlap = false;

                                            if (TempAttendance != null && TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                if (TempTimeIn < ReportingTime)
                                                {
                                                    //strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                    strTimeIn = shiftReportingTime;
                                                }
                                                #region Get Attendance List on Fist Time In And Last Time Out
                                                TrnsTempAttendance from = null;
                                                TrnsTempAttendance To = null;
                                                int IDFrom = 0, IDTo = 0;
                                                if (strPreviousTimeOut != null && strPreviousTimeOut != null)
                                                {
                                                    from = TempAttendance.FirstOrDefault(o => o.PunchedTime == strTimeIn);
                                                    To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == strTimeOut);
                                                    if (from != null)
                                                    {
                                                        IDFrom = from.ID;
                                                    }
                                                    if (To != null)
                                                    {
                                                        IDTo = To.ID;
                                                    }

                                                }
                                                else if (strTimeOut != null && strPreviousTimeOut == null)
                                                {
                                                    from = TempAttendance.FirstOrDefault(o => o.PunchedTime == strTimeIn);
                                                    To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == strTimeOut);
                                                    if (from != null)
                                                    {
                                                        IDFrom = from.ID;
                                                    }
                                                    if (To != null)
                                                    {
                                                        IDTo = To.ID;
                                                    }
                                                }
                                                else if (strPreviousTimeOut != null)
                                                {
                                                    from = TempAttendance.FirstOrDefault(o => o.PunchedTime == strTimeIn);
                                                    To = TempAttendance.FirstOrDefault(o => o.PunchedTime == strPreviousTimeOut);
                                                    if (from != null)
                                                    {
                                                        IDFrom = from.ID;
                                                    }
                                                    if (To != null)
                                                    {
                                                        IDTo = To.ID;
                                                    }
                                                }

                                                //List<TrnsTempAttendance> ThatDayInOuts = new List<TrnsTempAttendance>();
                                                if (from != null && To != null)
                                                {
                                                    TempAttendance = TempAttendanceList.Where(o => o.ID >= from.ID && o.ID <= To.ID).OrderBy(o => o.ID).ToList();
                                                    //TempAttendance = TempAttendanceList.Where(o => o.PunchedDate >= from.PunchedDate && o.PunchedDate <= To.PunchedDate).OrderBy(o => o.PunchedDate).ThenBy(dt => dt.PunchedTime).ToList();
                                                }
                                                #endregion

                                                if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(strTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        //strTimeOut = strPreviousTimeOut;
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                                else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        strTimeOut = "";
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                            }
                                        }
                                        else if (flgInOverLap && !flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = false;
                                            flgActualTimeInOverlap = true;
                                            if (TempAttendance.Count > 0 && TempAttendancePreviousDay.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                if (TempTimeIn < ReportingTime)
                                                {
                                                    //strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                    strTimeIn = shiftReportingTime;
                                                }
                                                #region Get Attendance List on Fist Time In And Last Time Out
                                                TrnsTempAttendance from = null;
                                                TrnsTempAttendance To = null;

                                                from = TempAttendance.FirstOrDefault(o => o.PunchedTime == strTimeIn);
                                                To = TempAttendanceNextDay.FirstOrDefault(o => o.PunchedTime == strTimeOut);
                                                int IDFrom = from.ID;
                                                int IDTo = To.ID;
                                                //List<TrnsTempAttendance> ThatDayInOuts = new List<TrnsTempAttendance>();
                                                if (from != null && To != null)
                                                {
                                                    TempAttendance = TempAttendanceList.Where(o => o.ID >= from.ID && o.ID <= To.ID).OrderBy(o => o.ID).ToList();
                                                    //TempAttendance = TempAttendanceList.Where(o => o.PunchedDate >= from.PunchedDate && o.PunchedDate <= To.PunchedDate).OrderBy(o => o.PunchedDate).ThenBy(dt => dt.PunchedTime).ToList();
                                                }
                                                #endregion
                                            }

                                        }
                                        decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                        decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                        {
                                            flgActualTimeOutOverlap = false;
                                        }
                                        else
                                        {
                                            flgActualTimeOutOverlap = true;
                                        }

                                        if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                        {

                                            #region Calculate Working Hours on The Basis of Multiple Time In And Tiome Out
                                            decimal decTempTimeIn = 0, decReportingTime = 0;
                                            t3 = TimeCalculate("00:00");

                                            //var varTimeIn = TempAttendance.Where(TimeIn => TimeIn.In_Out == "1").ToList();
                                            //var VarTimeOut = TempAttendance.Where(TimeIn => TimeIn.In_Out == "2").ToList();

                                            List<int> processedInOuts = new List<int>();
                                            for (int a = 0; a < TempAttendance.Count; a = a + 2)
                                            {
                                                try
                                                {
                                                    string strTIn = "", strTOut = "";

                                                    var InOUTSorted = TempAttendance.Select(o =>
                                                        new
                                                        {
                                                            o.ID,
                                                            o.PunchedDate,
                                                            pTime = int.Parse(o.PunchedTime.Replace(":", "")),
                                                            o.PunchedTime,
                                                            o.In_Out,
                                                        }).OrderBy(o => o.In_Out).ThenBy(o => o.pTime).ToList();

                                                    //strTIn = TempAttendance[a].PunchedTime == null ? "" : TempAttendance[a].PunchedTime;
                                                    //strTOut = TempAttendance[a + 1].PunchedTime == null ? "" : TempAttendance[a + 1].PunchedTime;
                                                    var firsInRec = InOUTSorted.Where(o => o.In_Out == "1" && !processedInOuts.Contains(o.ID)).FirstOrDefault();

                                                    var firsOut = InOUTSorted.Where(o => o.In_Out == "2" && !processedInOuts.Contains(o.ID)).FirstOrDefault();
                                                    strTIn = (firsInRec == null ? "" : firsInRec.PunchedTime);
                                                    strTOut = (firsOut == null ? "" : firsOut.PunchedTime);
                                                    if (firsInRec != null) processedInOuts.Add(firsInRec.ID);
                                                    if (firsOut != null) processedInOuts.Add(firsOut.ID);
                                                    decimal decPunchTime = ConvertTimeToDecimal(strTIn);


                                                    decTempTimeIn = CalculateStringTime(strTIn);
                                                    if (decTempTimeIn < ReportingTime)
                                                    {
                                                        strTIn = shiftReportingTime;
                                                    }

                                                    if (!string.IsNullOrEmpty(strTIn) && !string.IsNullOrEmpty(strTOut))
                                                    {
                                                        if (decPunchTime > decBufferTimeIn)
                                                        {
                                                            string TempWorkingHrs = CalculateWorkHoursMEPL(strTIn, strTOut);
                                                            strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempWorkingHrs);
                                                            TimeSpan t1 = TimeCalculate(TempWorkingHrs);
                                                            TimeSpan t2 = TimeCalculate("00:00");

                                                            t3 = t3 + t1.Add(t2);

                                                            totalunit = Math.Round((t3.TotalMinutes), 0);
                                                            var ActualDuration = TimeSpan.FromMinutes(totalunit);
                                                            int hrs = ActualDuration.Hours;
                                                            int mint = ActualDuration.Minutes;
                                                            wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                        }
                                                        else
                                                        {
                                                            string TempBufferTime = CalculateWorkHoursMEPL(shiftBufferTimeIn, strTOut);
                                                            strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempBufferTime);
                                                            TimeSpan t1 = TimeCalculate(TempBufferTime);
                                                            TimeSpan t2 = TimeCalculate("00:00");
                                                            t3 = t3 + t1.Add(t2);
                                                            totalunit = Math.Round((t3.TotalMinutes), 0);
                                                            var ActualDuration = TimeSpan.FromMinutes(totalunit);
                                                            int hrs = ActualDuration.Hours;
                                                            int mint = ActualDuration.Minutes;
                                                            wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                        }
                                                    }
                                                    strWorkHours = wr;
                                                    strTotalWorkingHours = wr;
                                                    string strWorkMints = Convert.ToString(totalunit);
                                                    strStandardWorkingHours = "00:00";
                                                    if (CompanyName.ToLower() == "spell")
                                                    {
                                                        decimal TemShiftHours = 0, TempWorkingHours = 0;
                                                        TemShiftHours = CalculateStringTime(shiftHours);
                                                        TempWorkingHours = CalculateStringTime(strWorkHours);
                                                        if (TempWorkingHours > TemShiftHours)
                                                        {
                                                            strStandardWorkingHours = shiftHours;
                                                        }
                                                        else
                                                        {
                                                            strStandardWorkingHours = strWorkHours;
                                                        }
                                                    }
                                                    decGetTotalHours = 0; decProductiveHours = 0;
                                                    decShortHours = 0;
                                                    decTempTimeIn = CalculateStringTime(strTimeIn);
                                                    if (decTempTimeIn < ReportingTime)
                                                    {
                                                        strTimeIn = shiftReportingTime;
                                                    }
                                                    string strGetTotalHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                    decGetTotalHours = CalculateStringTime(strGetTotalHours);
                                                    decProductiveHours = CalculateStringTime(strWorkHours);
                                                    if (decGetTotalHours > decProductiveHours)
                                                    {
                                                        decShortHours = Convert.ToDouble(decGetTotalHours - decProductiveHours);

                                                        TimeSpan ShortDuration = TimeSpan.FromMinutes(decShortHours);
                                                        string output = ShortDuration.ToString("h\\:mm");
                                                        int hrs = ShortDuration.Hours;
                                                        int mint = ShortDuration.Minutes;
                                                        strShortHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    continue;
                                                }
                                            }
                                            #endregion

                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Get data from temp attendance
                                        //clsShortHrs.Visible = false;
                                        if (!flgInOverLap && !flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = false;
                                            flgActualTimeInOverlap = false;

                                            if (TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));

                                                if (flgShiftExpectedOut)
                                                {
                                                    flgActualTimeOutOverlap = true;

                                                    strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                    strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                    strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                    if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                    {

                                                        TempTimeIn = CalculateStringTime(strTimeIn);
                                                        TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            strTimeOut = strPreviousTimeOut;
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }
                                                    else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                    {

                                                        TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                        TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                        if (TempTimeIn < TempPreTimeOut)
                                                        {
                                                            strTimeOut = "";
                                                            flgActualTimeOutOverlap = false;
                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    #region If Employee Time Out After 00:00
                                                    decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                                    decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                                    if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                                    {
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                    else
                                                    {
                                                        flgActualTimeOutOverlap = true;

                                                        if (TempAttendance.Count > 0)
                                                        {
                                                            strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                            strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                            strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                            {

                                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    strTimeOut = strPreviousTimeOut;
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                            {
                                                                TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                                TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                                if (TempTimeIn < TempPreTimeOut)
                                                                {
                                                                    strTimeOut = "";
                                                                    flgActualTimeOutOverlap = false;
                                                                }
                                                            }
                                                        }

                                                    }
                                                    #endregion
                                                }

                                            }

                                        }
                                        else if (!flgInOverLap && flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = true;
                                            flgActualTimeInOverlap = false;

                                            if (TempAttendance.Count > 0)
                                            {


                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                strPreviousTimeOut = Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceNextDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));

                                                if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(strTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        strTimeOut = strPreviousTimeOut;
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                                else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                                {

                                                    TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                    TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                    if (TempTimeIn < TempPreTimeOut)
                                                    {
                                                        strTimeOut = "";
                                                        flgActualTimeOutOverlap = false;
                                                    }
                                                }
                                            }
                                        }
                                        else if (flgInOverLap && !flgOutOverLap)
                                        {
                                            flgActualTimeOutOverlap = false;
                                            flgActualTimeInOverlap = true;


                                            if (TempAttendance.Count > 0 && TempAttendancePreviousDay.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(TempAttendancePreviousDay.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                            }
                                        }

                                        decTimeOutCheck24Hrs = ConvertTimeToDecimal(strTimeOut);
                                        decShiftTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        if (decTimeOutCheck24Hrs <= Time24Hours && decShiftTimeIn < decTimeOutCheck24Hrs)
                                        {
                                            flgActualTimeOutOverlap = false;
                                        }
                                        else
                                        {
                                            flgActualTimeOutOverlap = true;
                                        }
                                        if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                        {
                                            strWorkHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                            if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == false)
                                            {

                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                ReportingTime = CalculateStringTime(shiftReportingTime);
                                                if (TempTimeIn < ReportingTime)
                                                {
                                                    strTotalWorkingHours = CalculateWorkHoursStandrad(shiftReportingTime, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                }
                                                else
                                                {
                                                    strTotalWorkingHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                }
                                            }
                                        }

                                        strStandardWorkingHours = "00:00";
                                        if (CompanyName.ToLower() == "spell")
                                        {
                                            decimal TemShiftHours = 0, TempWorkingHours = 0;
                                            TemShiftHours = CalculateStringTime(shiftHours);
                                            TempWorkingHours = CalculateStringTime(strWorkHours);
                                            if (TempWorkingHours > TemShiftHours)
                                            {
                                                strStandardWorkingHours = shiftHours;
                                            }
                                            else
                                            {
                                                strStandardWorkingHours = strWorkHours;
                                            }
                                        }
                                        decGetTotalHours = 0; decProductiveHours = 0;
                                        decShortHours = 0;
                                        string strGetTotalHours = CalculateWorkHoursStandrad(strTimeIn, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                        decGetTotalHours = CalculateStringTime(strGetTotalHours);
                                        decProductiveHours = CalculateStringTime(strWorkHours);
                                        if (decGetTotalHours > decProductiveHours)
                                        {
                                            decShortHours = Convert.ToDouble(decGetTotalHours - decProductiveHours);

                                            TimeSpan ShortDuration = TimeSpan.FromMinutes(decShortHours);
                                            string output = ShortDuration.ToString("h\\:mm");
                                            int hrs = ShortDuration.Hours;
                                            int mint = ShortDuration.Minutes;
                                            strShortHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                        }

                                        #endregion
                                    }
                                    //If Set for Off Day
                                    #region Off Day Working.

                                    //if (oAttendanceRegister.FlgOffDay != null)
                                    //{
                                    //    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    //    {
                                    //        //shiftTimeIn = "00:00";
                                    //        //shiftTimeOut = "00:00";
                                    //        //shiftHours = "00:00";
                                    //        //shiftBufferTimeIn = "00:00";
                                    //        //shiftBufferTimeOut = "00:00";
                                    //    }
                                    //}

                                    #endregion

                                    //Weekend Calculation
                                    #region Weekend

                                    if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                    }
                                    #endregion

                                    //Public Holiday Calculation   
                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            IsPublicHoliday = true;
                                            strDesc = "Off Day";
                                            strRemarks = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion

                                    //Calculate LateIn Minutes
                                    #region Calculate LateIn Minutes
                                    if (!string.IsNullOrEmpty(strTimeIn))
                                    {
                                        strLateInMinutes = CalculateLateInMinutesStandard(shiftTimeIn, strTimeIn, flgOutOverLap, flgActualTimeInOverlap);
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                            }
                                            else
                                            {
                                                //MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes);
                                                //return;
                                                //strLateInMinutes = "00:00";
                                                //strStatus += " Wrong TimeIn/LateIn Need Review ";
                                            }
                                        }
                                        //Buffer Period  Included Here                                      

                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            #region Company Level Grace Time
                                            string BufferInTime = AttendanceRule.GpAfterStartTime;
                                            if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Shift Grace Time
                                            if (!string.IsNullOrEmpty(StartGraceTime) && StartGraceTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(StartGraceTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                            #endregion
                                        }


                                    }
                                    else
                                    {
                                        strLateInMinutes = "00:00";
                                    }
                                    #endregion

                                    //Calculate Earlyout Minutes
                                    #region Calculate Earlyout Minutes
                                    if (!string.IsNullOrEmpty(strTimeOut))
                                    {

                                        //if (strTimeIn != null)
                                        if (!string.IsNullOrEmpty(strTimeIn) && strTimeIn != "00:00")
                                        {
                                            decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        }
                                        else
                                        {
                                            decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                        }
                                        if (decShiftTimeIn > decTimeOut && flgOutOverLap == false)
                                        {
                                            //Do Nothing
                                            strEarlyOutMinutes = "00:00";
                                        }
                                        else
                                        {
                                            strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                            if (!string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strEarlyOutMinutes, shiftName).FirstOrDefault();
                                                if (GetDeductionRules != null)
                                                {
                                                    string DeductionType = GetDeductionRules.DeductionRuleType;
                                                    int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                    bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }
                                                else
                                                {
                                                    //MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes + " on Date " + x);
                                                    //return;
                                                    //strEarlyOutMinutes = "00:00";
                                                    //strStatus += " Wrong TimeOut/EarlyOut Need Review. ";
                                                    var DeductionAttendanceRule = (from a in dbHrPayroll.TrnsDeductionRulesDetail
                                                                                   where a.FKID == a.TrnsDeductionRules.ID
                                                                                   && a.TrnsDeductionRules.ID == ShiftDetail.MstShifts.DeductionRuleID
                                                                                   && a.Code == "DR_03"
                                                                                   select a).FirstOrDefault();
                                                    if (DeductionAttendanceRule != null)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == DeductionAttendanceRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = shiftHours;
                                                        LeaveCount = Convert.ToDecimal(DeductionAttendanceRule.LeaveCount);
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = DeductionAttendanceRule.Code;
                                                    }


                                                }
                                            }

                                            var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                            if (AttendanceRule != null)
                                            {
                                                #region Company Level Grace
                                                string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region Shift End Grace Time
                                                if (!string.IsNullOrEmpty(EndGraceTime) && EndGraceTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(EndGraceTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                                #endregion
                                            }


                                        }
                                    }
                                    else
                                    {
                                        strEarlyOutMinutes = "00:00";
                                    }
                                    #endregion

                                    // Status is not in Use in Current Version
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        if (string.IsNullOrEmpty(strStatus))
                                        {
                                            strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                        }
                                    }
                                    //Calculate OverTime Here   
                                    if (ShiftDetail.MstShifts.FlgWorkingHoursOnMultipTimeInTimeOut.GetValueOrDefault() == true)
                                    {
                                        if (strTotalWorkingHours != "")
                                        {
                                            TimeSpan spanShiftHrs = TimeCalculate(shiftHours); //TimeCalculate(shiftHours);
                                            TimeSpan spanTotalHrs = TimeCalculate(strTotalWorkingHours);// TimeCalculate(strTotalWorkHours);
                                            if (spanTotalHrs > spanShiftHrs)
                                            {
                                                strOverTimeHours = CalculateOverTimeHours(shiftHours, strTotalWorkingHours);
                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                {
                                                    strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == ShiftDetail.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        #region Calculate OverTime Here
                                        if (!string.IsNullOrEmpty(strWorkHours))
                                        {
                                            decimal decWorkHours = ConvertTimeToDecimal(strWorkHours);
                                            decimal decshiftHours = ConvertTimeToDecimal(shiftHours);
                                            if (Convert.ToBoolean(oEmp.FlgOTApplicable))
                                            {
                                                if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay) || (IsHoliday == true))
                                                {
                                                    //if (Convert.ToBoolean(oEmp.FlgOffDayApplicable) || (IsHoliday == true))

                                                    strOverTimeHours = strWorkHours;
                                                    if (IsHoliday == true && ShiftDetail.MstShifts.FlgHoliDayOverTime.GetValueOrDefault() == true)
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegister.MstShifts.HoliDayOverTimeMstOverTime.ID
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                    else if (ShiftDetail.MstShifts.FlgOffDayOverTime.GetValueOrDefault() == true)
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }


                                                }
                                                //else if (decWorkHours > decshiftHours)
                                                else
                                                {

                                                    if (decWorkHours > decshiftHours)
                                                    {
                                                        //Overtime offday logic commented as used above.
                                                        string strInOverTime = "00:00";
                                                        string strOutOverTime = "00:00";
                                                        Time24Hours = ConvertTimeToDecimal("23:59");
                                                        //decimal decShiftTimeIn = ConvertTimeToDecimal(shiftTimeIn);
                                                        Boolean flgPayroll = false;
                                                        #region  OverTime from Shift
                                                        flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                                        if (!flgPayroll)
                                                        {
                                                            flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;

                                                            if (!flgOverTime)
                                                            {
                                                                strOverTimeHours = "";
                                                                strOverTimeType = "";
                                                            }
                                                            else
                                                            {
                                                                bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                                bool flgShiftOTWorkHours = oAttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegister.MstShifts.FlgOTWrkHrs.Value;
                                                                if (flgShiftOTWorkHours)
                                                                {
                                                                    if (flgEmployeeOTCheck)
                                                                    {
                                                                        strOverTimeHours = CalculateOverTimeISM(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours, flgOutOverLap, flgActualTimeOutOverlap);

                                                                    }
                                                                    else
                                                                    {
                                                                        strOverTimeHours = "";
                                                                        strOverTimeType = "";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (flgEmployeeOTCheck)
                                                                    {
                                                                        if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                                        {
                                                                            shiftBufferTimeIn = shiftTimeIn;
                                                                        }
                                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                                        {
                                                                            shiftBufferTimeOut = shiftTimeOut;
                                                                        }
                                                                        strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                                        if (strInOverTime != "00:00")
                                                                        {
                                                                            //CalculateIN Overtime AccordingToShift
                                                                            strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                                        }
                                                                        decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                                                        decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);
                                                                        //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                        //{
                                                                        //    strOutOverTime = strWorkHours;
                                                                        //}
                                                                        if (decTimeOut <= Time24Hours && decShiftTimeIn > decTimeOut)
                                                                        {
                                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                                        }
                                                                        else if (decTimeOut > decshiftBufferTimeOut)
                                                                        {
                                                                            //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                            //{
                                                                            //    strOutOverTime = strWorkHours;
                                                                            //}
                                                                            //else
                                                                            //{
                                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                                            //}

                                                                        }

                                                                        if (strOutOverTime != "00:00")
                                                                        {
                                                                            //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);

                                                                            //strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                                            if (flgActualTimeOutOverlap == true)
                                                                            {
                                                                                strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                                            }
                                                                            else
                                                                            {
                                                                                //strOutOverTime = CalculateOutOvertimeApplicable(TimeOut, shiftTimeOut);
                                                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                                            }

                                                                        }

                                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);

                                                                    }

                                                                    else
                                                                    {
                                                                        strOverTimeHours = "";
                                                                    }
                                                                }
                                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                                {

                                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                       where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                                       select a.Code).FirstOrDefault() ?? "";
                                                                }
                                                                else
                                                                {
                                                                    strOverTimeType = "";
                                                                }
                                                            }
                                                        }
                                                        #endregion

                                                        #region OverTime from Payroll
                                                        else
                                                        {

                                                            if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                            {
                                                                shiftBufferTimeIn = shiftTimeIn;
                                                            }
                                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                            {
                                                                shiftBufferTimeOut = shiftTimeOut;
                                                            }
                                                            strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                            if (strInOverTime != "00:00")
                                                            {
                                                                //CalculateIN Overtime AccordingToShift
                                                                strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                            }
                                                            //strOutOverTime = IFOutOvertimeApplicableSSL(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                            strOutOverTime = IFOutOvertimeApplicableStandrad(strTimeOut, shiftBufferTimeOut, flgOutOverLap, flgActualTimeOutOverlap);
                                                            //IFOutOvertimeApplicableStandrad
                                                            if (strOutOverTime != "00:00")
                                                            {
                                                                //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                            }
                                                            if (decTimeIn > decShiftTimeIn)
                                                            {
                                                                strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                            }
                                                            //OverTime on Weekend
                                                            if (shiftHours == "00:00")
                                                            {
                                                                strOverTimeHours = strWorkHours;
                                                            }
                                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                            {
                                                                //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                                   where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                                   select a.Code).FirstOrDefault() ?? "";
                                                            }

                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                strOverTimeHours = "";
                                                strOverTimeType = "";
                                            }
                                        }
                                        #endregion
                                    }
                                    //Calculate New Leaves Structured.
                                    #region Calculate Leaves
                                    //Full Days Leave Absent
                                    #region Full Leave Case
                                    if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && shiftHours != "00:00")
                                    {

                                        var PostedLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                           where a.MstEmployee.EmpID == oEmp.EmpID
                                                           && a.LeaveFrom <= x && a.LeaveTo >= x && a.DocAprStatus == "LV0006"
                                                           select a).FirstOrDefault();
                                        if (PostedLeave != null)
                                        {
                                            strLeaveHours = "00:00";
                                            LeaveCount = 0M;
                                            strLeaveType = "";
                                            strLeaveTypeCode = "";
                                            intLeaveType = 0;
                                            flgLeaveIsNew = false;
                                            strDeductionRule = "";
                                            strDesc = PostedLeave.MstLeaveType.Description;
                                        }
                                        else
                                        {
                                            if (oAttendanceRegister.FlgOffDay != true)
                                            {
                                                if (Program.systemInfo.FlgAbsent == true)
                                                {

                                                }
                                                if ((oEmp.DefaultOffDay != null ? oEmp.DefaultOffDay.ToLower() : "") != dayofWeeks.ToLower())
                                                {
                                                    var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                                    where a.Code == "DR_03"
                                                                    select a).FirstOrDefault();

                                                    if (oDedRule != null)
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = shiftHours;
                                                            LeaveCount = 1.0M;
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            //strDesc = "";
                                                        }
                                                        else
                                                        {
                                                            MsgError("Leave Type not selected in deduction rule 3.");
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion


                                    //Work Hour differ's from Shift Hours
                                    #region Work Hour Differs Shift Hours
                                    if (!string.IsNullOrEmpty(strWorkHours) && shiftHours != "00:00")
                                    {
                                        if ((oEmp.DefaultOffDay != null ? oEmp.DefaultOffDay.ToLower() : "") != dayofWeeks.ToLower())
                                        {
                                            string TempLeaveHours = "";
                                            TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, strWorkHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);
                                            if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                            {
                                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                if (oDedRule != null)
                                                {
                                                    if (oDedRule.Code == "DR_02")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                            LeaveCount = 0.5M;
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                    else if (oDedRule.Code == "DR_01")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;
                                                            LeaveCount = GetLeaveCountOnMinLeaves(strLeaveHours, shiftHours);
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                    else if (oDedRule.Code == "DR_03")
                                                    {
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = TempLeaveHours;
                                                            LeaveCount = 1;
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            flgLeaveIsNew = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    #endregion
                                    //Time In / Time Out Missing.
                                    #region Time In,Out Missing.
                                    if (((string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut)) ||
                                            (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)))
                                        && (Convert.ToBoolean(Program.systemInfo.FlgAbsent.GetValueOrDefault()))
                                        && !(Convert.ToBoolean(oAttendanceRegister.FlgOffDay.GetValueOrDefault()))
                                        && !IsHoliday)
                                    {
                                        var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                        if (oAttRule != null)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                            if (oLeaveMaster != null)
                                            {
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = oLeaveMaster.Description;
                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                intLeaveType = oLeaveMaster.ID;
                                                flgLeaveIsNew = true;
                                                strDeductionRule = "DR_03";
                                            }
                                        }
                                    }
                                    else if (((string.IsNullOrEmpty(strTimeIn) || string.IsNullOrEmpty(strTimeOut)))
                                        && (Convert.ToBoolean(Program.systemInfo.FlgAbsent == false))
                                        && (Convert.ToBoolean(oAttendanceRegister.FlgOffDay == false)))
                                    {
                                        LeaveCount = 0.0M;
                                        strLeaveTypeCode = "";
                                        flgLeaveIsNew = false;
                                    }
                                    #endregion

                                    #endregion

                                    if (strLeaveHours.Trim() == "")
                                    {
                                        strLeaveHours = "00:00";
                                    }
                                    if (strOverTimeHours.Trim() == "")
                                    {
                                        strOverTimeHours = "00:00";
                                    }

                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegister.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue(clDay.DataBind.Alias, RecordCounter, strDay);
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("ReportingTime", RecordCounter, shiftReportingTime.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("ShortHours", RecordCounter, strShortHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue("AdjHrs", RecordCounter, "00:00");
                                    dtAttendance.SetValue("TotalHrs", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTAdjt", RecordCounter, "00:00");
                                    dtAttendance.SetValue("StandHrs", RecordCounter, strStandardWorkingHours);
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clRemarks.DataBind.Alias, RecordCounter, strRemarks);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }

                            else
                            {
                                #region Read from saved attendance
                                IsHoliday = false;
                                IsPublicHoliday = false;
                                var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                select a).FirstOrDefault();
                                if (oAttendanceRegisterSaved != null)
                                {
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegisterSaved.MstShifts.Description) ? "" : oAttendanceRegisterSaved.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegisterSaved.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                    }
                                    strStatus = "";
                                    strTimeIn = oAttendanceRegisterSaved.TimeIn;
                                    strTimeOut = oAttendanceRegisterSaved.TimeOut;
                                    strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                    strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                    strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                    strOverTimeHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour) ? "" : oAttendanceRegisterSaved.OTHour;
                                    strDeductionRule = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveDedRule) ? "" : oAttendanceRegisterSaved.LeaveDedRule.Trim();
                                    strLeaveType = oAttendanceRegisterSaved.LeaveType == null ? "" : Convert.ToString(oAttendanceRegisterSaved.LeaveType);
                                    strDesc = oAttendanceRegisterSaved.Description == null ? "" : (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) ? "Off Day" : "");
                                    strLeaveHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveHour) ? "" : oAttendanceRegisterSaved.LeaveHour;
                                    flgLeaveIsNew = Convert.ToBoolean(oAttendanceRegisterSaved.FlgIsNewLeave);
                                    strRemarks = string.IsNullOrEmpty(oAttendanceRegisterSaved.Remarks) ? "" : oAttendanceRegisterSaved.Remarks;
                                    strDay = string.IsNullOrEmpty(oAttendanceRegisterSaved.DateDay) ? "" : oAttendanceRegisterSaved.DateDay;
                                    strPreTimeIn = string.IsNullOrEmpty(oAttendanceRegisterSaved.PreTimeIn) ? "" : oAttendanceRegisterSaved.PreTimeIn;
                                    strPreTimeOut = string.IsNullOrEmpty(oAttendanceRegisterSaved.PreTimeOut) ? "" : oAttendanceRegisterSaved.PreTimeOut;
                                    strStandardWorkingHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.StandardPaidHours) ? "" : oAttendanceRegisterSaved.StandardPaidHours;
                                    shiftReportingTime = string.IsNullOrEmpty(oAttendanceRegisterSaved.ReportingTime) ? "" : oAttendanceRegisterSaved.ReportingTime;
                                    strOtAdjustment = string.IsNullOrEmpty(oAttendanceRegisterSaved.OvertimeAdjustment) ? "" : oAttendanceRegisterSaved.OvertimeAdjustment;
                                    strShortHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.ShortHours) ? "" : oAttendanceRegisterSaved.ShortHours;
                                    #region Weekend
                                    if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                        IsHoliday = true;
                                    }

                                    if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay))
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                        IsHoliday = true;
                                        if (!string.IsNullOrEmpty(strWorkHours) && strWorkHours != "00:00")
                                        {
                                            bool flgShiftOffDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.OverTime.Value;
                                            if (flgShiftOffDayOTHours)
                                            {
                                                strOverTimeHours = strWorkHours;
                                                if (flgShiftOffDayOTHours)
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegisterSaved.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            IsPublicHoliday = true;
                                            strDesc = "Off Day";
                                            strRemarks = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion

                                    #region Calculate OverTime Here

                                    if (!string.IsNullOrEmpty(strWorkHours) && strWorkHours != "00:00")
                                    {
                                        decimal decWorkHours = ConvertTimeToDecimal(strWorkHours);
                                        decimal decshiftHours = ConvertTimeToDecimal(shiftHours);
                                        bool flgEmployeeOTCheck = oAttendanceRegisterSaved.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegisterSaved.MstEmployee.FlgOTApplicable.Value;
                                        bool flgShiftOTHours = oAttendanceRegisterSaved.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegisterSaved.MstShifts.FlgOTWrkHrs.Value;
                                        bool flgShiftOffDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.FlgOffDayOverTime.Value;
                                        bool flgShiftHoliDayOTHours = oAttendanceRegisterSaved.MstShifts.FlgHoliDayOverTime == null ? false : oAttendanceRegisterSaved.MstShifts.FlgHoliDayOverTime.Value;
                                        Boolean flgOvertimePayrollSetup = oEmp.CfgPayrollDefination.FlgOT != null ? Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT) : false;
                                        Boolean flgPayroll = false;
                                        flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                        if (flgEmployeeOTCheck)
                                        {
                                            if (flgShiftOffDayOTHours || flgShiftOTHours || flgShiftHoliDayOTHours)
                                            {
                                                if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) || (IsHoliday == true) || IsPublicHoliday == true)
                                                {
                                                    if (flgShiftOffDayOTHours || flgShiftHoliDayOTHours || IsHoliday == true || IsPublicHoliday == true)
                                                    {
                                                        strOverTimeHours = strWorkHours;
                                                        if (IsPublicHoliday == true && flgShiftHoliDayOTHours)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.MstShifts.HoliDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else if (flgShiftOffDayOTHours && Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay))
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else if (flgOvertimePayrollSetup)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegisterSaved.OTType
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                    {
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oAttendanceRegisterSaved.OTType
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                }
                                            }
                                            else if (flgPayroll)
                                            {
                                                if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                                {
                                                    strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                       where a.ID == oAttendanceRegisterSaved.OTType
                                                                       select a.Code).FirstOrDefault() ?? "";
                                                }
                                            }
                                        }

                                    }
                                    #endregion

                                    if (Convert.ToBoolean(oAttendanceRegisterSaved.FlgOffDay) || (IsHoliday == true))
                                    {
                                        strLeaveTypeCode = "-1";
                                        LeaveCount = 0;
                                        flgLeaveIsNew = false;
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(strLeaveType))
                                        {
                                            strLeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID.ToString() == strLeaveType select a.Code).FirstOrDefault() ?? "";
                                            LeaveCount = Convert.ToDecimal(oAttendanceRegisterSaved.LeaveCount);

                                        }
                                    }
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }


                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegisterSaved.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue(clDay.DataBind.Alias, RecordCounter, strDay);
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("ReportingTime", RecordCounter, shiftReportingTime.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("ShortHours", RecordCounter, strShortHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue("AdjHrs", RecordCounter, "00:00");
                                    dtAttendance.SetValue("TotalHrs", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTAdjt", RecordCounter, strOtAdjustment.Trim());
                                    dtAttendance.SetValue("StandHrs", RecordCounter, strStandardWorkingHours);
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clRemarks.DataBind.Alias, RecordCounter, strRemarks);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                        }
                    }
                    prog.Text = "(" + prog.Value.ToString() + " of " + totalCnt.ToString() + " ) Attendance Processing of EmpID--> " + strEmpCode + "";
                }
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
                #region Company wise Logics
                if (Program.systemInfo.FlgLateInEarlyOutLeaveRules.GetValueOrDefault() == true)
                {
                    CalculatingLateInOrEarlyOut();
                }
                else if (CompanyName.ToLower() == "ssl")
                {
                    ApplyDeductionsSSL();
                }
                var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                       select a).FirstOrDefault();
                if (oAttendanceRule != null)
                {
                    if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                    {
                        SandWichLeave();
                    }
                }
                if (CompanyName.ToLower() == "ism")
                {
                    SandWichLeave();
                }
                #endregion
                SaveAttendanceRecordStandarsDirectSave();
                grdAttendance.LoadFromDataSource();


            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error loading records EmpCode : " + strEmpCode + " Date : " + dtError.ToString("MM/dd/yyyy") + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                //if (prog != null)
                //{
                //    prog.Stop();
                //    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                //}
                //prog = null;
            }
        }

        private void SaveAttendanceRecordStandarsDirectSave()
        {
            bool isNewLeave = false, flgModified = false;
            int recId = 0, intEmpID = 0;
            string isNewLeaveStr = "", strTimeIn = "", strTimeOut = "", strWorkHours = "";
            string strLeaveType = "", strLeaveHours = "", strEmpCode = "", strEmpName = "";
            string LeaveCountTotal = "", strleaveDate = "", strLateInMinutes = "", strEarlyOutMinutes = "";
            string strOverTimeHours = "", strOverTimeType = "", CalculatedUnits = "", UserUnits = "";
            string OTUnits = "", strLeaveDedRule = "", strDescription = "", strLeaveCount = "";
            string strRemarks = "", strPreTimeIn = string.Empty, strPreTimeOut = string.Empty;
            string flgModifiedStr = "", strStatus = "", strReportingTime = "", strsWmin = "", strOTmin = "";
            string strsUmin = "", strTourHours = "", strOverTimeAdjustment = "", strStandardHours = "";
            DateTime leaveDate = DateTime.MinValue;
            try
            {

                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                for (int i = 0; i < dtAttendance.Rows.Count; i++)
                {
                    strEmpCode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                    strTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, i));// (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, i));// (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strleaveDate = Convert.ToString(dtAttendance.GetValue(clTodayDate.DataBind.Alias, i));// (grdAttendance.Columns.Item("Date").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeOut missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                        //strTimeIn = "00:00";
                    }
                    if (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut) && !Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                    {
                        MsgError("TimeIn missing for employee code : " + strEmpCode + " on date : " + strleaveDate);
                        return;
                        //strTimeOut = "00:00";
                    }
                }

                for (int i = 0; i < dtAttendance.Rows.Count; i++)
                {
                    recId = Convert.ToInt32(dtAttendance.GetValue(clId.DataBind.Alias, i));
                    strEmpCode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                    strEmpName = Convert.ToString(dtAttendance.GetValue(EmpName.DataBind.Alias, i));
                    intEmpID = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault().ID;
                    leaveDate = Convert.ToDateTime(dtAttendance.GetValue(clTodayDate.DataBind.Alias, i));
                    strleaveDate = Convert.ToString(leaveDate);
                    isNewLeaveStr = Convert.ToString(dtAttendance.GetValue(clIsNewLeave.DataBind.Alias, i));
                    strTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, i));
                    strTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, i));
                    strWorkHours = Convert.ToString(dtAttendance.GetValue(clWorkHours.DataBind.Alias, i));
                    CalculatedUnits = Convert.ToString(dtAttendance.GetValue(clsUmin.DataBind.Alias, i));
                    UserUnits = Convert.ToString(dtAttendance.GetValue(clsWmin.DataBind.Alias, i));
                    OTUnits = Convert.ToString(dtAttendance.GetValue(clsOTmin.DataBind.Alias, i));
                    strLeaveType = Convert.ToString(dtAttendance.GetValue(clLeaveType.DataBind.Alias, i));
                    strLeaveHours = Convert.ToString(dtAttendance.GetValue(clLeaveHour.DataBind.Alias, i));
                    LeaveCountTotal = Convert.ToString(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i));
                    strStatus = Convert.ToString(dtAttendance.GetValue(clStatus.DataBind.Alias, i));
                    strLateInMinutes = Convert.ToString(dtAttendance.GetValue(clLateInMinutes.DataBind.Alias, i));
                    strEarlyOutMinutes = Convert.ToString(dtAttendance.GetValue(clEarlyOutMinutes.DataBind.Alias, i));
                    strOverTimeHours = Convert.ToString(dtAttendance.GetValue(clOTHour.DataBind.Alias, i));
                    strOverTimeType = Convert.ToString(dtAttendance.GetValue(clOTType.DataBind.Alias, i));
                    strLeaveDedRule = Convert.ToString(dtAttendance.GetValue(clDRType.DataBind.Alias, i));
                    strLeaveCount = Convert.ToString(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i));
                    strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, i));
                    strRemarks = Convert.ToString(dtAttendance.GetValue(clRemarks.DataBind.Alias, i));
                    strPreTimeIn = Convert.ToString(dtAttendance.GetValue(clPreTimeIn.DataBind.Alias, i));
                    strPreTimeOut = Convert.ToString(dtAttendance.GetValue(clPreTimeOut.DataBind.Alias, i));
                    flgModifiedStr = Convert.ToString(dtAttendance.GetValue(clModify.DataBind.Alias, i));

                    strsWmin = Convert.ToString(dtAttendance.GetValue(clsWmin.DataBind.Alias, i));
                    strOTmin = Convert.ToString(dtAttendance.GetValue(clsOTmin.DataBind.Alias, i));
                    strsUmin = Convert.ToString(dtAttendance.GetValue(clsUmin.DataBind.Alias, i));

                    strReportingTime = Convert.ToString(dtAttendance.GetValue(clReportingTime.DataBind.Alias, i));
                    strOverTimeAdjustment = Convert.ToString(dtAttendance.GetValue(clOverTimeAdjustment.DataBind.Alias, i));
                    strTourHours = Convert.ToString(dtAttendance.GetValue(clAdjustedHours.DataBind.Alias, i));
                    strStandardHours = Convert.ToString(dtAttendance.GetValue(clStandardHours.DataBind.Alias, i));

                    if (recId > 0)
                    {
                        TrnsAttendanceRegister oOldVal = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Id == recId).FirstOrDefault();
                        if (oOldVal != null)
                        {
                            oOldVal.TimeIn = strTimeIn.Trim();
                            oOldVal.TimeOut = strTimeOut.Trim();
                            oOldVal.WorkHour = strWorkHours.Trim();
                            oOldVal.CalculatedUnits = string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                            oOldVal.ManualUnits = string.IsNullOrEmpty(UserUnits) ? 0 : Convert.ToInt32(UserUnits);
                            oOldVal.OTUnits = string.IsNullOrEmpty(OTUnits) ? 0 : Convert.ToInt32(OTUnits);
                            oOldVal.LateInMin = strLateInMinutes.Trim();
                            oOldVal.EarlyOutMin = strEarlyOutMinutes.Trim();
                            oOldVal.PreTimeIn = strPreTimeIn;
                            oOldVal.PreTimeOut = strPreTimeOut;
                            oOldVal.ReportingTime = strReportingTime;
                            oOldVal.OvertimeAdjustment = strOverTimeAdjustment;
                            oOldVal.TourHours = strTourHours;
                            oOldVal.StandardPaidHours = strStandardHours;
                            if (flgModifiedStr == "Y")
                            {
                                flgModified = true;
                            }
                            else
                            {
                                flgModified = false;
                            }
                            oOldVal.FlgModified = flgModified;
                            oOldVal.Remarks = strRemarks;

                        }
                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00" && strOverTimeType != "-1" && strOverTimeType != "")
                        {
                            oOldVal.OTHour = strOverTimeHours.Trim();
                            oOldVal.OTType = dbHrPayroll.MstOverTime.Where(Ov => Ov.Code == strOverTimeType).FirstOrDefault().ID;
                        }
                        else
                        {
                            oOldVal.OTHour = "00:00";
                            oOldVal.OTType = null;
                        }
                        if (!string.IsNullOrEmpty(strLeaveType) && strLeaveType != "-1" && strLeaveHours != "00:00")
                        {
                            oOldVal.LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.Code == strLeaveType.Trim()).FirstOrDefault().ID;
                            oOldVal.LeaveHour = strLeaveHours.Trim();
                            oOldVal.LeaveCount = Convert.ToDecimal(strLeaveCount);
                            if (isNewLeaveStr == "Y")
                            {
                                isNewLeave = true;
                            }
                            else
                            {
                                isNewLeave = false;
                            }
                            oOldVal.FlgIsNewLeave = isNewLeave;
                            oOldVal.LeaveDedRule = strLeaveDedRule;
                        }
                        else
                        {
                            oOldVal.LeaveType = null;
                            oOldVal.LeaveHour = "00:00";
                            oOldVal.LeaveCount = 0m;
                            oOldVal.FlgIsNewLeave = false;
                            oOldVal.LeaveDedRule = strLeaveDedRule;
                        }
                        if (!string.IsNullOrEmpty(strDescription))
                        {
                            if (strDescription == "Off Day")
                            {
                                oOldVal.FlgOffDay = true;
                            }
                        }
                        oOldVal.Description = strDescription;
                        oOldVal.UpdateDate = DateTime.Now;
                        oOldVal.Processed = true;
                        oOldVal.FlgPosted = false;
                        oOldVal.UpdatedBy = oCompany.UserName;

                    }
                    dbHrPayroll.SubmitChanges();
                }
                #region Update flgProcessed in trnsTempAttendance
                for (int a = 0; a < dtEmployees.Rows.Count; a++)
                {
                    bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(a + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (sel2)
                    {
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", a));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", a));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                        var TempAttFlgProcesses = (from b in dbHrPayroll.TrnsTempAttendance
                                                   where b.EmpID == oEmployee.EmpID && b.PunchedDate >= startDate && b.PunchedDate <= EndDate
                                                   && (b.FlgProcessed == null ? false : b.FlgProcessed) == false
                                                   select b).ToList();
                        foreach (var oneline in TempAttFlgProcesses)
                        {
                            oneline.FlgProcessed = true;
                        }
                        dbHrPayroll.SubmitChanges();
                    }
                    #endregion END Update flgProcessed in trnsTempAttendance
                }
                MsgSuccess("Record saved successfully.");
                dtAttendance.Rows.Clear();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception Ex)
            {
                logger(Ex);
            }
        }

        private void SaveAttendanceRecordStandardDirectPost()
        {
            #region Variables
            string strAttendanceProcessing = string.Empty, spIds = "0", strEmpCode = "", strEmpName = "";
            int intEmpID = 0, LeaveDocNum = 0;
            string LeaveCountTotal = "", strLeaveType = "", strOverTimeHours = "", strOffDays = "";
            bool flgOTRecord = false;
            string LastEmployee = "", strOverTimeType = "";
            SAPbouiCOM.ProgressBar prog = null;
            TrnsEmployeeOvertime EmpOverTime = null;
            DateTime leave_OverTime_Date = DateTime.MinValue;
            DateTime startDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            int? intIdt = dbHrPayroll.TrnsLeavesRequest.Max(u => (int?)u.DocNum);
            LeaveDocNum = intIdt == null ? 1 : Convert.ToInt32(intIdt) + 1;

            #endregion
            try
            {
                List<string> oSelectedEmployee = new List<string>();
                grdEmployees.FlushToDataSource();
                int totalCnt = 0;
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    string sel = dtEmployees.GetValue("isSel", i);
                    if (sel == "Y")
                    {
                        totalCnt++;
                        spIds = dtEmployees.GetValue("EmpCode", i);
                        oSelectedEmployee.Add(spIds);
                    }
                }
                totalCnt = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Attendance Processing ", totalCnt, false);
                prog.Value = 0;
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    string sel = dtEmployees.GetValue("isSel", i);
                    if (sel == "Y")
                    {
                        prog.Value += 1;
                        spIds = dtEmployees.GetValue("EmpCode", i);

                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == spIds && e.FlgActive == true).FirstOrDefault();
                        if (oEmployee != null)
                        {
                            strEmpCode = oEmployee.EmpID;
                            intEmpID = oEmployee.ID;
                            strEmpName = oEmployee.FirstName + ' ' + oEmployee.MiddleName + ' ' + oEmployee.LastName;
                            CfgPayrollDefination payroll = (from p in dbHrPayroll.CfgPayrollDefination
                                                            where p.ID.ToString() == cmbPayroll.Value.ToString()
                                                            select p).FirstOrDefault();

                            CfgPeriodDates payrollperiod = (from p in dbHrPayroll.CfgPeriodDates
                                                            where p.ID.ToString() == cmbPeriod.Value.ToString()
                                                            select p).FirstOrDefault();
                            int counter = 0;
                            if (payrollperiod != null)
                            {
                                int count = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.EmpID == oEmployee.ID
                                    && atr.PeriodID == payrollperiod.ID && atr.FlgPosted == false && atr.Processed == true).Count();
                                if (count > 0)
                                {
                                    prog.Text = "(" + prog.Value.ToString() + " of " + totalCnt.ToString() + " ) Attendance Processing --> " + oEmployee.EmpID + " : " + oEmployee.FirstName + " " + oEmployee.LastName;
                                    strAttendanceProcessing = "Error in Attendance Processing --> " + oEmployee.EmpID + ":" + oEmployee.FirstName + " " + oEmployee.LastName + " (" + counter.ToString() + " of " + totalCnt.ToString() + " ) ";

                                    var Query = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                 where a.EmpID == oEmployee.ID
                                                     && a.PeriodID == payrollperiod.ID && a.FlgPosted == false
                                                 select a).ToList();
                                    foreach (var oLine in Query)
                                    {
                                        var oOldVal = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                       where a.Id == oLine.Id && a.FlgPosted == false
                                                       select a).FirstOrDefault();
                                        if (oOldVal != null)
                                        {
                                            string leaveUnits = "";
                                            decimal TempLeaveCount = 0;
                                            int InternalIDAttendance = oOldVal.Id;
                                            LeaveCountTotal = Convert.ToString(oOldVal.LeaveCount);
                                            strLeaveType = Convert.ToString(oOldVal.LeaveType);
                                            leave_OverTime_Date = Convert.ToDateTime(oOldVal.Date);
                                            strOverTimeHours = oOldVal.OTHour;
                                            strOverTimeType = Convert.ToString(oOldVal.OTType);
                                            strOffDays = Convert.ToString(oOldVal.FlgOffDay);
                                            #region Leave Area

                                            if (oOldVal.FlgIsNewLeave == true)
                                            {
                                                if (!string.IsNullOrEmpty(LeaveCountTotal) && !string.IsNullOrEmpty(strLeaveType))
                                                {
                                                    MstLeaveType LeaveType = null;
                                                    LeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Convert.ToInt32(strLeaveType)).FirstOrDefault();
                                                    if (LeaveType == null)
                                                    {
                                                        MsgError("Please Select Valid Leave Type, EmpCode : " + clEmpCode);
                                                        return;
                                                    }
                                                    var CheckBalance = (from a in oEmployeeLeaveCollection
                                                                        where a.EmployeeCode == oEmployee.EmpID
                                                                        && a.LeaveCode == LeaveType.Code
                                                                        select a).FirstOrDefault();

                                                    if (CheckBalance == null)
                                                    {
                                                        oApplication.StatusBar.SetText("Please Assign leaves " + LeaveType.Description + " before posting for Employee with Code " + strEmpCode + "", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                        continue;
                                                    }
                                                    //Chechking for Previous Leaves for Same day
                                                    var ChechkForLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                          where a.MstEmployee.EmpID == strEmpCode
                                                                          && a.LeaveFrom <= leave_OverTime_Date
                                                                          && a.LeaveTo >= leave_OverTime_Date
                                                                          select a).FirstOrDefault();
                                                    if (ChechkForLeave != null)
                                                    {
                                                        TrnsLeavesRequest AlreadyEnteredLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                                 where a.LeaveFrom <= leave_OverTime_Date
                                                                                                 && a.LeaveTo >= leave_OverTime_Date
                                                                                                 && a.MstEmployee.EmpID == strEmpCode
                                                                                                 select a).FirstOrDefault();
                                                        if (AlreadyEnteredLeave != null && AlreadyEnteredLeave.DocStatus== "LV0002" && AlreadyEnteredLeave.DocAprStatus== "LV0006")
                                                        {
                                                            MsgError("Leave already entered for date : " + leave_OverTime_Date.Date.ToString("MM/dd/yyyy") + " EmpID : " + strEmpCode);
                                                            oOldVal.UpdateDate = DateTime.Now;
                                                            oOldVal.Processed = true;
                                                            oOldVal.FlgPosted = true;
                                                            oOldVal.UpdatedBy = oCompany.UserName;
                                                            continue;
                                                        }
                                                        else// if (strDRType == "DR_01")
                                                        {
                                                            if (LeaveCountTotal == "0.5")
                                                            {
                                                                leaveUnits = "Day";
                                                            }
                                                            else if (LeaveCountTotal == "1.0")
                                                            {
                                                                leaveUnits = "Day";
                                                            }
                                                            else
                                                            {
                                                                leaveUnits = "MIN";
                                                            }
                                                            TrnsLeavesRequest oLevReq = new TrnsLeavesRequest();
                                                            oLevReq.EmpID = intEmpID;
                                                            oLevReq.Series = -1;
                                                            oLevReq.EmpName = strEmpName.Trim();
                                                            oLevReq.DocNum = LeaveDocNum;
                                                            LeaveDocNum++;
                                                            oLevReq.DocDate = DateTime.Now;
                                                            oLevReq.LeaveFrom = leave_OverTime_Date;
                                                            oLevReq.LeaveTo = leave_OverTime_Date;
                                                            oLevReq.UnitsID = leaveUnits;
                                                            oLevReq.UnitsLOVType = "LeaveUnits";
                                                            //objLeaveReq.DeductAmnt

                                                            oLevReq.FlgPaid = false;
                                                            oLevReq.FlgVisa = false;
                                                            oLevReq.FlgMedical = false;
                                                            TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                                            oLevReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                                            if (LeaveType != null)
                                                            {
                                                                oLevReq.LeaveType = LeaveType.ID;
                                                            }
                                                            oLevReq.LeaveDescription = LeaveType.Description; //strLeaveType;
                                                            oLevReq.CreateDate = DateTime.Now;
                                                            oLevReq.CreatedBy = oCompany.UserName;
                                                            oLevReq.AttendanceID = oOldVal.Id;
                                                            //Commit for test
                                                            dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(oLevReq);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (LeaveCountTotal == "0.5")
                                                        {
                                                            leaveUnits = "Day";
                                                        }
                                                        else if (LeaveCountTotal == "1.0")
                                                        {
                                                            leaveUnits = "Day";
                                                        }
                                                        else
                                                        {
                                                            leaveUnits = "MIN";
                                                        }
                                                        TrnsLeavesRequest objLeaveReq = new TrnsLeavesRequest();
                                                        objLeaveReq.EmpID = intEmpID;
                                                        objLeaveReq.Series = -1;
                                                        objLeaveReq.EmpName = strEmpName.Trim();
                                                        objLeaveReq.DocNum = LeaveDocNum;
                                                        LeaveDocNum++;
                                                        objLeaveReq.DocDate = DateTime.Now;
                                                        objLeaveReq.LeaveFrom = leave_OverTime_Date;
                                                        objLeaveReq.LeaveTo = leave_OverTime_Date;
                                                        objLeaveReq.UnitsID = leaveUnits;
                                                        objLeaveReq.UnitsLOVType = "LeaveUnits";
                                                        objLeaveReq.FlgMedical = false;
                                                        objLeaveReq.FlgPaid = false;
                                                        objLeaveReq.FlgVisa = false;
                                                        TempLeaveCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                                        objLeaveReq.TotalCount = !string.IsNullOrEmpty(LeaveCountTotal) ? Convert.ToDecimal(LeaveCountTotal) : 0;
                                                        if (LeaveType != null)
                                                        {
                                                            objLeaveReq.LeaveType = LeaveType.ID;
                                                        }
                                                        objLeaveReq.LeaveDescription = LeaveType.Description;
                                                        objLeaveReq.CreateDate = DateTime.Now;
                                                        objLeaveReq.CreatedBy = oCompany.UserName;
                                                        objLeaveReq.AttendanceID = oOldVal.Id;
                                                        dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(objLeaveReq);
                                                    }
                                                }
                                            }

                                            #endregion

                                            #region OverTime Area
                                            if (LastEmployee != strEmpCode)
                                            {
                                                flgOTRecord = false;
                                                LastEmployee = strEmpCode;
                                            }
                                            if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                            {
                                                decimal OtCount = 0;
                                                TrnsEmployeeOvertimeDetail EmployeeOverTime = (from a in dbHrPayroll.TrnsEmployeeOvertimeDetail
                                                                                               where a.OTDate <= leave_OverTime_Date
                                                                                               && a.OTDate >= leave_OverTime_Date
                                                                                               && a.TrnsEmployeeOvertime.MstEmployee.EmpID == strEmpCode
                                                                                               && a.FlgActive == true
                                                                                               select a).FirstOrDefault();
                                                if (EmployeeOverTime != null)
                                                {
                                                    MsgError("OverTime already entered for date : " + leave_OverTime_Date.Date.ToString("MM/dd/yyyy") + " EmpID : " + strEmpCode);
                                                    continue;
                                                }
                                                //Enter OverTime Hours
                                                if (string.IsNullOrEmpty(strOverTimeType))
                                                {
                                                    MsgWarning("Overtime Type is mandatory." + strEmpCode);
                                                    continue;
                                                }
                                                else
                                                {

                                                    decimal amount = 0;

                                                    //Insert Child Record
                                                    var OverTime = dbHrPayroll.MstOverTime.Where(O => O.ID == Convert.ToInt32(strOverTimeType)).FirstOrDefault();
                                                    if (OverTime != null)
                                                    {
                                                        var EmpRecord = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                                                        OtCount = CalculateHourTimeCount(strOverTimeHours);
                                                        var DurationTime = dbHrPayroll.MstShiftDetails.Where(x => x.ShiftID == oOldVal.ShiftID && x.Day == oOldVal.DateDay).Select(y => y.Duration).FirstOrDefault();
                                                        if (String.IsNullOrEmpty(DurationTime) || DurationTime == "00:00")
                                                        {
                                                            DurationTime = dbHrPayroll.MstShiftDetails.Where(x => x.ShiftID == oOldVal.ShiftID && x.Duration != "00:00").Select(y => y.Duration).FirstOrDefault();
                                                        }
                                                        decimal Duration = CalculateHourTimeCount(DurationTime);
                                                        amount = setRowAmnt(EmpRecord, OtCount, oOldVal.PeriodID.ToString(), OverTime.ID.ToString(), Duration);
                                                        string strAmount = string.Format("{0:0.00}", amount);

                                                        if (EmpRecord != null)
                                                        {
                                                            if (!flgOTRecord)
                                                            {
                                                                EmpOverTime = dbHrPayroll.TrnsEmployeeOvertime.Where(o => o.EmployeeId == intEmpID && o.Period == oOldVal.PeriodID).FirstOrDefault();
                                                            }
                                                            if (EmpOverTime == null & !flgOTRecord)
                                                            {
                                                                EmpOverTime = new TrnsEmployeeOvertime();
                                                                dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(EmpOverTime);
                                                                flgOTRecord = true;
                                                            }
                                                            TrnsEmployeeOvertimeDetail EmpOverTimeDet = new TrnsEmployeeOvertimeDetail();
                                                            EmpOverTime.EmployeeId = intEmpID;
                                                            EmpOverTime.Period = oOldVal.PeriodID;
                                                            EmpOverTime.CreateDate = DateTime.Now;
                                                            EmpOverTime.UserId = oCompany.UserName;
                                                            EmpOverTime.AttendanceID = oOldVal.Id;
                                                            EmpOverTimeDet.OvertimeID = OverTime.ID;
                                                            EmpOverTimeDet.ValueType = OverTime.ValueType;
                                                            EmpOverTimeDet.OTValue = OverTime.Value;
                                                            EmpOverTimeDet.OTDate = leave_OverTime_Date;
                                                            EmpOverTimeDet.FromTime = "";
                                                            EmpOverTimeDet.ToTime = "";
                                                            EmpOverTimeDet.OTHours = Convert.ToDecimal(OtCount);
                                                            EmpOverTimeDet.Amount = Convert.ToDecimal(strAmount);
                                                            EmpOverTimeDet.BasicSalary = EmpRecord.BasicSalary;
                                                            EmpOverTimeDet.FlgActive = true;
                                                            EmpOverTimeDet.CreateDate = DateTime.Now;
                                                            EmpOverTimeDet.UserId = oCompany.UserName;
                                                            EmpOverTime.TrnsEmployeeOvertimeDetail.Add(EmpOverTimeDet);

                                                        }
                                                    }

                                                }
                                            }
                                            #endregion
                                            oOldVal.UpdateDate = DateTime.Now;
                                            oOldVal.Processed = true;
                                            oOldVal.FlgPosted = true;
                                            oOldVal.UpdatedBy = oCompany.UserName;
                                        }

                                    }
                                    dbHrPayroll.SubmitChanges();
                                    counter++;
                                }
                            }
                            else
                            {
                                oApplication.StatusBar.SetText("Select employee payroll and posting period", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                return;
                            }

                        }
                    }
                }
                prog.Stop();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                prog = null;
                MsgSuccess("Attendance Posted Successfully.");
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
                oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE;
            }
            catch (Exception ex)
            {
                prog.Stop();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                prog = null;
                MsgSuccess(ex.Message);
                logger(ex);
            }

        }

        #endregion

        private void LoadEmployeeAttendanceRecordOrderByDate()
        {
            SAPbouiCOM.ProgressBar prog = null;
            int intEmpID = 0, RecordCounter = 0, intLeaveType = -1;
            string strEmpCode = "", strEmpName = "", strWorkHours = "", shiftName = "", strDesc = "", shiftBufferTimeIn = "", shiftTimeIn = "", shiftBefferTimeIn;
            string shiftBufferTimeOut = "", shiftTimeOut = "", shiftHours = "", strTimeIn = "", strTimeOut = "", strOverTimeHours = "";
            string strOverTimeType = "", strLateInMinutes = "", strEarlyOutMinutes = "", strLeaveHours = "", strStatus = "", strLeaveType = "";
            string strLeaveTypeCode = "";
            bool isNewLeave = false, InflgOverlap = false, OutflgOverlap = false, isOverTimeApplicable = false;
            decimal LeaveCount = 0, MaxIn = 0.0M, MaxOut = 0.0M, MinIn = 0.0M, MinOut = 0.0M;

            try
            {
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                if (dtEmployees == null && dtEmployees.Rows.Count <= 0)
                {
                    oApplication.StatusBar.SetText("Please Select Employee(s) First", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return;
                }
                if (string.IsNullOrEmpty(txtFromDate.Value) && string.IsNullOrEmpty(txtToDate.Value))
                {
                    oApplication.StatusBar.SetText("Please Select Attendance Process From and To Date", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return;
                }
                if (!string.IsNullOrEmpty(txtFromDate.Value) && !string.IsNullOrEmpty(txtToDate.Value))
                {
                    startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);


                    //double totalEmps = ((EndDate.Subtract(startDate)).TotalDays + 1);
                    //if (totalEmps > 0)
                    //{
                    //    int TotalRecord = Convert.ToInt32(totalEmps);
                    //    prog = oApplication.StatusBar.CreateProgressBar("Importing Employee(s) Attendance Record(s)", TotalRecord, false);
                    //    prog.Value = 0;
                    //}



                    for (int i = 0; i < dtEmployees.Rows.Count; i++)
                    {
                        bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                        if (!sel2)
                        {
                            continue;
                        }
                        strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                        strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                        var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();
                        intEmpID = oEmployee.ID;

                        //var AttendanceAlreadyProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister where a.Date == x && a.Processed == true && intEmpID == a.EmpID select a).Count();
                        //if (AttendanceAlreadyProcessed == 1)
                        //{
                        //    oApplication.StatusBar.SetText("Employee ID '" + strEmpCode + "'already processed on '" + x + "'", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                        //    continue;
                        //}
                        for (DateTime x = startDate; x <= EndDate; x = x.AddDays(1))
                        {

                            System.Windows.Forms.Application.DoEvents();
                            //prog.Value += 1;
                            if (intEmpID > 0)
                            {
                                bool IsHoliday = false;
                                strDesc = string.Empty;
                                strTimeIn = string.Empty;
                                strTimeOut = string.Empty;
                                strWorkHours = string.Empty;
                                shiftBefferTimeIn = string.Empty;
                                shiftBufferTimeOut = string.Empty;
                                strOverTimeHours = string.Empty;
                                strLateInMinutes = string.Empty;
                                strEarlyOutMinutes = string.Empty;
                                strStatus = string.Empty;
                                strLeaveHours = string.Empty;
                                strLeaveType = string.Empty;
                                strOverTimeType = string.Empty;
                                strLeaveTypeCode = string.Empty;
                                shiftBufferTimeIn = string.Empty;
                                isNewLeave = false;
                                isOverTimeApplicable = false;
                                intLeaveType = -1;
                                string EmpCalenderID = oEmployee.EmpCalender;

                                flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                where a.Date == x && a.EmpID == oEmployee.ID
                                                select a.Processed).FirstOrDefault() ?? false;
                                flgNewImport = (from a in dbHrPayroll.TrnsTempAttendance
                                                where a.PunchedDate == x && a.EmpID == oEmployee.EmpID
                                                orderby a.ID descending
                                                select (a.FlgProcessed != null ? a.FlgProcessed : false)).FirstOrDefault() ?? false;

                                flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                             where a.Date == x && a.EmpID == oEmployee.ID
                                             select a.FlgPosted).FirstOrDefault() ?? false;
                                if (flgPosted) continue;
                                string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                //if ((!flgNewImport && !flgProcessed) || (!flgNewImport && flgProcessed))
                                if (flgNewImport == false && flgProcessed == false)
                                {
                                    #region Read From Temp Attendance
                                    var AttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == intEmpID && (atr.Processed == null || atr.Processed == false)).FirstOrDefault();
                                    if (AttendanceRegister != null)
                                    {

                                        shiftName = string.IsNullOrEmpty(AttendanceRegister.MstShifts.Description) ? "" : AttendanceRegister.MstShifts.Description;
                                        var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == shiftName).FirstOrDefault();
                                        var oAttendanceRules = dbHrPayroll.MstAttendanceRule.FirstOrDefault();
                                        var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == AttendanceRegister.MstShifts.Id).FirstOrDefault();
                                        if (ShiftDetail == null)
                                        {
                                            oApplication.StatusBar.SetText("Please assign shift to Employee ID '" + strEmpCode + "'", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                            continue;
                                        }
                                        if (ShiftDetail != null)
                                        {
                                            shiftTimeIn = ShiftDetail.StartTime;
                                            shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                            shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                            shiftTimeOut = ShiftDetail.EndTime;
                                            shiftHours = ShiftDetail.Duration;
                                            InflgOverlap = ShiftDetail.FlgInOverlap.Value;
                                            OutflgOverlap = ShiftDetail.FlgOutOverlap.Value;
                                        }
                                        //Get Attendance Record of the Day
                                        #region Get Attendance Record of the Day
                                        if (!InflgOverlap && !OutflgOverlap)
                                        {
                                            DateTime dtx = x.AddDays(1);
                                            //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate == x).ToList();
                                            var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == x).ToList();
                                            var TempAttendanceNextDay = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx && tr.In_Out == "2").ToList();
                                            if (TempAttendance != null && TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                                //strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                                //Calculating Out Time with Same Day
                                                var OUTTempAttendance = TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").ToList();
                                                if (OUTTempAttendance != null)
                                                {
                                                    OUTTempAttendance = OUTTempAttendance.OrderBy(d => d.PunchedTime).ToList();
                                                }
                                                foreach (TrnsTempAttendance item in OUTTempAttendance)
                                                {
                                                    string PunchTime = item.PunchedTime;
                                                    decimal decPunchTime = ConvertTimeToDecimal(PunchTime);
                                                    if (decPunchTime >= 7.52M && decPunchTime <= 24)
                                                    {
                                                        //decPunchTime = decPunchTime + 24;
                                                        strTimeOut = PunchTime;
                                                    }
                                                }

                                                foreach (TrnsTempAttendance item in TempAttendanceNextDay)
                                                {
                                                    string PunchTime = item.PunchedTime;
                                                    decimal decPunchTime = ConvertTimeToDecimal(PunchTime);

                                                    if (decPunchTime >= 0 && decPunchTime < 7.52M)
                                                    {
                                                        //decPunchTime = decPunchTime + 24;
                                                        strTimeOut = PunchTime;
                                                    }
                                                }
                                                strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                                            }
                                        }

                                        else if (!InflgOverlap && OutflgOverlap)
                                        {
                                            //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate.Value.Date == x.Date).ToList();
                                            var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate.Value.Date == x.Date).ToList();
                                            if (TempAttendance != null && TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                            }
                                            DateTime dtx = x.AddDays(1);
                                            var TempAttendanceOverlap = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                            if (TempAttendanceOverlap != null && TempAttendanceOverlap.Count > 0)
                                            {
                                                strTimeOut = Convert.ToString(TempAttendanceOverlap.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceOverlap.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                            }
                                            strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                                        }
                                        else if (InflgOverlap && OutflgOverlap)
                                        {
                                            DateTime dtx = x.AddDays(1);
                                            //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate == dtx).ToList();
                                            var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                            if (TempAttendance != null && TempAttendance.Count > 0)
                                            {
                                                strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                                strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                                strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                                            }
                                        }
                                        #endregion
                                        //Weekend Calulation
                                        #region Weekend Calulation
                                        if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                        {
                                            strDesc = "Weekend";
                                            LeaveCount = 0.0M;
                                        }
                                        #endregion
                                        //Public Holiday Calculation                                 
                                        #region Public Holiday Calculation
                                        if (!string.IsNullOrEmpty(EmpCalenderID))
                                        {
                                            SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                            string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + x + "' AND EndDate >= '" + x + "'";
                                            oRecSet.DoQuery(SQLHolidays);
                                            if (oRecSet.RecordCount > 0)
                                            {
                                                IsHoliday = true;
                                                strDesc = oRecSet.Fields.Item(1).Value;
                                            }
                                            if (IsHoliday)
                                            {
                                                shiftTimeIn = "00:00";
                                                shiftTimeOut = "00:00";
                                                shiftHours = "00:00";
                                                LeaveCount = 0.0M;
                                            }
                                        }
                                        #endregion
                                        //Calculate Leaves in diffrent Scenerio
                                        #region Calculate Leaves in diffrent Scenerio
                                        if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                                        {

                                            TempLeaveHours = shiftHours;
                                            LeaveCount = 0.0M;
                                            var PostedLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                               where a.MstEmployee.EmpID == oEmployee.EmpID
                                                               && a.LeaveFrom <= x && a.LeaveTo >= x
                                                               select a).FirstOrDefault();
                                            if (PostedLeave != null)
                                            {
                                                strLeaveHours = "00:00";
                                                LeaveCount = 0M;
                                                strLeaveType = "";
                                                strLeaveTypeCode = "";
                                                intLeaveType = 0;
                                                isNewLeave = false;
                                                strDeductionRule = "";
                                                strDesc = "Leave already Posted.";
                                            }
                                            else
                                            {
                                                TempLeaveHours = shiftHours;
                                                LeaveCount = 0.0M;
                                                string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                                System.Data.DataTable dt = ds.getDataTable(SQL);
                                                if (dt != null && dt.Rows.Count > 0)
                                                {
                                                    int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                    if (leaveType > 0)
                                                    {
                                                        intLeaveType = leaveType;
                                                        strLeaveHours = TempLeaveHours;
                                                        LeaveCount = 1.0M;
                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                        isNewLeave = true;
                                                    }
                                                }
                                            }
                                            #region deduction Rules Commit
                                            //{
                                            //    TempLeaveHours = shiftHours;
                                            //    LeaveCount = 0.0M;
                                            //    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleTimeBase(TempLeaveHours, ShiftRecord.Code).FirstOrDefault();
                                            //    if (oDedRule != null)
                                            //    {
                                            //        //if (oDedRule.Code == "DR_02")
                                            //        //{
                                            //        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            //        {
                                            //            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                            //                                where a.ID == oDedRule.LeaveType
                                            //                                select a).FirstOrDefault();
                                            //            strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                            //            LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                            //            strLeaveType = oLeaveMaster.Description;
                                            //            strLeaveTypeCode = oLeaveMaster.Code;
                                            //            intLeaveType = oLeaveMaster.ID;
                                            //            isNewLeave = true;
                                            //            strDeductionRule = oDedRule.Code;
                                            //            strDesc = "";
                                            //        }

                                            //        //else if (oDedRule.Code == "DR_01")
                                            //        //{
                                            //        //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            //        //    {
                                            //        //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                            //        //                            where a.ID == oDedRule.LeaveType
                                            //        //                            select a).FirstOrDefault();
                                            //        //        strLeaveHours = TempLeaveHours;
                                            //        //        LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                            //        //        strLeaveType = oLeaveMaster.Description;
                                            //        //        strLeaveTypeCode = oLeaveMaster.Code;
                                            //        //        intLeaveType = oLeaveMaster.ID;
                                            //        //        isNewLeave = true;
                                            //        //        strDeductionRule = oDedRule.Code;
                                            //        //        strDesc = "";
                                            //        //    }
                                            //        //}
                                            //        //else if (oDedRule.Code == "DR_03")
                                            //        //{
                                            //        //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            //        //    {
                                            //        //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                            //        //                            where a.ID == oDedRule.LeaveType
                                            //        //                            select a).FirstOrDefault();
                                            //        //        strLeaveHours = TempLeaveHours;
                                            //        //        LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                            //        //        strLeaveType = oLeaveMaster.Description;
                                            //        //        strLeaveTypeCode = oLeaveMaster.Code;
                                            //        //        intLeaveType = oLeaveMaster.ID;
                                            //        //        isNewLeave = true;
                                            //        //        strDeductionRule = oDedRule.Code;
                                            //        //        strDesc = "";
                                            //        //    }
                                            //        //}
                                            //    }
                                            //}
                                            #endregion

                                        }
                                        #endregion
                                        //Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                        #region Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                        if (!string.IsNullOrEmpty(strWorkHours))
                                        {
                                            TempLeaveHours = "";
                                            LeaveCount = 0.0M;
                                            TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                            if (ShiftRecord.DeductionRuleID == null)
                                            {

                                                if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                {
                                                    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                    if (oDedRule != null)
                                                    {
                                                        //if (oDedRule.Code == "DR_02" && oDedRule.Deduction == true)
                                                        //{
                                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        {
                                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                                where a.ID == oDedRule.LeaveType
                                                                                select a).FirstOrDefault();
                                                            strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                            LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                                            strLeaveType = oLeaveMaster.Description;
                                                            strLeaveTypeCode = oLeaveMaster.Code;
                                                            intLeaveType = oLeaveMaster.ID;
                                                            isNewLeave = true;
                                                            strDeductionRule = oDedRule.Code;
                                                            strDesc = "";

                                                        }
                                                        //}
                                                        //else if (oDedRule.Code == "DR_01" && oDedRule.Deduction == true)
                                                        //{
                                                        //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        //    {
                                                        //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        //                            where a.ID == oDedRule.LeaveType
                                                        //                            select a).FirstOrDefault();
                                                        //        strLeaveHours = TempLeaveHours;
                                                        //        LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                                        //        strLeaveType = oLeaveMaster.Description;
                                                        //        strLeaveTypeCode = oLeaveMaster.Code;
                                                        //        intLeaveType = oLeaveMaster.ID;
                                                        //        isNewLeave = true;
                                                        //        strDeductionRule = oDedRule.Code;
                                                        //        strDesc = "";
                                                        //    }
                                                        //}
                                                        //else if (oDedRule.Code == "DR_03" && oDedRule.Deduction == true)
                                                        //{
                                                        //    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                        //    {
                                                        //        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        //                            where a.ID == oDedRule.LeaveType
                                                        //                            select a).FirstOrDefault();
                                                        //        strLeaveHours = TempLeaveHours;
                                                        //        LeaveCount = Convert.ToDecimal(oDedRule.LeaveCount);
                                                        //        strLeaveType = oLeaveMaster.Description;
                                                        //        strLeaveTypeCode = oLeaveMaster.Code;
                                                        //        intLeaveType = oLeaveMaster.ID;
                                                        //        isNewLeave = true;
                                                        //        strDeductionRule = oDedRule.Code;
                                                        //        strDesc = "";
                                                        //    }
                                                        //}
                                                    }
                                                }
                                            }

                                        }
                                        #endregion

                                        //Calculate LateIn Minutes
                                        #region Calculate LateIn Minutes
                                        if (!string.IsNullOrEmpty(strTimeIn))
                                        {
                                            strLateInMinutes = CalculateLateInMinutes(shiftTimeIn, strTimeIn);
                                            //Buffer Period  Included Here
                                            var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                            if (AttendanceRule != null)
                                            {
                                                string BufferInTime = AttendanceRule.GpAfterStartTime;
                                                if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                    {
                                                        strLateInMinutes = "00:00";
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                        //Calculate Earlyout Minutes
                                        #region Calculate Earlyout Minutes
                                        if (!string.IsNullOrEmpty(strTimeOut))
                                        {
                                            decimal decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                            decimal decTimeIn = 0.0M;
                                            if (strTimeIn != null)
                                            {
                                                decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                            }
                                            if (decTimeIn > decTimeOut && OutflgOverlap == false)
                                            {
                                                //Do Nothing
                                                strEarlyOutMinutes = "00:00";
                                            }
                                            else
                                            {
                                                strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, strTimeOut);
                                                var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                                if (AttendanceRule != null)
                                                {
                                                    string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                    if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                    {
                                                        if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                        {
                                                            strEarlyOutMinutes = "00:00";
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                        //Calculate OverTime Here
                                        #region Calculate OverTime Here
                                        if (!string.IsNullOrEmpty(strWorkHours))
                                        {
                                            string strInOverTime = "00:00";
                                            string strOutOverTime = "00:00";
                                            Boolean flgPayroll = false;
                                            flgPayroll = Convert.ToBoolean(oEmployee.CfgPayrollDefination.FlgOT);
                                            if (!flgPayroll)
                                            {
                                                isOverTimeApplicable = AttendanceRegister.MstShifts.OverTime == null ? false : AttendanceRegister.MstShifts.OverTime.Value;
                                                if (!isOverTimeApplicable)
                                                {
                                                    strOverTimeHours = "";
                                                    strOverTimeType = "";
                                                }
                                                else
                                                {
                                                    bool flgOTApplicable = AttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : AttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                    bool flgOtonWorkedHours = AttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : AttendanceRegister.MstShifts.FlgOTWrkHrs.Value;
                                                    if (flgOtonWorkedHours)
                                                    {
                                                        if (flgOTApplicable)
                                                        {
                                                            strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (flgOTApplicable)
                                                        {
                                                            if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                            {
                                                                shiftBefferTimeIn = shiftTimeIn;
                                                            }
                                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                            {
                                                                shiftBufferTimeOut = shiftTimeOut;
                                                            }
                                                            strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                                            if (strInOverTime != "00:00")
                                                            {
                                                                //CalculateIN Overtime AccordingToShift
                                                                strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                            }
                                                            strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                            if (strOutOverTime != "00:00")
                                                            {
                                                                //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                                strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                            }
                                                            strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                            //OverTime on Weekend
                                                            if (shiftHours == "00:00")
                                                            {
                                                                strOverTimeHours = strWorkHours;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (true)
                                                {
                                                    if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                    {
                                                        shiftBefferTimeIn = shiftTimeIn;
                                                    }
                                                    if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                    {
                                                        shiftBufferTimeOut = shiftTimeOut;
                                                    }
                                                    strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                                    if (strInOverTime != "00:00")
                                                    {
                                                        //CalculateIN Overtime AccordingToShift
                                                        strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                    }
                                                    strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                    if (strOutOverTime != "00:00")
                                                    {
                                                        //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                        strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                    }
                                                    strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                    //OverTime on Weekend
                                                    if (shiftHours == "00:00")
                                                    {
                                                        strOverTimeHours = strWorkHours;
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                        strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oEmployee.CfgPayrollDefination.OTValue.Value).FirstOrDefault().Code;
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                        // Status is not in Use in Current Version
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                        {
                                            strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);

                                        }
                                        #region Set values on Grid
                                        dtAttendance.Rows.Add(1);
                                        dtAttendance.SetValue("Id", RecordCounter, AttendanceRegister.Id);
                                        dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                        dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                        dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                        dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                        dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                        dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                        dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                        dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                        dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                        dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                        dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                        dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                        dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                        dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                        dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                        dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                        dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                        dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                        dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                                        dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                        dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());

                                        RecordCounter++;
                                        #endregion
                                    }
                                    else
                                    {
                                        oApplication.StatusBar.SetText("EmpID : " + oEmployee.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    }
                                    #endregion
                                }
                                //else if ((flgNewImport && flgProcessed) || (!flgNewImport && flgProcessed))
                                else
                                //if ((flgNewImport == true && flgProcessed == true))
                                {
                                    LeaveCount = 0M;
                                    #region Read from saved attendance
                                    var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                    where a.Date == x && a.MstEmployee.EmpID == oEmployee.EmpID
                                                                    && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                    select a).FirstOrDefault();
                                    if (oAttendanceRegisterSaved != null)
                                    {
                                        shiftName = string.IsNullOrEmpty(oAttendanceRegisterSaved.MstShifts.Description) ? "" : oAttendanceRegisterSaved.MstShifts.Description;
                                        var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegisterSaved.MstShifts.Id select a).FirstOrDefault();
                                        if (ShiftDetail != null)
                                        {
                                            shiftTimeIn = ShiftDetail.StartTime;
                                            shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                            shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                            shiftTimeOut = ShiftDetail.EndTime;
                                            shiftHours = ShiftDetail.Duration;
                                            flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                            flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                        }
                                        strStatus = "";
                                        strTimeIn = oAttendanceRegisterSaved.TimeIn;
                                        strTimeOut = oAttendanceRegisterSaved.TimeOut;
                                        strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                        strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                        strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                        strOverTimeHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour) ? "" : oAttendanceRegisterSaved.OTHour;
                                        strDeductionRule = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveDedRule) ? "" : oAttendanceRegisterSaved.LeaveDedRule.Trim();
                                        strLeaveType = oAttendanceRegisterSaved.LeaveType == null ? "" : Convert.ToString(oAttendanceRegisterSaved.LeaveType);
                                        strDesc = oAttendanceRegisterSaved.Description == null ? "" : Convert.ToString(oAttendanceRegisterSaved.Description);
                                        strLeaveHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveHour) ? "" : oAttendanceRegisterSaved.LeaveHour;
                                        if (!string.IsNullOrEmpty(strLeaveType))
                                        {
                                            strLeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID.ToString() == strLeaveType select a.Code).FirstOrDefault() ?? "";
                                            LeaveCount = Convert.ToDecimal(oAttendanceRegisterSaved.LeaveCount);
                                            flgLeaveIsNew = true;
                                        }
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                        {
                                            strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                        }

                                        Boolean flgOvertime = oEmployee.CfgPayrollDefination.FlgOT != null ? Convert.ToBoolean(oEmployee.CfgPayrollDefination.FlgOT) : false;
                                        if (flgOvertime)
                                        {
                                            if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                            {
                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oEmployee.CfgPayrollDefination.OTValue select a.Code).FirstOrDefault() ?? "";
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                            {
                                                strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oAttendanceRegisterSaved.MstShifts.OverTimeID select a.Code).FirstOrDefault() ?? "";
                                            }
                                        }

                                        #region Assign value in grid
                                        dtAttendance.Rows.Add(1);
                                        dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegisterSaved.Id);
                                        dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                        dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                        dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                        dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                        dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                        dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                        dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                        dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                        dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                        dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                        dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                        dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                        dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                        dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                        dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                        dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                        dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                        dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                        dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                        dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                        dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                        dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                        dtAttendance.SetValue(clDescription.DataBind.Alias, RecordCounter, strDesc);
                                        RecordCounter++;
                                        #endregion
                                    }
                                    else
                                    {
                                        oApplication.StatusBar.SetText("EmpID : " + oEmployee.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                    }
                                    #endregion
                                }
                            }
                        }
                    }

                }
                grdAttendance.LoadFromDataSource();
                CalculatingLateInEarlyOut();

            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: LoadEmployeeAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                //if (prog != null)
                //{
                //    prog.Stop();
                //    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                //}
                //prog = null;
            }
        }

        private void CalculatingLateInEarlyOut()
        {
            try
            {
                DateTime StartDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                string strLateIn = "";
                string strEarlyOut = "";
                string strWorkHours = "";
                string strLateInMinutes = "";
                string strLateInMinutesDeductionRules = "";
                string strEarlyOutMinutes = "";
                string strEarlyOutMinutesDeductionRules = "";
                string strEmpCode = "";
                int intEmpID = 0;
                TotalLateINEarlyOut = 0;
                TotalLateInCount = 0;
                TotalEarlyOutCount = 0;
                TotalLateINEarlyOutMemory = 0;
                TotalcountCheck = 0;
                Boolean flgcountFour = false;
                Boolean flgFullDayLeave = false;
                Boolean flgEndTimeTriger = false;
                Boolean flgFullDayLeaveTrigerOnShortLeave = false;
                grdAttendance.FlushToDataSource();

                var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    if (oEmp == null) continue;
                    intEmpID = oEmp.ID;
                    if (intEmpID > 0)
                    {
                        string strShiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        string strLeaveCount = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strStatus = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftStartTime = (grdAttendance.Columns.Item("SfStart").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strShiftEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                        var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                        var AttendanceRules = dbHrPayroll.MstAttendanceRule.FirstOrDefault();

                        double totalTimeInMinutes = 0;
                        double TimeInOutRage = 0;
                        double totalEarlyOutMinutes = 0;
                        strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                        TempLeaveHours = CalculateLeaveHours(strShiftHours, strWorkHours);
                        int leaveType = 0;

                        decimal leaveCountRageFrom = 0;
                        decimal leaveCountRageTo = 0;
                        string TimeInRuleRangeFrom = "";
                        string TimeOutRuleRangeTo = "";
                        string TimeInRule = "";
                        string TimeOutRule = "";
                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgShortLeave ?? false) != false && oAttendanceRules.ShortLeaveCount != null)
                        {
                            if (!string.IsNullOrEmpty(strStatus))
                            {
                                flgFullDayLeaveTrigerOnShortLeave = false;
                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeIn, ShiftRecord.Code).FirstOrDefault();
                                var oDedRuleOut = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeOut, ShiftRecord.Code).FirstOrDefault();

                                int nextLine = i;
                                if (nextLine > dtAttendance.Rows.Count) continue;

                                strLateIn = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                strEarlyOut = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                #region Deduction Rules 1 and 2
                                if (oDedRule != null)
                                {
                                    leaveType = Convert.ToInt32(oDedRule.LeaveType);
                                    leaveCountRageFrom = Convert.ToDecimal(oDedRule.LeaveCount);
                                    TimeInRule = oDedRule.RangeFrom;
                                    TimeOutRule = oDedRule.RangeTo;
                                    strLateInMinutes = CalculateLateInMinutes(ShiftStartTime, strTimeIn);
                                    if (!string.IsNullOrEmpty(strTimeIn) && (strLateInMinutes != "00:00" || strLateInMinutes != ""))
                                    {
                                        strLateInMinutesDeductionRules = CalculateLateInMinutes(TimeInRule, TimeOutRule);
                                        string ltmint = strLateInMinutes;
                                        TimeSpan TimeInOutded = TimeCalculate(strLateInMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan TimeIn = TimeCalculate(strLateInMinutes);
                                        totalTimeInMinutes = Math.Round((TimeIn.TotalMinutes), 0);

                                        if (leaveCountRageFrom != null && leaveCountRageFrom != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageFrom));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalTimeInMinutes > 0 && (totalTimeInMinutes >= TimeInOutRage || totalTimeInMinutes <= TimeInOutRage))
                                            {
                                                TotalLateInCount += 1;
                                            }
                                        }
                                    }
                                }
                                #endregion
                                #region Deduction Rule 3,4
                                if (oDedRuleOut != null)
                                {
                                    leaveType = Convert.ToInt32(oDedRuleOut.LeaveType);
                                    leaveCountRageTo = Convert.ToDecimal(oDedRuleOut.LeaveCount);
                                    TimeInRuleRangeFrom = oDedRuleOut.RangeFrom;
                                    TimeOutRuleRangeTo = oDedRuleOut.RangeTo;
                                    strEarlyOutMinutes = CalculateEarlyOutMinutes(oDedRuleOut.RangeTo, strTimeOut);

                                    if (!string.IsNullOrEmpty(strEarlyOut) && (strEarlyOutMinutes != "00:00" || strEarlyOutMinutes != ""))
                                    {
                                        strEarlyOutMinutesDeductionRules = CalculateLateInMinutes(oDedRuleOut.RangeFrom, oDedRuleOut.RangeTo);
                                        TimeSpan TimeInOutded = TimeCalculate(strEarlyOutMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan EarlyOut = TimeCalculate(strEarlyOutMinutes);
                                        totalEarlyOutMinutes = Math.Round((EarlyOut.TotalMinutes), 0);
                                        if (leaveCountRageTo != null && leaveCountRageTo != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageTo));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalEarlyOutMinutes > 0 && (totalEarlyOutMinutes >= TimeInOutRage || totalEarlyOutMinutes <= TimeInOutRage))
                                            {
                                                TotalEarlyOutCount += 1;
                                                flgEndTimeTriger = true;
                                            }
                                        }
                                    }
                                }
                                #endregion
                                #region Full Day Leave on Other Seniors
                                if (oDedRule != null && oDedRuleOut != null && TotalcountCheck >= 2 && flgFullDayLeave == false)
                                {
                                    TotalcountCheck = 0;
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.Code == AttendanceRules.LeaveTypeWOP
                                                        select a).FirstOrDefault();
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                    dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                    dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                    //dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                    dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    TotalcountCheck = 0;
                                }
                                //if (strLateIn != null && strEarlyOut != null && oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOutMemory)
                                if (oDedRule != null && oDedRuleOut != null && oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOutMemory)
                                {
                                    flgFullDayLeave = true;
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.Code == AttendanceRules.LeaveTypeWOP
                                                        select a).FirstOrDefault();
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                    dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                    dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                    dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                }
                                #endregion
                                #region FullDay Leave agar timein 09:00 and timeout before 13:29
                                if (oDedRule != null && oDedRuleOut == null)
                                {
                                    //Agar Time in 1:30 ka bad ho ga aur time out shift ka end time tak ho ga tu full leave:


                                    TimeSpan EmpInTime = TimeCalculate(strTimeIn);
                                    TimeSpan EmpOutTime = TimeCalculate(strTimeOut);
                                    TimeSpan StartTimeDeductionRule = TimeCalculate(oDedRule.RangeFrom);
                                    TimeSpan EndTimeDeductionRule = TimeCalculate(oDedRule.RangeTo);
                                    TimeSpan ShiftEndtime = TimeCalculate(strShiftEndTime);


                                    if (leaveCountRageFrom != null && leaveCountRageFrom != 0)
                                    {
                                        //if (EmpInTime > StartTimeDeductionRule && EmpInTime < EndTimeDeductionRule && flgEndTimeTriger==false)
                                        if (EmpInTime > StartTimeDeductionRule && EmpInTime < EndTimeDeductionRule && flgEndTimeTriger == false && (EmpOutTime >= ShiftEndtime))
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.Code == AttendanceRules.LeaveTypeWOP
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                        }
                                        else if (EmpInTime > StartTimeDeductionRule && oDedRule.GracePeriod == 3 && (EmpOutTime >= ShiftEndtime))
                                        {

                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.Code == AttendanceRules.LeaveTypeWOP
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                        }
                                    }
                                }
                                else if (oDedRule == null && oDedRuleOut != null)
                                {
                                    //Agar Time in 1:30 sy pehly aur time out shift ka end time sy pehly ho tu full leave:
                                    TimeSpan EmpInTime = TimeCalculate(strTimeIn);
                                    TimeSpan EmpOutTime = TimeCalculate(strTimeOut);
                                    TimeSpan StartTimeDeductionRule = TimeCalculate(TimeInRuleRangeFrom);
                                    TimeSpan EndTimeDeductionRule = TimeCalculate(TimeOutRuleRangeTo);
                                    TimeSpan ShiftEndtime = TimeCalculate(strShiftEndTime);



                                    //if (EmpInTime > StartTimeDeductionRule && EmpInTime < EndTimeDeductionRule && flgEndTimeTriger==false)
                                    if (EmpOutTime > EndTimeDeductionRule && EmpOutTime < EndTimeDeductionRule && flgEndTimeTriger == false && (EmpOutTime >= ShiftEndtime))
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.Code == AttendanceRules.LeaveTypeWOP
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    }
                                    else if (EmpOutTime < EndTimeDeductionRule && oDedRuleOut.GracePeriod == 2 && (EmpOutTime < ShiftEndtime))
                                    {

                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.Code == AttendanceRules.LeaveTypeWOP
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    }

                                }

                                #endregion
                                TotalLateINEarlyOut = TotalLateInCount + TotalEarlyOutCount;
                                #region Roshan Leave Validation
                                if (oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOut && flgcountFour == false)
                                {
                                    TotalLateINEarlyOutMemory = TotalLateINEarlyOut;
                                    flgcountFour = true;
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }
                                else if (TotalLateINEarlyOut >= 1 && flgcountFour == true && flgFullDayLeaveTrigerOnShortLeave == false)
                                //else if (TotalLateINEarlyOut >= 1 && flgcountFour == true && flgFullDayLeave == false)
                                {
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }
                                #endregion
                                #region Full Leave on Deduction Rules
                                if (oDedRule != null && oDedRuleOut != null && TotalLateINEarlyOutMemory == 4)
                                {
                                    flgFullDayLeaveTrigerOnShortLeave = true;
                                    //Agar Short Leave Count 4 ho aur timeIn 09:16 sy 10:00 and  Time Out 04:30 sy 05:29 ka darmyan ho tu full day leave deduct
                                    if (oDedRule.GracePeriod == 1 && oDedRuleOut.GracePeriod == 4)
                                    {

                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.Code == AttendanceRules.LeaveTypeWOP
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    }

                                }
                                if (oDedRule != null && oDedRuleOut != null && TotalLateINEarlyOutMemory == 4)
                                {
                                    //Agar Short Leave Count 4 ho aur timeIn 09:16 sy 10:00 and  Time Out 04:30 sy pehly ho tu full day leave deduct
                                    flgFullDayLeaveTrigerOnShortLeave = true;
                                    if (oDedRule.GracePeriod == 1 && oDedRuleOut.GracePeriod == 3)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.Code == AttendanceRules.LeaveTypeWOP
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    }
                                }
                                if (oDedRule != null && oDedRuleOut != null && TotalLateINEarlyOutMemory == 4)
                                {
                                    //Agar Short Leave Count 4 ho aur timeIn 01:30 sy pehly ho aur Time out 04:31 sy 05:29 tak ho tu full day leave deduct
                                    flgFullDayLeaveTrigerOnShortLeave = true;
                                    if (oDedRule.GracePeriod == 2 && oDedRuleOut.GracePeriod == 4)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.Code == AttendanceRules.LeaveTypeWOP
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    }
                                }
                                #endregion
                                #region Clear Applied Leaves If time in = shifttime in and Timeout = shiftTime Out
                                else
                                {
                                    string temLeaveType = "-1";
                                    string temLeaveHours = "00:00";
                                    if (flgFullDayLeave == true)
                                    {
                                        string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                        if (strShortLeaves.Contains("Assigned") || strShortLeaves.Contains("Half"))
                                        {
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                            dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                            dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "");
                                        }
                                    }
                                }
                                #endregion
                            }
                            #region Clear Applied Leaves If time in = shifttime in and Timeout = shiftTime Out
                            else
                            {
                                string temLeaveType = "-1";
                                string temLeaveHours = "00:00";

                                string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                if (strShortLeaves.Contains("Assigned") || strShortLeaves.Contains("Half") || strShortLeaves.Contains("Full"))
                                {
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                    dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                    dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                    dtAttendance.SetValue("clDesc", i - 1, "");
                                }
                            }
                            #endregion
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingLateInEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void CalculatingLateInEarlyOutWorkingGoodTimeBaseRules()
        {
            try
            {
                DateTime StartDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                string strLateIn = "";
                string strEarlyOut = "";
                string strWorkHours = "";
                string strLateInMinutes = "";
                string strLateInMinutesDeductionRules = "";
                string strEarlyOutMinutes = "";
                string strEarlyOutMinutesDeductionRules = "";
                string strEmpCode = "";
                int intEmpID = 0;
                TotalLateINEarlyOut = 0;
                TotalLateInCount = 0;
                TotalEarlyOutCount = 0;
                TotalLateINEarlyOutMemory = 0;
                TotalcountCheck = 0;
                Boolean flgcountFour = false;
                Boolean flgFullDayLeave = false;

                grdAttendance.FlushToDataSource();

                var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    if (oEmp == null) continue;
                    intEmpID = oEmp.ID;
                    if (intEmpID > 0)
                    {
                        string strShiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        string strLeaveCount = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strStatus = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftStartTime = (grdAttendance.Columns.Item("SfStart").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                        var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                        var AttendanceRules = dbHrPayroll.MstAttendanceRule.FirstOrDefault();

                        double totalTimeInMinutes = 0;
                        double TimeInOutRage = 0;
                        double totalEarlyOutMinutes = 0;
                        strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                        TempLeaveHours = CalculateLeaveHours(strShiftHours, strWorkHours);
                        int leaveType = 0;

                        decimal leaveCountRageFrom = 0;
                        decimal leaveCountRageTo = 0;
                        string TimeInRuleRangeFrom = "";
                        string TimeOutRuleRangeTo = "";
                        string TimeInRule = "";
                        string TimeOutRule = "";
                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgShortLeave ?? false) != false && oAttendanceRules.ShortLeaveCount != null)
                        {
                            if (!string.IsNullOrEmpty(strStatus))
                            {
                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeIn, ShiftRecord.Code).FirstOrDefault();
                                var oDedRuleOut = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeOut, ShiftRecord.Code).FirstOrDefault();

                                int nextLine = i;
                                if (nextLine > dtAttendance.Rows.Count) continue;

                                strLateIn = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                strEarlyOut = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                                if (oDedRule != null)
                                {
                                    leaveType = Convert.ToInt32(oDedRule.LeaveType);
                                    leaveCountRageFrom = Convert.ToDecimal(oDedRule.LeaveCount);
                                    TimeInRule = oDedRule.RangeFrom;
                                    TimeOutRule = oDedRule.RangeTo;
                                    strLateInMinutes = CalculateLateInMinutes(ShiftStartTime, strTimeIn);
                                    if (!string.IsNullOrEmpty(strTimeIn) && (strLateInMinutes != "00:00" || strLateInMinutes != ""))
                                    {
                                        strLateInMinutesDeductionRules = CalculateLateInMinutes(TimeInRule, TimeOutRule);
                                        string ltmint = strLateInMinutes;
                                        TimeSpan TimeInOutded = TimeCalculate(strLateInMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan TimeIn = TimeCalculate(strLateInMinutes);
                                        totalTimeInMinutes = Math.Round((TimeIn.TotalMinutes), 0);

                                        if (leaveCountRageFrom != null && leaveCountRageFrom != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageFrom));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalTimeInMinutes > 0 && (totalTimeInMinutes >= TimeInOutRage || totalTimeInMinutes <= TimeInOutRage))
                                            {
                                                TotalLateInCount += 1;
                                            }
                                        }
                                    }
                                }
                                if (oDedRuleOut != null)
                                {
                                    leaveType = Convert.ToInt32(oDedRuleOut.LeaveType);
                                    leaveCountRageTo = Convert.ToDecimal(oDedRuleOut.LeaveCount);
                                    TimeInRuleRangeFrom = oDedRuleOut.RangeFrom;
                                    TimeOutRuleRangeTo = oDedRuleOut.RangeTo;
                                    strEarlyOutMinutes = CalculateEarlyOutMinutes(oDedRuleOut.RangeTo, strTimeOut);

                                    if (!string.IsNullOrEmpty(strEarlyOut) && (strEarlyOutMinutes != "00:00" || strEarlyOutMinutes != ""))
                                    {
                                        strEarlyOutMinutesDeductionRules = CalculateLateInMinutes(oDedRuleOut.RangeFrom, oDedRuleOut.RangeTo);
                                        TimeSpan TimeInOutded = TimeCalculate(strEarlyOutMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan EarlyOut = TimeCalculate(strEarlyOutMinutes);
                                        totalEarlyOutMinutes = Math.Round((EarlyOut.TotalMinutes), 0);
                                        if (leaveCountRageTo != null && leaveCountRageTo != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageTo));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalEarlyOutMinutes > 0 && (totalEarlyOutMinutes >= TimeInOutRage || totalEarlyOutMinutes <= TimeInOutRage))
                                            {
                                                TotalEarlyOutCount += 1;
                                            }
                                        }
                                    }
                                }

                                if (oDedRule != null && oDedRuleOut != null && TotalcountCheck >= 2 && flgFullDayLeave == false)
                                {
                                    TotalcountCheck = 0;
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.Code == AttendanceRules.LeaveTypeWOP
                                                        select a).FirstOrDefault();
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                    dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                    dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                    //dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                    dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                    TotalcountCheck = 0;
                                }
                                //if (strLateIn != null && strEarlyOut != null && oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOutMemory)
                                if (oDedRule != null && oDedRuleOut != null && oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOutMemory)
                                {
                                    flgFullDayLeave = true;
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.Code == AttendanceRules.LeaveTypeWOP
                                                        select a).FirstOrDefault();
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                    dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                    dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                    dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy: " + " " + string.Format("{0:0.00}", 1.00));
                                }

                                TotalLateINEarlyOut = TotalLateInCount + TotalEarlyOutCount;
                                #region Roshan Leave Validation
                                if (oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOut && flgcountFour == false)
                                {
                                    TotalLateINEarlyOutMemory = TotalLateINEarlyOut;
                                    flgcountFour = true;
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }
                                else if (TotalLateINEarlyOut >= 1 && flgcountFour == true && flgFullDayLeave == false)
                                //else if ((oDedRule != null || oDedRuleOut != null) && TotalLateINEarlyOut >= 1 && flgcountFour == true)
                                {
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy: " + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }

                                else
                                {
                                    string temLeaveType = "-1";
                                    string temLeaveHours = "00:00";

                                    string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    if (strShortLeaves.Contains("Assigned"))
                                    {
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                        dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                        dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "");
                                    }
                                }
                                #endregion
                            }
                            //else
                            //{
                            //    string temLeaveType = "-1";
                            //    string temLeaveHours = "00:00";

                            //    string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                            //    if (strShortLeaves.Contains("Assigned"))
                            //    {
                            //        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                            //        dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                            //        dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                            //        dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                            //        dtAttendance.SetValue("clDesc", i - 1, "");
                            //    }
                            //}
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingLateInEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void CalculatingLateInEarlyOutWorkingGoodAfterTimeBase()
        {
            try
            {
                DateTime StartDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                string strLateIn = "";
                string strEarlyOut = "";
                string strWorkHours = "";
                string strLateInMinutes = "";
                string strLateInMinutesDeductionRules = "";
                string strEarlyOutMinutes = "";
                string strEarlyOutMinutesDeductionRules = "";
                string strEmpCode = "";
                int intEmpID = 0;
                TotalLateINEarlyOut = 0;
                TotalLateInCount = 0;
                TotalEarlyOutCount = 0;
                Boolean flgcountFour = false;

                grdAttendance.FlushToDataSource();

                var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {

                    StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    if (oEmp == null) continue;
                    intEmpID = oEmp.ID;
                    if (intEmpID > 0)
                    {
                        string strShiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        string strLeaveCount = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strStatus = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftStartTime = (grdAttendance.Columns.Item("SfStart").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                        var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();
                        var AttendanceRules = dbHrPayroll.MstAttendanceRule.FirstOrDefault();

                        double totalTimeInMinutes = 0;
                        double TimeInOutRage = 0;
                        double totalEarlyOutMinutes = 0;
                        strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                        TempLeaveHours = CalculateLeaveHours(strShiftHours, strWorkHours);
                        int leaveType = 0;

                        decimal leaveCountRageFrom = 0;
                        decimal leaveCountRageTo = 0;
                        string TimeInRuleRangeFrom = "";
                        string TimeOutRuleRangeTo = "";
                        string TimeInRule = "";
                        string TimeOutRule = "";
                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgShortLeave ?? false) != false && oAttendanceRules.ShortLeaveCount != null)
                        {
                            if (!string.IsNullOrEmpty(strStatus))
                            {
                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeIn, ShiftRecord.Code).FirstOrDefault();
                                var oDedRuleOut = dbHrPayroll.SpAppliedDeductionRuleTimeBase(strTimeOut, ShiftRecord.Code).FirstOrDefault();

                                int nextLine = i;
                                if (nextLine > dtAttendance.Rows.Count) continue;

                                strLateIn = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                strEarlyOut = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                                if (oDedRule != null)
                                {

                                    leaveType = Convert.ToInt32(oDedRule.LeaveType);
                                    leaveCountRageFrom = Convert.ToDecimal(oDedRule.LeaveCount);
                                    TimeInRule = oDedRule.RangeFrom;
                                    TimeOutRule = oDedRule.RangeTo;
                                    strLateInMinutes = CalculateLateInMinutes(TimeInRule, strTimeIn);
                                    if (!string.IsNullOrEmpty(strTimeIn) && (strLateInMinutes != "00:00" || strLateInMinutes != ""))
                                    {
                                        strLateInMinutesDeductionRules = CalculateLateInMinutes(TimeInRule, TimeOutRule);
                                        string ltmint = strLateInMinutes;
                                        TimeSpan TimeInOutded = TimeCalculate(strLateInMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan TimeIn = TimeCalculate(strLateInMinutes);
                                        totalTimeInMinutes = Math.Round((TimeIn.TotalMinutes), 0);

                                        if (leaveCountRageFrom != null && leaveCountRageFrom != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageFrom));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy:" + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalTimeInMinutes > 0 && (totalTimeInMinutes >= TimeInOutRage || totalTimeInMinutes <= TimeInOutRage))
                                            {
                                                TotalLateInCount += 1;
                                            }

                                        }
                                    }
                                }
                                if (oDedRuleOut != null)
                                {
                                    leaveType = Convert.ToInt32(oDedRuleOut.LeaveType);
                                    leaveCountRageTo = Convert.ToDecimal(oDedRuleOut.LeaveCount);
                                    TimeInRuleRangeFrom = oDedRuleOut.RangeFrom;
                                    TimeOutRuleRangeTo = oDedRuleOut.RangeTo;
                                    strEarlyOutMinutes = CalculateEarlyOutMinutes(oDedRuleOut.RangeTo, strTimeOut);

                                    if (!string.IsNullOrEmpty(strEarlyOut) && (strEarlyOutMinutes != "00:00" || strEarlyOutMinutes != ""))
                                    {
                                        strEarlyOutMinutesDeductionRules = CalculateLateInMinutes(oDedRuleOut.RangeFrom, oDedRuleOut.RangeTo);
                                        TimeSpan TimeInOutded = TimeCalculate(strEarlyOutMinutesDeductionRules);
                                        TimeInOutRage = Math.Round((TimeInOutded.TotalMinutes), 0);

                                        TimeSpan EarlyOut = TimeCalculate(strEarlyOutMinutes);
                                        totalEarlyOutMinutes = Math.Round((EarlyOut.TotalMinutes), 0);
                                        if (leaveCountRageTo != null && leaveCountRageTo != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == leaveType
                                                                select a).FirstOrDefault();
                                            dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", leaveCountRageTo));
                                            dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                            dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                            dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                            dtAttendance.SetValue("clDesc", i - 1, "Half Day leave policy:" + " " + string.Format("{0:0.00}", 0.50));
                                            TotalcountCheck += 1;
                                        }
                                        else
                                        {
                                            if (totalEarlyOutMinutes > 0 && (totalEarlyOutMinutes >= TimeInOutRage || totalEarlyOutMinutes <= TimeInOutRage))
                                            {
                                                TotalEarlyOutCount += 1;
                                            }
                                        }
                                    }

                                }

                                if (oDedRule != null && oDedRuleOut != null && TotalcountCheck >= 2)
                                {
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.Code == AttendanceRules.LeaveTypeWOP
                                                        select a).FirstOrDefault();
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 1.00));
                                    dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                    dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                    //dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                    dtAttendance.SetValue("clDesc", i - 1, "Full Day leave policy 4:" + " " + string.Format("{0:0.00}", 1.00));
                                    TotalcountCheck = 0;
                                }

                                TotalLateINEarlyOut = TotalLateInCount + TotalEarlyOutCount;
                                #region Roshan Leave Validation
                                // check if this row has already leave assigned if yes the clear the leave
                                if (oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOut)
                                {
                                    flgcountFour = true;
                                    //var LeaveMasterData = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        //dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy 4:" + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }
                                else if (TotalLateINEarlyOut >= 1 && flgcountFour == true)
                                {
                                    if (leaveType != null && leaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == leaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, oLeaveMaster.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        //dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy 4:" + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }
                                }

                                else
                                {
                                    string temLeaveType = "-1";
                                    string temLeaveHours = "00:00";

                                    string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    if (strShortLeaves.Contains("Assigned"))
                                    {
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                        dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                        dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "");
                                    }
                                }
                                #endregion
                            }
                            //else
                            //{
                            //    string temLeaveType = "-1";
                            //    string temLeaveHours = "00:00";

                            //    string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                            //    if (strShortLeaves.Contains("Assigned"))
                            //    {
                            //        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                            //        dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                            //        dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                            //        dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                            //        dtAttendance.SetValue("clDesc", i - 1, "");
                            //    }
                            //}
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingLateInEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void CalculatingLateInEarlyOutWorkingGoodLeaveAssignORunassign()
        {
            try
            {
                DateTime StartDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                string strLateIn = "";
                string strEarlyOut = "";
                string strWorkHours = "";
                string strLateInMinutes = "";
                string strEarlyOutMinutes = "";
                string strEmpCode = "";
                int intEmpID = 0;
                TotalLateINEarlyOut = 0;
                TotalLateInCount = 0;
                TotalEarlyOutCount = 0;

                grdAttendance.FlushToDataSource();

                var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {

                    StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                    strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    if (oEmp == null) continue;
                    intEmpID = oEmp.ID;
                    if (intEmpID > 0)
                    {
                        string strShiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                        string strLeaveCount = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strStatus = (grdAttendance.Columns.Item("clStatus").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeIn = (grdAttendance.Columns.Item("TmIn").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string strTimeOut = (grdAttendance.Columns.Item("TmOut").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftName = (grdAttendance.Columns.Item("shft").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftStartTime = (grdAttendance.Columns.Item("SfStart").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                        string ShiftEndTime = (grdAttendance.Columns.Item("SfEnd").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                        var ShiftRecord = dbHrPayroll.MstShifts.Where(S => S.Description == ShiftName).FirstOrDefault();

                        double totalTimeInMinutes = 0;
                        double totalEarlyOutMinutes = 0;
                        double DeductionRule45Minutes = 45;
                        double DeductionRule59Minutes = 59;
                        strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                        TempLeaveHours = CalculateLeaveHours(strShiftHours, strWorkHours);
                        int leaveType = 0;
                        if (ShiftRecord.DeductionRuleID != null && (oAttendanceRules.FlgShortLeave ?? false) != false && oAttendanceRules.ShortLeaveCount != null)
                        {
                            if (!string.IsNullOrEmpty(strStatus))
                            {
                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, ShiftName).FirstOrDefault();
                                if (oDedRule != null)
                                {
                                    string DeductionType = oDedRule.DeductionRuleType;
                                    leaveType = Convert.ToInt32(oDedRule.LeaveType);
                                    bool Deduction = Convert.ToBoolean(oDedRule.Deduction);
                                    strDeductionRule = Convert.ToString(oDedRule.Code);
                                    int nextLine = i;
                                    if (nextLine > dtAttendance.Rows.Count) continue;

                                    strLateIn = (grdAttendance.Columns.Item("clLtMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    strEarlyOut = (grdAttendance.Columns.Item("clEOMin").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    if (!string.IsNullOrEmpty(strTimeIn))
                                    {
                                        strLateInMinutes = CalculateLateInMinutes(ShiftStartTime, strTimeIn);
                                        string ltmint = strLateInMinutes;
                                        TimeSpan TimeIn = TimeCalculate(strLateInMinutes);
                                        totalTimeInMinutes = Math.Round((TimeIn.TotalMinutes), 0);
                                        if (totalTimeInMinutes > 0 && DeductionRule45Minutes >= totalTimeInMinutes)
                                        {
                                            TotalLateInCount += 1;
                                        }

                                        else
                                        {
                                            var LeaveMasterData = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", oDedRule.LeaveCount));
                                                dtAttendance.SetValue("LevType", i - 1, LeaveMasterData.Code);
                                                dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                                dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                                dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                            }
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(strEarlyOut))
                                    {
                                        strEarlyOutMinutes = CalculateEarlyOutMinutes(ShiftEndTime, strTimeOut);

                                        TimeSpan EarlyOut = TimeCalculate(strEarlyOutMinutes);
                                        totalEarlyOutMinutes = Math.Round((EarlyOut.TotalMinutes), 0);
                                        if (totalEarlyOutMinutes > 0 && totalEarlyOutMinutes <= DeductionRule59Minutes)
                                        {
                                            TotalEarlyOutCount += 1;
                                        }
                                    }
                                }
                                TotalLateINEarlyOut = TotalLateInCount + TotalEarlyOutCount;
                                #region Roshan Leave Validation
                                // check if this row has already leave assigned if yes the clear the leave
                                if (oAttendanceRules.ShortLeaveCount == TotalLateINEarlyOut)
                                {
                                    var LeaveMasterData = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();
                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                    {
                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                            where a.ID == oDedRule.LeaveType
                                                            select a).FirstOrDefault();
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.50));
                                        dtAttendance.SetValue("LevType", i - 1, LeaveMasterData.Code);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "Y");
                                        dtAttendance.SetValue("LevHours", i - 1, TempLeaveHours);
                                        dtAttendance.SetValue("DedRule", i - 1, oDedRule.Code);
                                        dtAttendance.SetValue("clDesc", i - 1, "Assigned Leave on Short leave policy 4:" + " " + string.Format("{0:0.00}", 0.50));
                                        TotalLateINEarlyOut = 0;
                                        TotalLateInCount = 0;
                                        TotalEarlyOutCount = 0;
                                    }

                                }
                                else
                                {
                                    string temLeaveType = "-1";
                                    string temLeaveHours = "00:00";

                                    string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    if (strShortLeaves.Contains("Assigned"))
                                    {
                                        dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                        dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                        dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                        dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                        dtAttendance.SetValue("clDesc", i - 1, "");
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                string temLeaveType = "-1";
                                string temLeaveHours = "00:00";

                                string strShortLeaves = (grdAttendance.Columns.Item("clDesc").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                if (strShortLeaves.Contains("Assigned"))
                                {
                                    dtAttendance.SetValue("LevCount", i - 1, string.Format("{0:0.00}", 0.00));
                                    dtAttendance.SetValue("LevType", i - 1, temLeaveType);
                                    dtAttendance.SetValue("IsNewLeave", i - 1, "N");
                                    dtAttendance.SetValue("LevHours", i - 1, temLeaveHours);
                                    dtAttendance.SetValue("clDesc", i - 1, "");
                                }
                            }
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingLateInEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void CalculatingConsectiveoffDay()
        {
            try
            {
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;


                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    string strEmpCode = (grdAttendance.Columns.Item("EmpCode").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value; ;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    if (oEmp == null) continue;
                    string strShiftHours = (grdAttendance.Columns.Item("SfHours").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    string strLeaveType = (grdAttendance.Columns.Item("LT").Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Value;
                    string strLeaveCount = (grdAttendance.Columns.Item("lCnt").Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;

                    // bool isNewLeave = false;
                    var EmployeeInList = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmp.EmpID).FirstOrDefault();
                    if (EmployeeInList == null)
                    {
                        clsEmployeeLeaveBalance oOneEmployee = new clsEmployeeLeaveBalance();
                        oOneEmployee.EmpID = oEmp.EmpID;
                        oOneEmployee.DR1 = 0;
                        oOneEmployee.DR2 = 0;
                        oEmployeeLeaveBalance.Add(oOneEmployee);
                    }
                    //if (!string.IsNullOrEmpty(strLeaveType))
                    if (!string.IsNullOrEmpty(strLeaveType) && Convert.ToDouble(strLeaveCount) == 1.0)
                    {
                        int nextLine = i + 1;
                        if (nextLine > dtAttendance.Rows.Count) continue;
                        string nextWeekendCheck = (grdAttendance.Columns.Item("clDesc").Cells.Item(i + 1).Specific as SAPbouiCOM.EditText).Value;
                        if (nextWeekendCheck.Trim().ToLower() == "weekend")
                        {
                            int nextLineAfterWeekend = i + 2;
                            if (nextLineAfterWeekend > dtAttendance.Rows.Count) continue;
                            string LeaveAfterWeekend = (grdAttendance.Columns.Item("LT").Cells.Item(i + 2).Specific as SAPbouiCOM.ComboBox).Value;
                            string LeaveCountAfterWeekend = (grdAttendance.Columns.Item("lCnt").Cells.Item(i + 2).Specific as SAPbouiCOM.EditText).Value;
                            if (!string.IsNullOrEmpty(LeaveAfterWeekend) && Convert.ToDouble(LeaveCountAfterWeekend) == 1.0)
                            //if (!string.IsNullOrEmpty(LeaveAfterWeekend))
                            {
                                #region Leave ka Kam
                                string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From dbo.MstDeductionRules ";
                                System.Data.DataTable dt = ds.getDataTable(SQL);
                                if (oEmp.MstPosition == null) continue;
                                if (oEmp.MstPosition.Name.ToLower().StartsWith("con"))
                                {
                                    int leaveTypeInt = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                    var LeaveData = dbHrPayroll.MstLeaveType.Where(lv => lv.ID == leaveTypeInt).FirstOrDefault();
                                    string leavecount = "1.000";
                                    string leaveType = LeaveData.Code;
                                    string leaveHours = strShiftHours;
                                    dtAttendance.SetValue("LevCount", i, Convert.ToString(leavecount));
                                    dtAttendance.SetValue("LevType", i, leaveType);
                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                    dtAttendance.SetValue("LevHours", i, leaveHours);
                                }
                                else if (oEmp.MstPosition.Name.ToLower().StartsWith("man"))
                                {
                                    //Check leave Priority 1
                                    int LeaveTypeFromList = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                    if (LeaveTypeFromList <= 0) continue;
                                    var LeaveMasterData = (from a in dbHrPayroll.MstLeaveType where a.ID == LeaveTypeFromList select a).FirstOrDefault();
                                    decimal chkLeavesEntitled = (from a in dbHrPayroll.MstEmployeeLeaves
                                                                 where a.MstEmployee.EmpID == oEmp.EmpID
                                                                 && a.MstLeaveType.Code == LeaveMasterData.Code
                                                                 select a.LeavesEntitled).FirstOrDefault();
                                    decimal chkLeavesCarryForward = (from a in dbHrPayroll.MstEmployeeLeaves
                                                                     where a.MstEmployee.EmpID == oEmp.EmpID
                                                                     && a.MstLeaveType.Code == LeaveMasterData.Code
                                                                     select a.LeavesCarryForward).FirstOrDefault();
                                    decimal LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;
                                    decimal LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                         where a.MstEmployee.EmpID == oEmp.EmpID
                                                         && a.MstLeaveType.Code == LeaveMasterData.Code
                                                         select a.TotalCount).Sum() ?? 0;
                                    var EmployeeRTValue1 = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmp.EmpID).FirstOrDefault();
                                    decimal RTBalanceR1 = EmployeeRTValue1.DR1 != null ? EmployeeRTValue1.DR1 : 0;

                                    if ((LeaveEntitled - (LeaveUsed + RTBalanceR1)) >= 1)
                                    //
                                    {
                                        string Templeavecount = "1.000";
                                        decimal leavecount = Convert.ToDecimal(Templeavecount);
                                        string leaveType = LeaveMasterData.Code;
                                        string leaveHours = strShiftHours;

                                        dtAttendance.SetValue("LevCount", i, Convert.ToString(leavecount));
                                        dtAttendance.SetValue("LevType", i, leaveType);
                                        dtAttendance.SetValue("IsNewLeave", i, "Y");
                                        dtAttendance.SetValue("LevHours", i, leaveHours);
                                        EmployeeRTValue1.DR1 += leavecount;
                                    }
                                    else
                                    {
                                        //Priorty List 2 
                                        int LeaveTypeFromList2 = Convert.ToInt32(dt.Rows[1]["LeaveType"]);
                                        if (LeaveTypeFromList2 <= 0) continue;
                                        var LeaveMasterData2 = (from a in dbHrPayroll.MstLeaveType where a.ID == LeaveTypeFromList2 select a).FirstOrDefault();

                                        decimal ckhLeavesEntitled2 = (from a in dbHrPayroll.MstEmployeeLeaves
                                                                      where a.MstEmployee.EmpID == oEmp.EmpID
                                                                      && a.MstLeaveType.Code == LeaveMasterData.Code
                                                                      select a.LeavesEntitled).FirstOrDefault();
                                        decimal chkLeavesCarryForward2 = (from a in dbHrPayroll.MstEmployeeLeaves
                                                                          where a.MstEmployee.EmpID == oEmp.EmpID
                                                                          && a.MstLeaveType.Code == LeaveMasterData.Code
                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                        decimal LeaveEntitled2 = ckhLeavesEntitled2 + chkLeavesCarryForward2;

                                        decimal LeaveUsed2 = (from a in dbHrPayroll.TrnsLeavesRequest
                                                              where a.MstEmployee.EmpID == oEmp.EmpID
                                                              && a.MstLeaveType.Code == LeaveMasterData.Code
                                                              select a.TotalCount).Sum() ?? 0;
                                        var EmployeeRTValue2 = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmp.EmpID).FirstOrDefault();
                                        decimal RTBalanceR2 = EmployeeRTValue2.DR2 != null ? EmployeeRTValue2.DR2 : 0;

                                        if ((LeaveEntitled2 - (LeaveUsed2 + RTBalanceR2)) >= 1)
                                        {
                                            string Templeavecount = "1.000";
                                            decimal leavecount = Convert.ToDecimal(Templeavecount);
                                            string leaveType = LeaveMasterData2.Code;
                                            string leaveHours = strShiftHours;

                                            dtAttendance.SetValue("LevCount", i, Convert.ToString(leavecount));
                                            dtAttendance.SetValue("LevType", i, leaveType);
                                            dtAttendance.SetValue("IsNewLeave", i, "Y");
                                            dtAttendance.SetValue("LevHours", i, leaveHours);
                                            EmployeeRTValue2.DR2 += leavecount;
                                        }
                                        else
                                        {
                                            //Priority Option 3
                                            int LeaveTypeFromList3 = Convert.ToInt32(dt.Rows[1]["LeaveType"]);
                                            if (LeaveTypeFromList3 <= 0) continue;
                                            var LeaveMasterData3 = (from a in dbHrPayroll.MstLeaveType where a.ID == LeaveTypeFromList3 select a).FirstOrDefault();
                                            string Templeavecount = "1.000";
                                            decimal leavecount = Convert.ToDecimal(Templeavecount);
                                            string leaveType = LeaveMasterData3.Code;
                                            string leaveHours = strShiftHours;

                                            dtAttendance.SetValue("LevCount", i, Convert.ToString(leavecount));
                                            dtAttendance.SetValue("LevType", i, leaveType);
                                            dtAttendance.SetValue("IsNewLeave", i, "Y");
                                            dtAttendance.SetValue("LevHours", i, leaveHours);
                                        }
                                    }
                                }
                                #endregion
                            }
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingConsectiveoffDay Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void LoadEmployeeAttendanceRecordOrderByDateMEPL()
        {
            #region Variables
            SAPbouiCOM.ProgressBar prog = null;
            string strEmpCode = "";
            int intEmpID = 0;
            //string intEmpID = "";
            string strEmpName = "";
            string strWorkHours = "";
            string strWorkMints = "";
            string strOTMints = "";
            string strCalculatedMints = "";
            int RecordCounter = 0;
            decimal LeaveCount = 0;
            string shiftName = "";
            string strDesc = "";
            string shiftTimeIn = "";
            string shiftBefferTimeIn = "";
            string shiftBufferTimeOut = "";
            string shiftTimeOut = "";
            string shiftHours = "";
            string strTimeIn = "";
            string strtempTimeIn = "";
            string strTimeOut = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strLeaveHours = "";
            string strStatus = "";
            string strLeaveType = "";
            string strLeaveTypeCode = "";
            bool isNewLeave = false;
            bool InflgOverlap = false;
            bool OutflgOverlap = false;
            bool isOverTimeApplicable = false;
            int intLeaveType = -1;
            decimal MaxIn = 0.0M;
            decimal MaxOut = 0.0M;
            decimal MinIn = 0.0M;
            decimal MinOut = 0.0M;
            string startTime = "";
            string endTime = "";


            #endregion

            try
            {
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;

                if (dtEmployees == null && dtEmployees.Rows.Count <= 0)
                {
                    oApplication.StatusBar.SetText("Please Select Employee(s) First", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return;
                }
                if (string.IsNullOrEmpty(txtFromDate.Value) && string.IsNullOrEmpty(txtToDate.Value))
                {
                    oApplication.StatusBar.SetText("Please Select Attendance Process From and To Date", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                    return;
                }
                if (!string.IsNullOrEmpty(txtFromDate.Value) && !string.IsNullOrEmpty(txtToDate.Value))
                {
                    startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    double totalEmps = ((EndDate.Subtract(startDate)).TotalDays + 1);
                    if (totalEmps > 0)
                    {
                        int TotalRecord = Convert.ToInt32(totalEmps);
                        prog = oApplication.StatusBar.CreateProgressBar("Importing Employee(s) Attendance Record(s)", TotalRecord, false);
                        prog.Value = 0;
                    }
                    for (DateTime x = startDate; x <= EndDate; x = x.AddDays(1))
                    {
                        System.Windows.Forms.Application.DoEvents();
                        prog.Value += 1;

                        for (int i = 0; i < dtEmployees.Rows.Count; i++)
                        {
                            bool sel2 = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                            if (!sel2)
                            {
                                continue;
                            }

                            strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                            strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                            var oEmployee = dbHrPayroll.MstEmployee.Where(e => e.EmpID == strEmpCode).FirstOrDefault();

                            var EmployeeInList = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                            if (EmployeeInList == null)
                            {
                                clsEmployeeLeaveBalance oOneEmployee = new clsEmployeeLeaveBalance();
                                oOneEmployee.EmpID = oEmployee.EmpID;
                                oOneEmployee.DR1 = 0;
                                oOneEmployee.DR2 = 0;
                                oEmployeeLeaveBalance.Add(oOneEmployee);
                            }

                            intEmpID = oEmployee.ID;
                            if (intEmpID > 0)
                            {
                                bool IsHoliday = false;
                                strDesc = string.Empty;
                                strTimeIn = string.Empty;
                                strtempTimeIn = string.Empty;
                                strTimeOut = string.Empty;
                                strWorkHours = string.Empty;
                                shiftBefferTimeIn = string.Empty;
                                shiftBufferTimeOut = string.Empty;
                                strOverTimeHours = string.Empty;
                                strLateInMinutes = string.Empty;
                                strEarlyOutMinutes = string.Empty;
                                strStatus = string.Empty;
                                strLeaveHours = string.Empty;
                                strLeaveType = string.Empty;
                                strOverTimeType = string.Empty;
                                strLeaveTypeCode = string.Empty;
                                isNewLeave = false;
                                isOverTimeApplicable = false;
                                intLeaveType = -1;
                                strWorkMints = string.Empty;
                                string EmpCalenderID = oEmployee.EmpCalender;
                                LeaveCount = 0;
                                strOTMints = "";
                                TrnsAttendanceRegister AttendanceRegisterFlgProcess = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.EmpID == intEmpID && atr.Date >= startDate && atr.Date <= EndDate && atr.Processed == true || atr.Processed == false).FirstOrDefault();
                                TrnsAttendanceRegister AttendanceRegisterFlgPosted = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.EmpID == intEmpID && atr.Date >= startDate && atr.Date <= EndDate && atr.FlgPosted == false).FirstOrDefault();
                                TrnsTempAttendance TempAttendanceFlgProcess = dbHrPayroll.TrnsTempAttendance.Where(tat => tat.EmpID == strEmpCode && tat.FlgProcessed == false || tat.FlgProcessed == true).FirstOrDefault();

                                //var TempAttFlgProcesses = dbHrPayroll.TrnsTempAttendance.Where(tempat => tempat.EmpID == oEmployee.EmpID && tempat.FlgProcessed == false).ToList();

                                string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                if (TempAttendanceFlgProcess != null)
                                {
                                    #region TemAttendance Saved in TrnsAttendanceRegister

                                    shiftName = string.IsNullOrEmpty(AttendanceRegisterFlgProcess.MstShifts.Description) ? "" : AttendanceRegisterFlgProcess.MstShifts.Description;
                                    var ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == AttendanceRegisterFlgProcess.MstShifts.Id).FirstOrDefault();
                                    if (ShiftDetail == null)
                                    {
                                        oApplication.StatusBar.SetText("Please assign shift to Employee ID '" + strEmpCode + "'", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                        continue;
                                    }
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;

                                    }
                                    var AttendanceRegisterSaved = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == intEmpID && (atr.Processed == null || atr.Processed == true) && (atr.FlgPosted == null || atr.FlgPosted == false && atr.Date >= startDate && atr.Date <= EndDate)).FirstOrDefault();
                                    if (AttendanceRegisterSaved != null)
                                    {
                                        strTimeIn = AttendanceRegisterSaved.TimeIn.Trim();
                                        strTimeOut = AttendanceRegisterSaved.TimeOut.Trim();
                                        strLateInMinutes = AttendanceRegisterSaved.LateInMin.Trim();

                                        strEarlyOutMinutes = string.IsNullOrEmpty(AttendanceRegisterSaved.EarlyOutMin) ? "" : AttendanceRegisterSaved.EarlyOutMin.Trim();

                                        strWorkHours = string.IsNullOrEmpty(AttendanceRegisterSaved.WorkHour) ? "" : AttendanceRegisterSaved.WorkHour.Trim();
                                        strOverTimeHours = string.IsNullOrEmpty(AttendanceRegisterSaved.OTHour) ? "" : AttendanceRegisterSaved.OTHour.Trim();
                                        //strLeaveHours = string.IsNullOrEmpty(AttendanceRegisterSaved.LeaveHour) ? "" : AttendanceRegisterSaved.LeaveHour.Trim();                                        
                                        //isNewLeave = Convert.ToBoolean(AttendanceRegisterSaved.FlgisNewLeave);
                                        strWorkMints = Convert.ToString(AttendanceRegisterSaved.ManualUnits != null ? AttendanceRegisterSaved.ManualUnits : 0);
                                        strCalculatedMints = Convert.ToString(AttendanceRegisterSaved.CalculatedUnits != null ? AttendanceRegisterSaved.CalculatedUnits : 0);
                                        strOTMints = Convert.ToString(AttendanceRegisterSaved.OTUnits != null ? AttendanceRegisterSaved.OTUnits : 0);
                                        //Leave
                                        strLeaveHours = string.IsNullOrEmpty(AttendanceRegisterSaved.LeaveHour) ? "" : AttendanceRegisterSaved.LeaveHour.Trim();

                                        if (strLeaveHours != "")
                                        {
                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == AttendanceRegisterSaved.LeaveType).FirstOrDefault().Code;

                                            WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);

                                            if (TempLeaveCount > 1)
                                            {
                                                LeaveCount = 1;
                                            }
                                            else
                                            {
                                                LeaveCount = TempLeaveCount;
                                            }
                                        }
                                        //
                                        //string.IsNullOrEmpty(CalculatedUnits) ? 0 : Convert.ToInt32(CalculatedUnits);
                                        //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID = Convert.ToInt32(AttendanceRegisterSaved.LeaveType)).FirstOrDefault().Description;


                                        //Calculate Leaves in diffrent Scenerio   
                                        // Status is not in Use in Current Version
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                        {
                                            strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                        }


                                        //Calculate OverTime Here                                  
                                        #region Calculate OverTime
                                        if (!string.IsNullOrEmpty(strWorkHours))
                                        {
                                            string strInOverTime = "00:00";
                                            string strOutOverTime = "00:00";

                                            TimeSpan OverTimeH = TimeCalculate("00:00");
                                            double OTMints = 0;


                                            Boolean flgPayroll = false;
                                            flgPayroll = Convert.ToBoolean(oEmployee.CfgPayrollDefination.FlgOT);
                                            if (!flgPayroll)
                                            {
                                                isOverTimeApplicable = AttendanceRegisterSaved.MstShifts.OverTime == null ? false : AttendanceRegisterSaved.MstShifts.OverTime.Value;
                                                if (!isOverTimeApplicable)
                                                {
                                                    strOverTimeHours = "";
                                                    strOverTimeType = "";
                                                }
                                                else
                                                {
                                                    bool flgOTApplicable = AttendanceRegisterSaved.MstEmployee.FlgOTApplicable == null ? false : AttendanceRegisterSaved.MstEmployee.FlgOTApplicable.Value;
                                                    bool flgOtonWorkedHours = AttendanceRegisterSaved.MstShifts.FlgOTWrkHrs == null ? false : AttendanceRegisterSaved.MstShifts.FlgOTWrkHrs.Value;

                                                    if (flgOtonWorkedHours)
                                                    {
                                                        if (flgOTApplicable)
                                                        {
                                                            strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, strWorkHours);
                                                            OverTimeH = TimeCalculate(strOverTimeHours);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            var OTDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OTDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                            //shiftTimeOut
                                                            if (strOverTimeHours == "00:00")
                                                            {
                                                                strOverTimeHours = "";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (flgOTApplicable)
                                                        {
                                                            if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                            {
                                                                shiftBefferTimeIn = shiftTimeIn;
                                                            }
                                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                            {
                                                                shiftBufferTimeOut = shiftTimeOut;
                                                            }
                                                            //strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                                            strInOverTime = IFInOvertimeApplicableMEPL(shiftBefferTimeIn, strTimeIn);
                                                            OverTimeH = TimeCalculate(strInOverTime);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            var pauseDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (pauseDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                            if (strInOverTime != "00:00")
                                                            {
                                                                //CalculateIN Overtime AccordingToShift
                                                                //strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                                strInOverTime = CalculateInOvertimeApplicableMEPL(shiftTimeIn, strTimeIn);
                                                                //OT Units
                                                                OverTimeH = TimeCalculate(strInOverTime);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                pauseDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (pauseDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }

                                                                //
                                                            }
                                                            //strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);


                                                            //strOutOverTime = IFOutOvertimeApplicable(shiftHours, strWorkHours, OutflgOverlap);
                                                            strOutOverTime = IFOutOvertimeApplicableMEPL(shiftHours, strWorkHours, OutflgOverlap);

                                                            OverTimeH = TimeCalculate(strOutOverTime);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            var OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                            //strOutOverTime = IFOutOvertimeApplicable(Convert.ToString(totalshifthrs), Convert.ToString(totalWorkhrs), OutflgOverlap);
                                                            if (strOutOverTime != "00:00")
                                                            {

                                                                //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                                strOutOverTime = CalculateOutOvertimeApplicableMEPL(strTimeOut, shiftTimeOut);
                                                                //OT Units
                                                                OverTimeH = TimeCalculate(strOutOverTime);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                                //
                                                                //strOutOverTime = CalculateOutOvertimeApplicable(Convert.ToString(totalshifthrs), Convert.ToString(totalWorkhrs));

                                                            }

                                                            //strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                            strOverTimeHours = CalculateOverTimeHoursInandOutTimeMEPL(strInOverTime, strOutOverTime);

                                                            OverTimeH = TimeCalculate(strOverTimeHours);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }

                                                            if (strOverTimeHours == "00:00")
                                                            {
                                                                strOverTimeHours = "";
                                                            }
                                                            //OverTime on Weekend
                                                            if (shiftHours == "00:00" && strWorkHours != "0.00")
                                                            {
                                                                //MEPL
                                                                TimeSpan OT = TimeCalculate(strWorkHours);
                                                                TimeSpan t01 = TimeCalculate("00:00");

                                                                totalOverTime = OT.Add(t01);

                                                                Totalhrs = (totalOverTime.Hours);
                                                                TotalMints = (totalOverTime.Minutes);
                                                                //TotalMints = TotalMints == null ? 1 : TotalMints;
                                                                //if (TotalMints == 0)
                                                                //{
                                                                //    TotalMints = +1;
                                                                //}
                                                                //remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                //remainder = remainder % 2;
                                                                if (TotalMints == 0)
                                                                {
                                                                    TotalMints = +1;
                                                                }
                                                                if (TotalMints > 30)
                                                                {
                                                                    remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                }
                                                                else
                                                                {
                                                                    remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                    remainder = remainder % 2;
                                                                }

                                                                if (remainder == 1)
                                                                {
                                                                    remainder = 0;
                                                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);

                                                                    OverTimeH = TimeCalculate(strOverTimeHours);
                                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                    OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                    if (OutDuration == null)
                                                                    {
                                                                        strOTMints = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOTMints = Convert.ToString(OTMints);
                                                                    }
                                                                }

                                                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                if (remainder == 0)
                                                                {
                                                                    remainder = 0;
                                                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                    OverTimeH = TimeCalculate(strOverTimeHours);
                                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                    OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                    if (OutDuration == null)
                                                                    {
                                                                        strOTMints = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOTMints = Convert.ToString(OTMints);
                                                                    }
                                                                }

                                                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                OverTimeH = TimeCalculate(strOverTimeHours);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                                //END
                                                                // strOverTimeHours = strWorkHours;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegisterSaved.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (true)
                                                {
                                                    if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                    {
                                                        shiftBefferTimeIn = shiftTimeIn;
                                                    }
                                                    if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                    {
                                                        shiftBufferTimeOut = shiftTimeOut;
                                                    }
                                                    //strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                                    strInOverTime = IFInOvertimeApplicableMEPL(shiftBefferTimeIn, strTimeIn);

                                                    OverTimeH = TimeCalculate(strInOverTime);
                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                    var INDuration = TimeSpan.FromMinutes(OTMints);
                                                    if (INDuration == null)
                                                    {
                                                        strOTMints = "0";
                                                    }
                                                    else
                                                    {
                                                        strOTMints = Convert.ToString(OTMints);
                                                    }

                                                    if (strInOverTime != "00:00")
                                                    {
                                                        //CalculateIN Overtime AccordingToShift
                                                        //strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                        strInOverTime = CalculateInOvertimeApplicableMEPL(shiftTimeIn, strTimeIn);
                                                        OverTimeH = TimeCalculate(strInOverTime);
                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        INDuration = TimeSpan.FromMinutes(OTMints);
                                                        if (INDuration == null)
                                                        {
                                                            strOTMints = "0";
                                                        }
                                                        else
                                                        {
                                                            strOTMints = Convert.ToString(OTMints);
                                                        }
                                                    }
                                                    //strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                    strOutOverTime = IFOutOvertimeApplicableMEPL(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);

                                                    OverTimeH = TimeCalculate(strOutOverTime);
                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                    var OutDuration = TimeSpan.FromMinutes(OTMints);
                                                    if (OutDuration == null)
                                                    {
                                                        strOTMints = "0";
                                                    }
                                                    else
                                                    {
                                                        strOTMints = Convert.ToString(OTMints);
                                                    }
                                                    if (strOutOverTime == "00:00")
                                                    {
                                                        strOutOverTime = "";
                                                    }
                                                    if (strOutOverTime != "00:00")
                                                    {

                                                        //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                        strOutOverTime = CalculateOutOvertimeApplicableMEPL(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                        OverTimeH = TimeCalculate(strOutOverTime);
                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        OutDuration = TimeSpan.FromMinutes(OTMints);
                                                        if (INDuration == null)
                                                        {
                                                            strOTMints = "0";
                                                        }
                                                        else
                                                        {
                                                            strOTMints = Convert.ToString(OTMints);
                                                        }

                                                    }
                                                    //strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                    strOverTimeHours = CalculateOverTimeHoursInandOutTimeMEPL(strInOverTime, strOutOverTime);
                                                    OverTimeH = TimeCalculate(strOverTimeHours);
                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                    OutDuration = TimeSpan.FromMinutes(OTMints);
                                                    if (INDuration == null)
                                                    {
                                                        strOTMints = "0";
                                                    }
                                                    else
                                                    {
                                                        strOTMints = Convert.ToString(OTMints);
                                                    }
                                                    if (strOverTimeHours == "00:00")
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                    //OverTime on Weekend
                                                    if (shiftHours == "00:00" && strWorkHours != "0.00")
                                                    {
                                                        //MEPL
                                                        TimeSpan OT = TimeCalculate(strWorkHours);
                                                        TimeSpan t01 = TimeCalculate("00:00");

                                                        totalOverTime = OT.Add(t01);

                                                        Totalhrs = (totalOverTime.Hours);
                                                        TotalMints = (totalOverTime.Minutes);

                                                        if (TotalMints == 0)
                                                        {
                                                            TotalMints = +1;
                                                        }
                                                        if (TotalMints >= 30)
                                                        {
                                                            remainder = OTunit % Convert.ToInt32(TotalMints);
                                                        }
                                                        else
                                                        {
                                                            remainder = OTunit % Convert.ToInt32(TotalMints);
                                                            remainder = remainder % 2;
                                                        }

                                                        if (remainder == 1)
                                                        {
                                                            remainder = 0;
                                                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                            OverTimeH = TimeCalculate(strOverTimeHours);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                        }

                                                        strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                        if (remainder == 0)
                                                        {
                                                            remainder = 0;
                                                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                            OverTimeH = TimeCalculate(strOverTimeHours);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                        }

                                                        strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                        OverTimeH = TimeCalculate(strOverTimeHours);
                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        OutDuration = TimeSpan.FromMinutes(OTMints);
                                                        if (OutDuration == null)
                                                        {
                                                            strOTMints = "0";
                                                        }
                                                        else
                                                        {
                                                            strOTMints = Convert.ToString(OTMints);
                                                        }
                                                        //END
                                                        //strOverTimeHours = strWorkHours;
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                        strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oEmployee.CfgPayrollDefination.OTValue.Value).FirstOrDefault().Code;
                                                    }
                                                }
                                            }


                                        }

                                        #endregion
                                        if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                        {
                                            if (shiftHours == null && shiftHours == "00:00")
                                            {

                                            }
                                            else
                                            {
                                                strDesc = "Weekend";
                                                LeaveCount = 0.0M;
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                        {

                                            strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegisterSaved.MstShifts.OverTimeID.Value).FirstOrDefault().Code;

                                        }

                                        if (string.IsNullOrEmpty(strWorkHours))
                                        {
                                            strWorkHours = "0.00";
                                        }
                                        else if (strWorkHours == "00:00")
                                        {
                                            strWorkHours = "0.00";
                                        }

                                        dtAttendance.Rows.Add(1);
                                        dtAttendance.SetValue("Id", RecordCounter, AttendanceRegisterSaved.Id);
                                        dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                        dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                        dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                        dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                        dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                        dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                        dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                        dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                        dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                        dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                        dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                        dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                        dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                        dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());

                                        dtAttendance.SetValue("CUnits", RecordCounter, strCalculatedMints.Trim());
                                        dtAttendance.SetValue("UUnits", RecordCounter, strWorkMints.Trim());
                                        dtAttendance.SetValue("OTUnits", RecordCounter, strOTMints.Trim());

                                        dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                        dtAttendance.SetValue("OTHours", RecordCounter, string.IsNullOrEmpty(strOverTimeHours.Trim()) ? "" : strOverTimeHours.Trim());

                                        dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                        dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.000}", LeaveCount));
                                        dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                                        dtAttendance.SetValue("LevType", RecordCounter, strLeaveType.Trim());
                                        dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());

                                        RecordCounter++;


                                    }

                                    #endregion
                                    else
                                    {
                                        #region TempAttendance Not Save In TrnsAttendanceRegister

                                        #region Calculate WorkingHours

                                        //var AttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == intEmpID && (atr.Processed == null || atr.Processed == true)).FirstOrDefault();
                                        //var AttendanceRegisterFlgProcess = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == intEmpID && (atr.Processed == null || atr.Processed == true || atr.Processed == false) && (atr.FlgPosted == null || atr.FlgPosted == false)).FirstOrDefault();

                                        var AttendanceRegister = dbHrPayroll.TrnsAttendanceRegister.Where(atr => atr.Date == x && atr.EmpID == intEmpID && (atr.Processed == null || atr.Processed == false) && (atr.FlgPosted == null || atr.FlgPosted == false)).FirstOrDefault();
                                        if (AttendanceRegister != null)
                                        {
                                            //string dayofWeeks = Convert.ToString(x.DayOfWeek);
                                            shiftName = string.IsNullOrEmpty(AttendanceRegister.MstShifts.Description) ? "" : AttendanceRegister.MstShifts.Description;
                                            ShiftDetail = dbHrPayroll.MstShiftDetails.Where(S => S.Day == dayofWeeks && S.ShiftID == AttendanceRegister.MstShifts.Id).FirstOrDefault();
                                            if (ShiftDetail == null)
                                            {
                                                oApplication.StatusBar.SetText("Please assign shift to Employee ID '" + strEmpCode + "'", SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                continue;
                                            }
                                            if (ShiftDetail != null)
                                            {
                                                shiftTimeIn = ShiftDetail.StartTime;
                                                shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                                shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                                shiftTimeOut = ShiftDetail.EndTime;
                                                shiftHours = ShiftDetail.Duration;
                                                InflgOverlap = ShiftDetail.FlgInOverlap.Value;
                                                OutflgOverlap = ShiftDetail.FlgOutOverlap.Value;
                                            }
                                            //Get Attendance Record of the Day
                                            if (!InflgOverlap && !OutflgOverlap)
                                            {

                                                DateTime dtx = x.AddDays(1);
                                                //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate == x).ToList();
                                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == x).ToList();


                                                //var TempAttendanceNextDay = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx && tr.In_Out == "2").ToList();
                                                var TempAttendanceNextDay = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();

                                                if (TempAttendance != null && TempAttendance.Count > 0)
                                                {
                                                    t3 = TimeCalculate("00:00");

                                                    for (int a = 0; a < TempAttendance.Count; a = a + 2)
                                                    {
                                                        try
                                                        {
                                                            string strTIn = TempAttendance[a].PunchedTime == null ? "" : TempAttendance[a].PunchedTime;
                                                            string strTimeOUt = TempAttendance[a + 1].PunchedTime == null ? "" : TempAttendance[a + 1].PunchedTime;
                                                            //string strTimeOUt = TempAttendance[a].PunchedTime == null ? "" : TempAttendance[a].PunchedTime;

                                                            decimal decBufferTimeIn = ConvertTimeToDecimal(shiftBefferTimeIn);
                                                            decimal decPunchTime = ConvertTimeToDecimal(strTIn);
                                                            string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";
                                                            if (decPunchTime > decBufferTimeIn)
                                                            {
                                                                string TempWR = CalculateWorkHoursMEPL(strTIn, strTimeOUt);
                                                                strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempWR);
                                                                TimeSpan t1 = TimeCalculate(TempWR);
                                                                TimeSpan t2 = TimeCalculate("00:00");

                                                                t3 = t3 + t1.Add(t2);
                                                                //
                                                                TimeSpan ShiftTimeOut = TimeCalculate(shiftTimeOut);
                                                                TimeSpan strShiftTimeOut = TimeCalculate(strTimeOUt);
                                                                double ShiftTimeOutMints = Math.Round((ShiftTimeOut.TotalMinutes), 0);
                                                                double strShiftTimeOutMints = Math.Round((strShiftTimeOut.TotalMinutes), 0);

                                                                if (employeetype.ToLower().StartsWith("man"))
                                                                {
                                                                    if (strShiftTimeOutMints > ShiftTimeOutMints)
                                                                    {
                                                                        double ShiftOutMints = (strShiftTimeOutMints - ShiftTimeOutMints);
                                                                        totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                        totalunit = totalunit - ShiftOutMints;
                                                                    }
                                                                    else
                                                                    {
                                                                        totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                }

                                                                var ActualDuration = TimeSpan.FromMinutes(totalunit);

                                                                //wr = Convert.ToString(pauseDuration);

                                                                int hrs = ActualDuration.Hours;
                                                                int mint = ActualDuration.Minutes;

                                                                //int hrs = t3.Hours;
                                                                //int mint = t3.Minutes;

                                                                wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                                //TimeSpan WRHrs = TimeCalculate(wr);

                                                            }
                                                            else
                                                            {
                                                                string TempBufferTime = CalculateWorkHoursMEPL(shiftBefferTimeIn, strTimeOUt);
                                                                strWorkHours = CalculateOverTimeHoursInandOutTimeMEPL(strWorkHours, TempBufferTime);
                                                                TimeSpan t1 = TimeCalculate(TempBufferTime);
                                                                TimeSpan t2 = TimeCalculate("00:00");

                                                                t3 = t3 + t1.Add(t2);
                                                                //
                                                                TimeSpan ShiftTimeOut = TimeCalculate(shiftTimeOut);
                                                                TimeSpan strShiftTimeOut = TimeCalculate(strTimeOUt);
                                                                double ShiftTimeOutMints = Math.Round((ShiftTimeOut.TotalMinutes), 0);
                                                                double strShiftTimeOutMints = Math.Round((strShiftTimeOut.TotalMinutes), 0);

                                                                if (employeetype.ToLower().StartsWith("man"))
                                                                {
                                                                    if (strShiftTimeOutMints > ShiftTimeOutMints)
                                                                    {
                                                                        double ShiftOutMints = (strShiftTimeOutMints - ShiftTimeOutMints);
                                                                        totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                        totalunit = totalunit - ShiftOutMints;
                                                                    }
                                                                    else
                                                                    {
                                                                        totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    totalunit = Math.Round((t3.TotalMinutes), 0);
                                                                }

                                                                var ActualDuration = TimeSpan.FromMinutes(totalunit);

                                                                //wr = Convert.ToString(pauseDuration);

                                                                int hrs = ActualDuration.Hours;
                                                                int mint = ActualDuration.Minutes;
                                                                //
                                                                // totalunit = Math.Round((t3.TotalMinutes), 0);

                                                                //int hrs = t3.Hours;
                                                                //int mint = t3.Minutes;

                                                                wr = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                                                            }

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //strTimeOut = "00:00";
                                                        }


                                                    }
                                                    #endregion

                                                    //==============Timein TimeOut========================
                                                    #region TIMEIN & TIMEOUT

                                                    var INTempAttendance = TempAttendance.Where((TimeIn, index) => index % 2 == 0);
                                                    if (INTempAttendance != null)
                                                    {
                                                        //INTempAttendance = TempAttendance.OrderBy(d => d.PunchedTime).ToList();
                                                        //GET TIMEIN
                                                        strTimeIn = TempAttendance.Where((TimeIn, index) => index % 2 == 0).Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime);
                                                    }

                                                    // //GET TIMEOUT
                                                    var OUTTempAttendance = TempAttendance.Where((TimeOut, index) => index % 2 != 0);
                                                    //.Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime);
                                                    if (OUTTempAttendance != null)
                                                    {
                                                        OUTTempAttendance = OUTTempAttendance.OrderBy(d => d.PunchedTime).ToList();
                                                    }
                                                    foreach (TrnsTempAttendance item in OUTTempAttendance)
                                                    {
                                                        string PunchTime = item.PunchedTime;
                                                        decimal decPunchTime = ConvertTimeToDecimal(PunchTime);

                                                        //if (decPunchTime >= 7.52M && decPunchTime <= 24)
                                                        if (decPunchTime >= 6.52M && decPunchTime <= 24)
                                                        {
                                                            //decPunchTime = decPunchTime + 24;
                                                            strTimeOut = PunchTime;
                                                        }
                                                    }

                                                    foreach (TrnsTempAttendance item in TempAttendanceNextDay)
                                                    {
                                                        string PunchTime = item.PunchedTime;
                                                        decimal decPunchTime = ConvertTimeToDecimal(PunchTime);

                                                        //if (decPunchTime >= 0 && decPunchTime < 7.52M)
                                                        //6.52 is time 6:32
                                                        if (decPunchTime >= 0 && decPunchTime < 6.52M)
                                                        {
                                                            //decPunchTime = decPunchTime + 24;
                                                            strTimeOut = PunchTime;
                                                        }
                                                    }
                                                    //strWorkHours = CalculateWorkHoursMEPL(strTimeIn, strTimeOut);
                                                    strWorkHours = wr;
                                                    strWorkMints = Convert.ToString(totalunit);

                                                }

                                            }
                                            #endregion

                                            #region InflgOverlap && OutflgOverlap
                                            else if (!InflgOverlap && OutflgOverlap)
                                            {
                                                //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate.Value.Date == x.Date).ToList();
                                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate.Value.Date == x.Date).ToList();
                                                if (TempAttendance != null && TempAttendance.Count > 0)
                                                {
                                                    //strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                                    strTimeIn = TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime);
                                                }
                                                DateTime dtx = x.AddDays(1);
                                                var TempAttendanceOverlap = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                                if (TempAttendanceOverlap != null && TempAttendanceOverlap.Count > 0)
                                                {
                                                    //strTimeOut = Convert.ToString(TempAttendanceOverlap.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendanceOverlap.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                                    strTimeOut = TempAttendance.Where((ct, index) => index % 2 != 0).Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 != 0).Min(y => y.PunchedTime);
                                                }
                                                strWorkHours = CalculateWorkHoursMEPL(strTimeIn, strTimeOut);
                                                //strWorkHours = CalculateOverTimeHoursInandOutTime(strTimeIn, strTimeOut);
                                            }
                                            else if (InflgOverlap && OutflgOverlap)
                                            {
                                                DateTime dtx = x.AddDays(1);
                                                //var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == intEmpID && tr.PunchedDate == dtx).ToList();
                                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                                if (TempAttendance != null && TempAttendance.Count > 0)
                                                {
                                                    //strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                                    //strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                                    strTimeIn = TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 == 0).Min(y => y.PunchedTime);
                                                    strTimeOut = TempAttendance.Where((ct, index) => index % 2 != 0).Min(y => y.PunchedTime) == null ? "" : TempAttendance.Where((ct, index) => index % 2 != 0).Min(y => y.PunchedTime);
                                                    strWorkHours = CalculateWorkHoursMEPL(strTimeIn, strTimeOut);
                                                }
                                            }
                                            #endregion
                                            //Weekend Calulation
                                            #region Weekend Calulation
                                            if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                            {
                                                strDesc = "Weekend";
                                                LeaveCount = 0.0M;
                                            }
                                            #endregion
                                            //Public Holiday Calculation 
                                            #region PublicHoliday
                                            if (!string.IsNullOrEmpty(EmpCalenderID))
                                            {
                                                SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                                string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + x + "' AND EndDate >= '" + x + "'";
                                                oRecSet.DoQuery(SQLHolidays);
                                                if (oRecSet.RecordCount > 0)
                                                {
                                                    IsHoliday = true;
                                                    strDesc = oRecSet.Fields.Item(1).Value;
                                                }
                                                if (IsHoliday)
                                                {
                                                    shiftTimeIn = "00:00";
                                                    shiftTimeOut = "00:00";
                                                    shiftHours = "00:00";
                                                    LeaveCount = 0.0M;
                                                }
                                            }
                                            #endregion
                                            //Calculate LateIn Minutes
                                            #region Calculate LateIn Mintutes
                                            if (!string.IsNullOrEmpty(strTimeIn))
                                            {
                                                if (dayofWeeks == "Friday")
                                                {

                                                }
                                                strLateInMinutes = CalculateLateInMinutes(shiftTimeIn, strTimeIn);
                                                //Buffer Period  Included Here
                                                //var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                                //if (AttendanceRule != null)
                                                //{
                                                //    string BufferInTime = AttendanceRule.GpAfterStartTime;
                                                //    if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                                //    {
                                                //        if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                //        {
                                                //            strLateInMinutes = "00:00";
                                                //        }
                                                //    }
                                                //}
                                            }
                                            #endregion
                                            //Calculate Earlyout Minutes
                                            #region Calculate Earltout Minutes
                                            if (!string.IsNullOrEmpty(strTimeOut))
                                            {
                                                decimal decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                                decimal decTimeIn = 0.0M;
                                                if (strTimeIn != null)
                                                {
                                                    decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                                }
                                                if (decTimeIn > decTimeOut && OutflgOverlap == false)
                                                {
                                                    //Do Nothing
                                                    strEarlyOutMinutes = "00:00";
                                                }
                                                else
                                                {
                                                    strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, strTimeOut);
                                                    var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                                    if (AttendanceRule != null)
                                                    {
                                                        string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                        if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                        {
                                                            if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                            {
                                                                strEarlyOutMinutes = "00:00";
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                            // Status is not in Use in Current Version
                                            if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                            {
                                                strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                            }
                                            //Calculate Leaves in diffrent Scenerio                                            
                                            #region Calculate Leaves
                                            if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                                            {
                                                string TempLeaveHours = "";
                                                LeaveCount = 0.0M;


                                                var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == intEmpID).FirstOrDefault();
                                                string Leaves = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";


                                                string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";

                                                if (Data != null)
                                                {
                                                    if (employeetype.ToLower().StartsWith("man"))
                                                    {
                                                        decimal LeavesAvailable = 0;
                                                        decimal chkLeavesEntitled = 0;
                                                        decimal chkLeavesCarryForward = 0;
                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == Data.LeaveType
                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == Data.LeaveType
                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                        LeavesAvailable = chkLeavesEntitled + chkLeavesCarryForward;


                                                        decimal LeavesUsed = 0;
                                                        LeavesUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == Data.LeaveType
                                                                      select a.TotalCount).Sum() ?? 0M;




                                                        if ((LeavesAvailable - (LeavesUsed)) >= 1)
                                                        {
                                                            strLeaveHours = shiftHours;
                                                            WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;
                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);

                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);

                                                            if (TempLeaveCount > 1)
                                                            {
                                                                LeaveCount = 1;
                                                            }
                                                            else
                                                            {
                                                                LeaveCount = TempLeaveCount;
                                                            }
                                                            //
                                                            //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            //intLeaveType = leaveType;
                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType).FirstOrDefault().Description;
                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType).FirstOrDefault().Code;
                                                            intLeaveType = Convert.ToInt32(Data.LeaveType);
                                                            isNewLeave = true;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strLeaveHours = shiftHours;

                                                        //LeaveCount = 1.0M;
                                                        //  
                                                        WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                        decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);

                                                        if (TempLeaveCount > 1)
                                                        {
                                                            LeaveCount = 1;
                                                        }
                                                        else
                                                        {
                                                            LeaveCount = TempLeaveCount;
                                                        }
                                                        //
                                                        strLeaveType = Data.LeaveDescription;
                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                        intLeaveType = Data.LeaveType.Value;
                                                        isNewLeave = true;
                                                    }
                                                }
                                                else
                                                {
                                                    TempLeaveHours = shiftHours;
                                                    LeaveCount = 0.0M;
                                                    //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                                    string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";
                                                    System.Data.DataTable dt = ds.getDataTable(SQL);
                                                    if (dt != null && dt.Rows.Count > 0)
                                                    {
                                                        int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                        string LeaveValue = Convert.ToString(dt.Rows[0]["Code"]);
                                                        bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);

                                                        if (Deduction == true && leaveType > 0)
                                                        {
                                                            if (employeetype.ToLower().StartsWith("con"))
                                                            {
                                                                leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                                if (leaveType > 0)
                                                                {
                                                                    strLeaveHours = shiftHours;

                                                                    //LeaveCount = 1.0M;
                                                                    //  
                                                                    WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                    decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                    if (TempLeaveCount > 1)
                                                                    {
                                                                        LeaveCount = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        LeaveCount = TempLeaveCount;
                                                                    }
                                                                    //
                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                    intLeaveType = leaveType;
                                                                    isNewLeave = true;
                                                                }
                                                            }
                                                            else if (employeetype.ToLower().StartsWith("man"))
                                                            {
                                                                //Rule one
                                                                int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                                decimal LeaveEntitled = 0;
                                                                decimal chkLeavesEntitled = 0;
                                                                decimal chkLeavesCarryForward = 0;
                                                                chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                              where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                              select a.LeavesEntitled).FirstOrDefault();

                                                                chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                                  select a.LeavesCarryForward).FirstOrDefault();
                                                                LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;
                                                                decimal LeaveUsed = 0;

                                                                LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                             where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                             select a.TotalCount).Sum() ?? 0M;
                                                                //chkLeaveAvail = chkLeaveAvail != null ? chkLeaveAvail : 0

                                                                var EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                                                                decimal RTBalanceR1 = EmployeeRTValue.DR1 != null ? EmployeeRTValue.DR1 : 0;



                                                                if ((LeaveEntitled - (LeaveUsed + RTBalanceR1)) >= 1)
                                                                {
                                                                    leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                                    if (leaveType > 0)
                                                                    {
                                                                        strLeaveHours = shiftHours;

                                                                        WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                        decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        if (TempLeaveCount > 1)
                                                                        {
                                                                            LeaveCount = 1;
                                                                        }
                                                                        else
                                                                        {
                                                                            LeaveCount = TempLeaveCount;
                                                                        }
                                                                        //
                                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                        intLeaveType = leaveType;
                                                                        isNewLeave = true;
                                                                        EmployeeRTValue.DR1 += LeaveCount;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Rule TWO
                                                                    int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                                    LeaveEntitled = 0;
                                                                    chkLeavesEntitled = 0;
                                                                    chkLeavesCarryForward = 0;

                                                                    chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                  select a.LeavesEntitled).FirstOrDefault();

                                                                    chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                      select a.LeavesCarryForward).FirstOrDefault();
                                                                    LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;


                                                                    LeaveUsed = 0;
                                                                    LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                 where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                 select a.TotalCount).Sum() ?? 0M;
                                                                    decimal RTBalanceR2 = EmployeeRTValue.DR2 != null ? EmployeeRTValue.DR2 : 0;

                                                                    if ((LeaveEntitled - (LeaveUsed + RTBalanceR2)) >= 1)
                                                                    {
                                                                        leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                                        if (leaveType > 0)
                                                                        {
                                                                            strLeaveHours = shiftHours;

                                                                            //LeaveCount = 1.0M;
                                                                            //  
                                                                            WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);

                                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                            if (TempLeaveCount > 1)
                                                                            {
                                                                                LeaveCount = 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                LeaveCount = TempLeaveCount;
                                                                            }
                                                                            //
                                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                            intLeaveType = leaveType;
                                                                            isNewLeave = true;
                                                                            EmployeeRTValue.DR2 += LeaveCount;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //RULE TREE
                                                                        int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                                        LeaveEntitled = 0;
                                                                        chkLeavesEntitled = 0;
                                                                        chkLeavesCarryForward = 0;

                                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                                        LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                        LeaveUsed = 0;
                                                                        LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                     where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                     select a.TotalCount).Sum() ?? 0M;
                                                                        if (LeaveEntitled > LeaveUsed)
                                                                        {
                                                                            leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                            if (leaveType > 0)
                                                                            {
                                                                                strLeaveHours = shiftHours;

                                                                                //LeaveCount = 1.0M;
                                                                                //  
                                                                                WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                if (TempLeaveCount > 1)
                                                                                {
                                                                                    LeaveCount = 1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    LeaveCount = TempLeaveCount;
                                                                                }
                                                                                //
                                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                intLeaveType = leaveType;
                                                                                isNewLeave = true;


                                                                            }

                                                                        }
                                                                    }


                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                                        return;
                                                    }
                                                }
                                            }
                                            #endregion
                                            //Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                            #region Calculate LeaveHours Working Hours Differ From Shift Hours
                                            if (!string.IsNullOrEmpty(strWorkHours))
                                            {
                                                string TempLeaveHours = "";
                                                LeaveCount = 0.0M;
                                                //
                                                if (strStatus == " LateIn")
                                                #region LateIN
                                                {
                                                    //string TempshiftHours = "08:00";
                                                    TimeSpan TimeOutH = TimeCalculate(shiftTimeOut);
                                                    TimeSpan ActualTimeOut = TimeCalculate(strTimeOut);
                                                    TimeSpan ActualWH = TimeCalculate(strWorkHours);

                                                    double TimeOutMints = Math.Round((TimeOutH.TotalMinutes), 0);
                                                    double ActualTimeOutMints = Math.Round((ActualTimeOut.TotalMinutes), 0);
                                                    double ActualWHrs = Math.Round((ActualWH.TotalMinutes), 0);

                                                    if (ActualTimeOutMints >= TimeOutMints)
                                                    {
                                                        //string tempStrWorkHours = "";
                                                        double totalminutes = (ActualWH - (ActualTimeOut - TimeOutH)).TotalMinutes;

                                                        // double totalminutes = (ActualTimeOut - TimeOutH).TotalMinutes;

                                                        var pauseDuration = TimeSpan.FromMinutes(totalminutes);

                                                        wr = Convert.ToString(pauseDuration);
                                                        int hours = pauseDuration.Hours;
                                                        int Mints = pauseDuration.Minutes;

                                                        wr = string.Format("{0:00}", hours) + ':' + string.Format("{0:00}", Mints);
                                                        //strWorkHours = wr;

                                                        TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);

                                                        strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, strWorkHours);
                                                        strWorkMints = Convert.ToString(totalminutes);
                                                    }
                                                    else
                                                    {
                                                        TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                                        strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, strWorkHours);
                                                    }

                                                    //

                                                    if (TempLeaveHours == "00:00")
                                                    {
                                                        TempLeaveHours = "";
                                                    }
                                                    if (strOverTimeHours == "00:00")
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                    if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                    {
                                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                                        string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";

                                                        System.Data.DataTable dt = ds.getDataTable(SQL);

                                                        string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";


                                                        if (dt != null && dt.Rows.Count > 0)
                                                        {

                                                            int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                            bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);

                                                            if (Deduction == true && leaveType > 0)
                                                            {
                                                                if (employeetype.ToLower().StartsWith("con"))
                                                                {
                                                                    leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                                    if (leaveType > 0)
                                                                    {
                                                                        //
                                                                        //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                        strLeaveHours = TempLeaveHours;
                                                                        //  
                                                                        // WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);                                                                        
                                                                        TimeSpan ShiftH = TimeCalculate(strLeaveHours);

                                                                        //string PunchTime = item.PunchedTime;
                                                                        decimal decPunchTime = ConvertTimeToDecimal(strLeaveHours);
                                                                        WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                        LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        if (TempLeaveCount > 1)
                                                                        {
                                                                            LeaveCount = 1;
                                                                        }
                                                                        else
                                                                        {
                                                                            LeaveCount = TempLeaveCount;
                                                                        }
                                                                        //
                                                                        //
                                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                        isNewLeave = true;
                                                                    }
                                                                }
                                                                else if (employeetype.ToLower().StartsWith("man"))
                                                                {
                                                                    //Rule one
                                                                    int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                                    decimal LeaveEntitled = 0;
                                                                    decimal chkLeavesEntitled = 0;
                                                                    decimal chkLeavesCarryForward = 0;
                                                                    chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                                  select a.LeavesEntitled).FirstOrDefault();

                                                                    chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                                      select a.LeavesCarryForward).FirstOrDefault();
                                                                    LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                    decimal LeaveUsed = 0;
                                                                    LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                 where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                 select a.TotalCount).Sum() ?? 0M;
                                                                    var EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                                                                    decimal RTBalanceR1 = EmployeeRTValue.DR1 != null ? EmployeeRTValue.DR1 : 0;

                                                                    if ((LeaveEntitled - (LeaveUsed + RTBalanceR1)) >= 1)
                                                                    {
                                                                        leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                                        if (leaveType > 0)
                                                                        {
                                                                            //
                                                                            //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                            strLeaveHours = TempLeaveHours;
                                                                            //  
                                                                            WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                            decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                            if (TempLeaveCount > 1)
                                                                            {
                                                                                LeaveCount = 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                LeaveCount = TempLeaveCount;
                                                                            }
                                                                            //
                                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                            isNewLeave = true;
                                                                            EmployeeRTValue.DR1 += LeaveCount;
                                                                        }


                                                                    }
                                                                    else
                                                                    {
                                                                        //Rule TWO
                                                                        int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                                        LeaveEntitled = 0;
                                                                        chkLeavesEntitled = 0;
                                                                        chkLeavesCarryForward = 0;
                                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                                        LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;
                                                                        LeaveUsed = 0;
                                                                        LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                     where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                     select a.TotalCount).Sum() ?? 0M;
                                                                        EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                                                                        decimal RTBalanceR2 = EmployeeRTValue.DR2 != null ? EmployeeRTValue.DR2 : 0;

                                                                        if ((LeaveEntitled - (LeaveUsed + RTBalanceR2)) >= 1)
                                                                        {

                                                                            leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                                            if (leaveType > 0)
                                                                            {
                                                                                //
                                                                                //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                                strLeaveHours = TempLeaveHours;
                                                                                //  
                                                                                WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                                decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                if (TempLeaveCount > 1)
                                                                                {
                                                                                    LeaveCount = 1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    LeaveCount = TempLeaveCount;
                                                                                }
                                                                                //
                                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                isNewLeave = true;
                                                                                EmployeeRTValue.DR2 += LeaveCount;
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            //RULE TREE
                                                                            int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                                            LeaveEntitled = 0;
                                                                            chkLeavesEntitled = 0;
                                                                            chkLeavesCarryForward = 0;
                                                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                          select a.LeavesEntitled).FirstOrDefault();

                                                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                              where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                                                            LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                            LeaveUsed = 0;
                                                                            LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                         where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                         select a.TotalCount).Sum() ?? 0M;
                                                                            if (LeaveEntitled > LeaveUsed)
                                                                            {
                                                                                leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                                if (leaveType > 0)
                                                                                {
                                                                                    //
                                                                                    //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                                    strLeaveHours = TempLeaveHours;
                                                                                    //  
                                                                                    WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                                    decimal TempLeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                    if (TempLeaveCount > 1)
                                                                                    {
                                                                                        LeaveCount = 1;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        LeaveCount = TempLeaveCount;
                                                                                    }
                                                                                    //
                                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                    isNewLeave = true;
                                                                                }


                                                                            }
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion
                                                else
                                                #region Not LateIN
                                                {
                                                    TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                                    strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, strWorkHours);
                                                    if (TempLeaveHours == "00:00")
                                                    {
                                                        TempLeaveHours = "";
                                                    }
                                                    if (strOverTimeHours == "00:00")
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                    if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                    {
                                                        //string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                                        string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules ";

                                                        System.Data.DataTable dt = ds.getDataTable(SQL);

                                                        string employeetype = oEmployee.MstPosition.Name != null ? oEmployee.MstPosition.Name : "nahe mila";


                                                        if (dt != null && dt.Rows.Count > 0)
                                                        {

                                                            int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                            bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);

                                                            if (Deduction == true && leaveType > 0)
                                                            {
                                                                if (employeetype.ToLower().StartsWith("con"))
                                                                {
                                                                    leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);
                                                                    if (leaveType > 0)
                                                                    {
                                                                        //
                                                                        //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                        strLeaveHours = TempLeaveHours;
                                                                        //  
                                                                        WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                        UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                        TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                        totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                        decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                        decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                        LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                        if (LeaveCount > 1)
                                                                        {
                                                                            LeaveCount = 1;
                                                                        }
                                                                        //
                                                                        //
                                                                        strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                        isNewLeave = true;
                                                                    }
                                                                }
                                                                else if (employeetype.ToLower().StartsWith("man"))
                                                                {
                                                                    //Rule one
                                                                    int leavetypeRuleOne = (int)dt.Rows[0]["LeaveType"];

                                                                    decimal LeaveEntitled = 0;
                                                                    decimal chkLeavesEntitled = 0;
                                                                    decimal chkLeavesCarryForward = 0;
                                                                    chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                  where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                                  select a.LeavesEntitled).FirstOrDefault();

                                                                    chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                                      select a.LeavesCarryForward).FirstOrDefault();
                                                                    LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                    decimal LeaveUsed = 0;
                                                                    LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                 where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleOne
                                                                                 select a.TotalCount).Sum() ?? 0M;
                                                                    var EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                                                                    decimal RTBalanceR1 = EmployeeRTValue.DR1 != null ? EmployeeRTValue.DR1 : 0;

                                                                    if ((LeaveEntitled - (LeaveUsed + RTBalanceR1)) >= 1)
                                                                    {
                                                                        leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);

                                                                        if (leaveType > 0)
                                                                        {
                                                                            //
                                                                            //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                            strLeaveHours = TempLeaveHours;
                                                                            //  
                                                                            WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                            UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                            TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                            totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                            decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                            decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                            LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                            if (LeaveCount > 1)
                                                                            {
                                                                                LeaveCount = 1;
                                                                            }
                                                                            //
                                                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                            isNewLeave = true;
                                                                            EmployeeRTValue.DR1 += LeaveCount;
                                                                        }


                                                                    }
                                                                    else
                                                                    {
                                                                        //Rule TWO
                                                                        int leavetypeRuleTwo = (int)dt.Rows[1]["LeaveType"];
                                                                        LeaveEntitled = 0;
                                                                        chkLeavesEntitled = 0;
                                                                        chkLeavesCarryForward = 0;
                                                                        chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                      where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                      select a.LeavesEntitled).FirstOrDefault();

                                                                        chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                                          select a.LeavesCarryForward).FirstOrDefault();
                                                                        LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;
                                                                        LeaveUsed = 0;
                                                                        LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                     where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleTwo
                                                                                     select a.TotalCount).Sum() ?? 0M;
                                                                        EmployeeRTValue = oEmployeeLeaveBalance.Where(a => a.EmpID == oEmployee.EmpID).FirstOrDefault();
                                                                        decimal RTBalanceR2 = EmployeeRTValue.DR2 != null ? EmployeeRTValue.DR2 : 0;

                                                                        if ((LeaveEntitled - (LeaveUsed + RTBalanceR2)) >= 1)
                                                                        {

                                                                            leaveType = Convert.ToInt32(dt.Rows[1]["LeaveType"]);

                                                                            if (leaveType > 0)
                                                                            {
                                                                                //
                                                                                //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                                strLeaveHours = TempLeaveHours;
                                                                                //  
                                                                                WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                                totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                                decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                                decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                                LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                if (LeaveCount > 1)
                                                                                {
                                                                                    LeaveCount = 1;
                                                                                }
                                                                                //
                                                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                isNewLeave = true;
                                                                                EmployeeRTValue.DR2 += LeaveCount;
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            //RULE TREE
                                                                            int leavetypeRuleThree = (int)dt.Rows[2]["LeaveType"];
                                                                            LeaveEntitled = 0;
                                                                            chkLeavesEntitled = 0;
                                                                            chkLeavesCarryForward = 0;
                                                                            chkLeavesEntitled = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                          where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                          select a.LeavesEntitled).FirstOrDefault();

                                                                            chkLeavesCarryForward = (decimal)(from a in dbHrPayroll.MstEmployeeLeaves
                                                                                                              where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                                              select a.LeavesCarryForward).FirstOrDefault();
                                                                            LeaveEntitled = chkLeavesEntitled + chkLeavesCarryForward;

                                                                            LeaveUsed = 0;
                                                                            LeaveUsed = (from a in dbHrPayroll.TrnsLeavesRequest
                                                                                         where a.EmpID == oEmployee.ID && a.LeaveType == leavetypeRuleThree
                                                                                         select a.TotalCount).Sum() ?? 0M;
                                                                            if (LeaveEntitled > LeaveUsed)
                                                                            {
                                                                                leaveType = Convert.ToInt32(dt.Rows[2]["LeaveType"]);

                                                                                if (leaveType > 0)
                                                                                {
                                                                                    //
                                                                                    //LeaveCount = CalculateLeaveCountMEPL(shiftHours, strWorkHours);
                                                                                    strLeaveHours = TempLeaveHours;
                                                                                    //  
                                                                                    WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                    UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                    TimeSpan t1 = TimeCalculate(strLeaveHours);


                                                                                    totalunit = Math.Round((t1.TotalMinutes), 0);
                                                                                    decimal temp1 = Convert.ToDecimal(totalunit) / 60;
                                                                                    decimal tempShiftHours = Convert.ToDecimal(UnitsInDay) / 60;
                                                                                    LeaveCount = Convert.ToDecimal(temp1) / Convert.ToDecimal(tempShiftHours);
                                                                                    if (LeaveCount > 1)
                                                                                    {
                                                                                        LeaveCount = 1;
                                                                                    }
                                                                                    //
                                                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                    isNewLeave = true;
                                                                                }
                                                                                //strLeaveHours = TempLeaveHours;
                                                                                //WorkHourPayroll = Convert.ToInt32(oEmployee.CfgPayrollDefination.WorkHours);
                                                                                //UnitsInDay = (WorkHourPayroll * 60) / UnitValue;

                                                                                ////TimeSpan t1 = TimeCalculate(strLeaveHours);
                                                                                ////TimeSpan t2 = TimeCalculate("00:00");

                                                                                ////t3 = t3 + t1.Add(t2);

                                                                                //totalunit = Math.Round((t3.TotalMinutes), 0);

                                                                                //LeaveCount = Convert.ToDecimal(totalunit) / Convert.ToDecimal(WorkHourPayroll);

                                                                            }
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion

                                            }
                                            #endregion
                                            //Calculate OverTime Here                                  
                                            #region Calculate OverTime
                                            if (!string.IsNullOrEmpty(strWorkHours))
                                            {
                                                string strInOverTime = "00:00";
                                                string strOutOverTime = "00:00";

                                                TimeSpan OverTimeH = TimeCalculate("00:00");
                                                double OTMints = 0;


                                                Boolean flgPayroll = false;
                                                flgPayroll = Convert.ToBoolean(oEmployee.CfgPayrollDefination.FlgOT);
                                                if (!flgPayroll)
                                                {
                                                    isOverTimeApplicable = AttendanceRegister.MstShifts.OverTime == null ? false : AttendanceRegister.MstShifts.OverTime.Value;
                                                    if (!isOverTimeApplicable)
                                                    {
                                                        strOverTimeHours = "";
                                                        strOverTimeType = "";
                                                    }
                                                    else
                                                    {
                                                        bool flgOTApplicable = AttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : AttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                        bool flgOtonWorkedHours = AttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : AttendanceRegister.MstShifts.FlgOTWrkHrs.Value;

                                                        if (flgOtonWorkedHours)
                                                        {
                                                            if (flgOTApplicable)
                                                            {
                                                                strOverTimeHours = CalculateOverTimeHoursMEPL(shiftHours, strWorkHours);
                                                                OverTimeH = TimeCalculate(strOverTimeHours);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                var OTDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OTDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                                //shiftTimeOut
                                                                if (strOverTimeHours == "00:00")
                                                                {
                                                                    strOverTimeHours = "";
                                                                }
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = "";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (flgOTApplicable)
                                                            {
                                                                if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                                {
                                                                    shiftBefferTimeIn = shiftTimeIn;
                                                                }
                                                                if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                                {
                                                                    shiftBufferTimeOut = shiftTimeOut;
                                                                }
                                                                //strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                                                strInOverTime = IFInOvertimeApplicableMEPL(shiftBefferTimeIn, strTimeIn);
                                                                OverTimeH = TimeCalculate(strInOverTime);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                var pauseDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (pauseDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                                if (strInOverTime != "00:00")
                                                                {
                                                                    //CalculateIN Overtime AccordingToShift
                                                                    //strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                                    strInOverTime = CalculateInOvertimeApplicableMEPL(shiftTimeIn, strTimeIn);
                                                                    //OT Units
                                                                    OverTimeH = TimeCalculate(strInOverTime);
                                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                    pauseDuration = TimeSpan.FromMinutes(OTMints);
                                                                    if (pauseDuration == null)
                                                                    {
                                                                        strOTMints = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOTMints = Convert.ToString(OTMints);
                                                                    }

                                                                    //
                                                                }

                                                                strOutOverTime = IFOutOvertimeApplicableMEPL(shiftHours, strWorkHours, OutflgOverlap);

                                                                OverTimeH = TimeCalculate(strOutOverTime);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                var OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }

                                                                if (strOutOverTime != "00:00")
                                                                {
                                                                    strOutOverTime = CalculateOutOvertimeApplicableMEPL(strTimeOut, shiftTimeOut);
                                                                    //OT Units
                                                                    OverTimeH = TimeCalculate(strOutOverTime);
                                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                    OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                    if (OutDuration == null)
                                                                    {
                                                                        strOTMints = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOTMints = Convert.ToString(OTMints);
                                                                    }
                                                                    //
                                                                    //strOutOverTime = CalculateOutOvertimeApplicable(Convert.ToString(totalshifthrs), Convert.ToString(totalWorkhrs));

                                                                }


                                                                strOverTimeHours = CalculateOverTimeHoursInandOutTimeMEPL(strInOverTime, strOutOverTime);

                                                                OverTimeH = TimeCalculate(strOverTimeHours);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }

                                                                if (strOverTimeHours == "00:00")
                                                                {
                                                                    strOverTimeHours = "";
                                                                }
                                                                //OverTime on Weekend
                                                                if (shiftHours == "00:00" && strWorkHours != "0.00")
                                                                {
                                                                    //MEPL
                                                                    TimeSpan OT = TimeCalculate(strWorkHours);
                                                                    TimeSpan t01 = TimeCalculate("00:00");

                                                                    totalOverTime = OT.Add(t01);

                                                                    Totalhrs = (totalOverTime.Hours);
                                                                    TotalMints = (totalOverTime.Minutes);
                                                                    //TotalMints = TotalMints == null ? 1 : TotalMints;
                                                                    //if (TotalMints == 0)
                                                                    //{
                                                                    //    TotalMints = +1;
                                                                    //}
                                                                    //remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                    //remainder = remainder % 2;
                                                                    if (TotalMints == 0)
                                                                    {
                                                                        TotalMints = +1;
                                                                    }
                                                                    if (TotalMints > 30)
                                                                    {
                                                                        remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                    }
                                                                    else
                                                                    {
                                                                        remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                        remainder = remainder % 2;
                                                                    }

                                                                    if (remainder == 1)
                                                                    {
                                                                        remainder = 0;
                                                                        strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);

                                                                        OverTimeH = TimeCalculate(strOverTimeHours);
                                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                        OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                        if (OutDuration == null)
                                                                        {
                                                                            strOTMints = "0";
                                                                        }
                                                                        else
                                                                        {
                                                                            strOTMints = Convert.ToString(OTMints);
                                                                        }
                                                                    }

                                                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                    if (remainder == 0)
                                                                    {
                                                                        remainder = 0;
                                                                        strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                        OverTimeH = TimeCalculate(strOverTimeHours);
                                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                        OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                        if (OutDuration == null)
                                                                        {
                                                                            strOTMints = "0";
                                                                        }
                                                                        else
                                                                        {
                                                                            strOTMints = Convert.ToString(OTMints);
                                                                        }
                                                                    }

                                                                    strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                    OverTimeH = TimeCalculate(strOverTimeHours);
                                                                    OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                    OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                    if (OutDuration == null)
                                                                    {
                                                                        strOTMints = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        strOTMints = Convert.ToString(OTMints);
                                                                    }
                                                                    //END
                                                                    // strOverTimeHours = strWorkHours;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                strOverTimeHours = "";
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                        {
                                                            strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (true)
                                                    {
                                                        if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                        {
                                                            shiftBefferTimeIn = shiftTimeIn;
                                                        }
                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                        {
                                                            shiftBufferTimeOut = shiftTimeOut;
                                                        }

                                                        //===Commit For MEPL OverTine Not aplicable if employee came early===
                                                        //strInOverTime = IFInOvertimeApplicableMEPL(shiftBefferTimeIn, strTimeIn);

                                                        //OverTimeH = TimeCalculate(strInOverTime);
                                                        //OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        //var INDuration = TimeSpan.FromMinutes(OTMints);
                                                        //if (INDuration == null)
                                                        //{
                                                        //    strOTMints = "0";
                                                        //}
                                                        //else
                                                        //{
                                                        //    strOTMints = Convert.ToString(OTMints);
                                                        //}

                                                        if (strInOverTime != "00:00")
                                                        {
                                                            //CalculateIN Overtime AccordingToShift
                                                            //strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                                            strInOverTime = CalculateInOvertimeApplicableMEPL(shiftTimeIn, strTimeIn);
                                                            OverTimeH = TimeCalculate(strInOverTime);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            var INDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (INDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                        }
                                                        //strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                        strOutOverTime = IFOutOvertimeApplicableMEPL(strTimeOut, shiftBufferTimeOut, OutflgOverlap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);

                                                        OverTimeH = TimeCalculate(strOutOverTime);
                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        var OutDuration = TimeSpan.FromMinutes(OTMints);
                                                        if (OutDuration == null)
                                                        {
                                                            strOTMints = "0";
                                                        }
                                                        else
                                                        {
                                                            strOTMints = Convert.ToString(OTMints);
                                                        }
                                                        if (strOutOverTime == "00:00")
                                                        {
                                                            strOutOverTime = "";
                                                        }
                                                        if (strOutOverTime != "00:00")
                                                        {

                                                            //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                            strOutOverTime = CalculateOutOvertimeApplicableMEPL(strTimeOut, shiftTimeOut, OutflgOverlap);
                                                            OverTimeH = TimeCalculate(strOutOverTime);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }

                                                        }
                                                        //strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeMEPL(strInOverTime, strOutOverTime);
                                                        OverTimeH = TimeCalculate(strOverTimeHours);
                                                        OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                        OutDuration = TimeSpan.FromMinutes(OTMints);
                                                        if (OutDuration == null)
                                                        {
                                                            strOTMints = "0";
                                                        }
                                                        else
                                                        {
                                                            strOTMints = Convert.ToString(OTMints);
                                                        }
                                                        if (strOverTimeHours == "00:00")
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                        //OverTime on Weekend
                                                        if (shiftHours == "00:00" && strWorkHours != "0.00")
                                                        {
                                                            //MEPL
                                                            TimeSpan OT = TimeCalculate(strWorkHours);
                                                            TimeSpan t01 = TimeCalculate("00:00");

                                                            totalOverTime = OT.Add(t01);

                                                            Totalhrs = (totalOverTime.Hours);
                                                            TotalMints = (totalOverTime.Minutes);

                                                            if (TotalMints == 0)
                                                            {
                                                                TotalMints = +1;
                                                            }
                                                            if (TotalMints >= 30)
                                                            {
                                                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                                            }
                                                            else
                                                            {
                                                                remainder = OTunit % Convert.ToInt32(TotalMints);
                                                                remainder = remainder % 2;
                                                            }

                                                            if (remainder == 1)
                                                            {
                                                                remainder = 0;
                                                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                OverTimeH = TimeCalculate(strOverTimeHours);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                            }

                                                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                            if (remainder == 0)
                                                            {
                                                                remainder = 0;
                                                                strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                                OverTimeH = TimeCalculate(strOverTimeHours);
                                                                OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                                OutDuration = TimeSpan.FromMinutes(OTMints);
                                                                if (OutDuration == null)
                                                                {
                                                                    strOTMints = "0";
                                                                }
                                                                else
                                                                {
                                                                    strOTMints = Convert.ToString(OTMints);
                                                                }
                                                            }

                                                            strOverTimeHours = string.Format("{0:00}", Totalhrs) + ':' + string.Format("{0:00}", remainder);
                                                            OverTimeH = TimeCalculate(strOverTimeHours);
                                                            OTMints = Math.Round((OverTimeH.TotalMinutes), 0);
                                                            OutDuration = TimeSpan.FromMinutes(OTMints);
                                                            if (OutDuration == null)
                                                            {
                                                                strOTMints = "0";
                                                            }
                                                            else
                                                            {
                                                                strOTMints = Convert.ToString(OTMints);
                                                            }
                                                            //END
                                                            //strOverTimeHours = strWorkHours;
                                                        }
                                                        if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                        {
                                                            //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                            strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oEmployee.CfgPayrollDefination.OTValue.Value).FirstOrDefault().Code;
                                                        }
                                                    }
                                                }


                                            }

                                            #endregion

                                            #region Status is not in Use in Current Version

                                            //string ActualWorkingmints = (grdAttendance.Columns.Item("Wmin").Cells.Item(dt.Row).Specific as SAPbouiCOM.EditText).Value;

                                            dtAttendance.Rows.Add(1);
                                            dtAttendance.SetValue("Id", RecordCounter, AttendanceRegister.Id);
                                            dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                            dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                            dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                            dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                            dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                            dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                            dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                            dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                            dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                            dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                            dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                            dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                            dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                            if (strWorkHours.StartsWith("-"))
                                            {
                                                strWorkHours = "00:00";
                                            }
                                            dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());

                                            dtAttendance.SetValue("CUnits", RecordCounter, strWorkMints.Trim());
                                            dtAttendance.SetValue("UUnits", RecordCounter, strWorkMints.Trim());
                                            dtAttendance.SetValue("OTUnits", RecordCounter, strOTMints.Trim());

                                            dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                            dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                            dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                            dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.000}", LeaveCount));
                                            dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                                            dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                            dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());

                                            RecordCounter++;
                                        }
                                        #endregion


                                        #endregion
                                    }
                                }

                            }

                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
                CalculatingConsectiveoffDay();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("Form: Frm_AttProcess Function: LoadEmployeeAttendanceRecord Msg: " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                }
                prog = null;

            }
        }

        private void LoadEmployeeAttendanceRecordBikiya()
        {
            SAPbouiCOM.ProgressBar prog = null;
            DateTime StartDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            string strEmpCode, strEmpName, strWorkHours, strDesc, shiftName, shiftTimeIn, shiftTimeOut, shiftBefferTimeIn, shiftBufferTimeOut, DedcutionOnshift = "";
            string shiftHours, strTimeIn, strTimeOut, strOverTimeHours, strOverTimeType, strEarlyOutMinutes, strLeaveHours, strLeaveType, strLeaveTypeCode, strStatus, strDeductionRule;
            string isNewLeave, strLateInMinutes;
            Boolean flgOverTime, flgLeaveIsNew, flgInOverLap, flgOutOverLap, flgProcessed, flgNewImport, flgPosted;
            decimal LeaveCount = 0;
            int RecordCounter = 0, intLeaveType = -1;
            try
            {
                StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                double totalEmps = ((EndDate.Subtract(StartDate)).TotalDays + 1);
                if (totalEmps > 0)
                {
                    int TotalRecord = Convert.ToInt32(totalEmps);
                    prog = oApplication.StatusBar.CreateProgressBar("Importing Employee(s) Attendance Record(s)", TotalRecord, false);
                    prog.Value = 0;
                }
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    System.Windows.Forms.Application.DoEvents();
                    prog.Value += 1;
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (!ifSelected)
                    {
                        continue;
                    }
                    strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    for (DateTime x = StartDate; x <= EndDate; x = x.AddDays(1))
                    {
                        if (oEmp != null)
                        {
                            bool IsHoliday = false;
                            strDesc = string.Empty;
                            strTimeIn = string.Empty;
                            strTimeOut = string.Empty;
                            strWorkHours = string.Empty;
                            shiftTimeIn = string.Empty;
                            shiftTimeOut = string.Empty;
                            shiftHours = string.Empty;
                            shiftBefferTimeIn = string.Empty;
                            shiftBufferTimeOut = string.Empty;
                            strOverTimeHours = string.Empty;
                            strLateInMinutes = string.Empty;
                            strEarlyOutMinutes = string.Empty;
                            strStatus = string.Empty;
                            strLeaveHours = string.Empty;
                            strLeaveType = string.Empty;
                            strOverTimeType = string.Empty;
                            strLeaveTypeCode = string.Empty;
                            strDeductionRule = string.Empty;
                            flgLeaveIsNew = false;
                            flgOverTime = false;
                            flgInOverLap = false;
                            flgOutOverLap = false;
                            flgProcessed = false;
                            intLeaveType = -1;
                            LeaveCount = 0;
                            strDesc = "";

                            string EmpCalenderID = oEmp.EmpCalender;

                            flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                            where a.Date == x && a.EmpID == oEmp.ID
                                            select a.Processed).FirstOrDefault() ?? false;
                            flgNewImport = (from a in dbHrPayroll.TrnsTempAttendance
                                            where a.PunchedDate == x && a.EmpID == oEmp.EmpID
                                            select a.FlgProcessed).FirstOrDefault() ?? false;
                            flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                         where a.Date == x && a.EmpID == oEmp.ID
                                         select a.FlgPosted).FirstOrDefault() ?? false;
                            if (flgPosted) continue;
                            string dayofWeeks = Convert.ToString(x.DayOfWeek);
                            //if ((!flgNewImport && !flgProcessed) || (!flgNewImport && flgProcessed))
                            if ((!flgNewImport))
                            {
                                #region Read from temp attendance
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();
                                if (oAttendanceRegister != null)
                                {

                                    #region Get data from temp attendance
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegister.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                        DedcutionOnshift = ShiftDetail.MstShifts.DeductionRuleID != null ? Convert.ToString(ShiftDetail.MstShifts.DeductionRuleID) : "";
                                    }
                                    //Get Temp Attendance data base on shift config.
                                    if (!flgInOverLap && !flgOutOverLap)
                                    {
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        if (oTempAtt.Count > 0)
                                        {
                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                        }
                                    }
                                    else if (!flgInOverLap && flgOutOverLap)
                                    {
                                        DateTime nextDay = x.AddDays(1);
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        var oTempAttNext = (from a in dbHrPayroll.TrnsTempAttendance
                                                            where a.EmpID == oEmp.EmpID && a.PunchedDate == nextDay
                                                            select a).ToList();
                                        //if (oTempAtt.Count > 0 )
                                        //{
                                        //    strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                        //}
                                        //if (oTempAttNext.Count > 0)
                                        //{
                                        //    strTimeOut = Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                        //}
                                        if (oTempAtt.Count > 0)
                                        {
                                            string strPreviousTimeOut = "";
                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                            strPreviousTimeOut = Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                            //if (!string.IsNullOrEmpty(strPreviousTimeOut)
                                            //    && !string.IsNullOrEmpty(strTimeIn)
                                            //    && (CalculateStringTime(strTimeIn) > CalculateStringTime(strTimeOut)))
                                            //{
                                            //    decimal decTempTimeIn = CalculateStringTime(strTimeIn);
                                            //    decimal decTempPreviosTimeOut = CalculateStringTime(strPreviousTimeOut);
                                            //    decimal decTempTimeOut = CalculateStringTime(strTimeOut);
                                            //    if (decTempTimeIn < decTempPreviosTimeOut)
                                            //    {
                                            //        strTimeOut = strPreviousTimeOut;
                                            //    }
                                            //}
                                            //else if ((CalculateStringTime(strTimeIn) < CalculateStringTime(strTimeOut)))
                                            //{
                                            //}

                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                            {
                                                decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                if (TempTimeIn < TempPreTimeOut)
                                                {
                                                    strTimeOut = strPreviousTimeOut;
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                            {
                                                decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                if (TempTimeIn < TempPreTimeOut)
                                                {
                                                    strTimeOut = "";
                                                }
                                            }
                                        }
                                    }
                                    else if (flgInOverLap && !flgOutOverLap)
                                    {
                                        DateTime previosDay = x.AddDays(-1);
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        var oTempAttPrevios = (from a in dbHrPayroll.TrnsTempAttendance
                                                               where a.EmpID == oEmp.EmpID && a.PunchedDate == previosDay
                                                               select a).ToList();
                                        if (oTempAtt.Count > 0 && oTempAttPrevios.Count > 0)
                                        {
                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAttPrevios.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttPrevios.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                    {
                                        strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut);
                                    }

                                    #endregion
                                    //Weekend Calulation
                                    #region Weekend Calulation
                                    if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                    {
                                        strDesc = "Weekend";
                                        LeaveCount = 0.0M;
                                    }
                                    #endregion
                                    //Public Holiday Calculation   
                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        //string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + x + "' AND EndDate >= '" + x + "'";
                                        string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + EmpCalenderID + "' AND \"StrDate\" <= '" + x.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + x.ToString("yyyyMMdd") + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            strDesc = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion
                                    //Calculate LateIn Minutes
                                    #region Calculate LateIn Minutes
                                    if (!string.IsNullOrEmpty(strTimeIn))
                                    {
                                        strLateInMinutes = CalculateLateInMinutes(shiftTimeIn, strTimeIn);
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            #region Deduction Rules Applies Employee And Company Wise
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                if (string.IsNullOrEmpty(DedcutionOnshift))
                                                {
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }
                                            }

                                            #endregion

                                            #region Old Dedcution Rule Company Wise Commit
                                            ////string SQL = @"Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType 
                                            ////From " + Program.objHrmsUI.HRMSDbName + @".dbo.MstDeductionRules 
                                            ////Where RangeFrom <= '" + strLateInMinutes + "' and RangeTo >= '" + strLateInMinutes + "'";
                                            ////DataTable dt = ds.getDataTable(SQL);
                                            ////if (dt != null && dt.Rows.Count > 0)
                                            ////{
                                            ////  int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            ////  bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                            ////  strDeductionRule = Convert.ToString(dt.Rows[0]["Code"]);
                                            ////}
                                            #endregion
                                        }
                                        //Buffer Period  Included Here
                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            string BufferInTime = AttendanceRule.GpAfterStartTime;
                                            if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        strLateInMinutes = "00:00";
                                    }
                                    #endregion
                                    //Calculate Earlyout Minutes
                                    #region Calculate Earlyout Minutes
                                    if (!string.IsNullOrEmpty(strTimeOut))
                                    {
                                        decimal decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                        decimal decTimeIn = 0.0M;
                                        if (strTimeIn != null)
                                        {
                                            decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        }
                                        if (decTimeIn > decTimeOut && flgOutOverLap == true)
                                        {
                                            //Do Nothing
                                            strEarlyOutMinutes = "00:00";
                                        }
                                        else
                                        {
                                            strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, strTimeOut);
                                            if (!string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                #region Deduction Rules Applies Employee And Company Wise
                                                var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strEarlyOutMinutes, shiftName).FirstOrDefault();
                                                if (GetDeductionRules != null)
                                                {
                                                    string DeductionType = GetDeductionRules.DeductionRuleType;

                                                    string ShiftCode = GetDeductionRules.ShiftCode;
                                                    int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                                    int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                    bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                    if (string.IsNullOrEmpty(DedcutionOnshift))
                                                    {
                                                        strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                    }
                                                }

                                                //    decimal decLeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);
                                                //    if (decLeaveCount > 0)
                                                //    {
                                                //        TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                                //        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                //        {
                                                //            var GetLeaveType = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();
                                                //            if (GetLeaveType != null)
                                                //            {
                                                //                strLeaveHours = TempLeaveHours;
                                                //                if (DeductionType == "Employee")
                                                //                {
                                                //                    LeaveCount = decLeaveCount;
                                                //                }
                                                //                else
                                                //                {
                                                //                    LeaveCount = Convert.ToDecimal(GetDeductionRules.LeaveCount);
                                                //                }
                                                //                strLeaveType = GetLeaveType.Description;
                                                //                strLeaveTypeCode = Convert.ToString(GetLeaveType.Code);
                                                //                //dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                //                intLeaveType = GetLeaveType.ID;//Data.LeaveType.Value;
                                                //                flgLeaveIsNew = true;
                                                //                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                //            }
                                                //        }
                                                //    }
                                                //}
                                                //else
                                                //{
                                                //    oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                //    return;
                                                //}
                                                #endregion
                                                #region Old Dedcution Rule Company Wise Commit
                                                //string SQL = @"Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType 
                                                //From " + Program.objHrmsUI.HRMSDbName + @".dbo.MstDeductionRules 
                                                //Where RangeFrom <= '" + strEarlyOutMinutes + "' and RangeTo >= '" + strEarlyOutMinutes + "'";
                                                //DataTable dt = ds.getDataTable(SQL);
                                                //if (dt != null && dt.Rows.Count > 0)
                                                //{
                                                //  int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                                //  bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                                //  strDeductionRule = Convert.ToString(dt.Rows[0]["Code"]);
                                                //}
                                                #endregion
                                            }
                                            var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                            if (AttendanceRule != null)
                                            {
                                                string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        strEarlyOutMinutes = "00:00";
                                    }
                                    #endregion
                                    // Status is not in Use in Current Version
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }
                                    //Calculate Leaves in diffrent Scenerio
                                    #region Calculate Leaves in diffrent Scenerio
                                    //Full Day leave no timein and timeout
                                    if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                                    {
                                        string TempLeaveHours = "";
                                        LeaveCount = 0.0M;
                                        var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.DocAprStatus == "LV0006" && pd.EmpID == oEmp.ID).FirstOrDefault();
                                        if (Data != null && Data.UnitsID.ToUpper() == "DAY")
                                        {
                                            strLeaveHours = shiftHours;
                                            LeaveCount = 1.0M;
                                            strLeaveType = Data.LeaveDescription;
                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                            intLeaveType = Data.LeaveType.Value;
                                            flgLeaveIsNew = false;
                                            strDeductionRule = "";
                                        }
                                        else if (Data != null && Data.UnitsID.ToUpper() == "HALFDAY")
                                        {
                                            TempLeaveHours = CalculateHalfShiftHours(shiftHours);
                                            #region Deduction Rules Applies Employee And Company Wise
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                                if (leaveType > 0)
                                                {
                                                    intLeaveType = leaveType;
                                                    strLeaveHours = TempLeaveHours;
                                                    LeaveCount = 0.5M;
                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    flgLeaveIsNew = true;
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }
                                            }
                                            else
                                            {
                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                return;
                                            }
                                            #endregion
                                            #region Old Dedcution Rule Company Wise Commit
                                            //                                            string SQL = @"Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType 
                                            //                                                           From " + Program.objHrmsUI.HRMSDbName + @".dbo.MstDeductionRules 
                                            //                                                           Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            //                                            DataTable dt = ds.getDataTable(SQL);
                                            //                                            if (dt != null && dt.Rows.Count > 0)
                                            //                                            {
                                            //                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            //                                                if (leaveType > 0)
                                            //                                                {
                                            //                                                    intLeaveType = leaveType;
                                            //                                                    strLeaveHours = TempLeaveHours;
                                            //                                                    LeaveCount = 0.5M;
                                            //                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                            //                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                            //                                                    flgLeaveIsNew = true;
                                            //                                                    strDeductionRule = Convert.ToString(dt.Rows[0]["Code"]);
                                            //                                                }
                                            //                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            TempLeaveHours = shiftHours;
                                            LeaveCount = 0.0M;
                                            #region Deduction Rules Applies Employee And Company Wise
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);

                                                if (leaveType > 0)
                                                {
                                                    intLeaveType = leaveType;
                                                    strLeaveHours = TempLeaveHours;
                                                    LeaveCount = 1M;
                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    flgLeaveIsNew = true;
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }

                                            }
                                            else
                                            {
                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                return;
                                            }
                                            #endregion
                                            #region Old Dedcution Rule Company Wise Commit
                                            //                                            string SQL = @"Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType 
                                            //                                                           From " + Program.objHrmsUI.HRMSDbName + @".dbo.MstDeductionRules 
                                            //                                                           Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            //                                            DataTable dt = ds.getDataTable(SQL);
                                            //                                            if (dt != null && dt.Rows.Count > 0)
                                            //                                            {
                                            //                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            //                                                if (leaveType > 0)
                                            //                                                {
                                            //                                                    intLeaveType = leaveType;
                                            //                                                    strLeaveHours = TempLeaveHours;
                                            //                                                    LeaveCount = 1M;
                                            //                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                            //                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                            //                                                    flgLeaveIsNew = true;
                                            //                                                    strDeductionRule = Convert.ToString(dt.Rows[0]["Code"]);
                                            //                                                }
                                            //                                            }
                                            //                                            else
                                            //                                            {
                                            //                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                            //                                                return;
                                            //                                            }
                                            #endregion
                                        }
                                    }
                                    string strTempWorkHours = "";
                                    //If Time In/Out missing use the following scenario.
                                    #region If Time In/Out missing use the following scenario.
                                    if (((!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)) || (string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))) && Convert.ToBoolean(Program.systemInfo.FlgAbsent))
                                    {
                                        var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                        if (oAttRule != null)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                            if (oLeaveMaster != null)
                                            {
                                                if ((string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)))
                                                {
                                                    strLeaveHours = shiftHours;
                                                    LeaveCount = 1.0M;
                                                    strLeaveType = oLeaveMaster.Description;
                                                    strLeaveTypeCode = oLeaveMaster.Code;
                                                    intLeaveType = oLeaveMaster.ID;
                                                    flgLeaveIsNew = true;
                                                    strDeductionRule = "ME";
                                                }
                                                else if ((!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)))
                                                {
                                                    //strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut);
                                                    strTempWorkHours = CalculateWorkHours(strTimeIn, shiftTimeOut, shiftTimeIn, shiftTimeOut);
                                                    #region Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                                    if (!string.IsNullOrEmpty(strTempWorkHours))
                                                    {
                                                        string TempLeaveHours = "";

                                                        LeaveCount = 0.0M;
                                                        if (string.IsNullOrEmpty(DedcutionOnshift))
                                                        {
                                                            if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                                            {
                                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                                            }

                                                        }
                                                        else
                                                        {
                                                            if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                                            {
                                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                        //if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                                        {
                                                            #region Deduction Rules Applies Employee And Company Wise
                                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                            //strLateInMinutes
                                                            //var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                                            if (GetDeductionRules != null)
                                                            {
                                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);

                                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                                var GetLeaveType = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();

                                                                if (Deduction == true && leaveType > 0)
                                                                {

                                                                    if (DeductionType == "Employee")
                                                                    {
                                                                        decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strTempWorkHours);
                                                                        //LeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);

                                                                        if (decLeaveCount > 0)
                                                                        {
                                                                            #region Leave Deduction
                                                                            if (decLeaveCount > 0.5M)
                                                                            {
                                                                                strLeaveHours = shiftHours;
                                                                                LeaveCount = 0M;
                                                                                //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                strLeaveType = "";
                                                                                //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                strLeaveTypeCode = "";
                                                                                flgLeaveIsNew = false;
                                                                            }
                                                                            else if (decLeaveCount <= 0.5M)
                                                                            {
                                                                                var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == oEmp.ID).FirstOrDefault();
                                                                                if (Data != null && Data.UnitsID == "HalfDay")
                                                                                {
                                                                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                                                    LeaveCount = 0.5M;
                                                                                    strLeaveType = Data.LeaveDescription;
                                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                                                    intLeaveType = Data.LeaveType.Value;
                                                                                    flgLeaveIsNew = true;
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (GetLeaveType != null && decLeaveCount > 0)
                                                                                    {
                                                                                        strLeaveHours = TempLeaveHours;
                                                                                        LeaveCount = decLeaveCount;
                                                                                        strLeaveType = GetLeaveType.Description;
                                                                                        strLeaveTypeCode = GetLeaveType.Code;
                                                                                        flgLeaveIsNew = true;

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        strLeaveHours = "";
                                                                                        LeaveCount = 0M;
                                                                                        strLeaveType = "";
                                                                                        strLeaveTypeCode = "";
                                                                                        flgLeaveIsNew = false;
                                                                                        strDeductionRule = "";
                                                                                    }


                                                                                }
                                                                            }
                                                                            #endregion
                                                                        }
                                                                    }

                                                                }

                                                            }
                                                            else
                                                            {
                                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                                return;
                                                            }

                                                            #endregion


                                                        }
                                                    }
                                                    #endregion
                                                }
                                                else if ((string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut)))
                                                {
                                                    //strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut);
                                                    strTempWorkHours = CalculateWorkHours(shiftTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut);
                                                    //Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                                    #region Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                                    if (!string.IsNullOrEmpty(strTempWorkHours))
                                                    {
                                                        string TempLeaveHours = "";

                                                        LeaveCount = 0.0M;
                                                        if (string.IsNullOrEmpty(DedcutionOnshift))
                                                        {
                                                            if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                                            {
                                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                                            }

                                                        }
                                                        else
                                                        {
                                                            if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                                            {
                                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                                        //if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                                        {
                                                            #region Deduction Rules Applies Employee And Company Wise
                                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                            //strLateInMinutes
                                                            //var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                                            if (GetDeductionRules != null)
                                                            {
                                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);

                                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                                var GetLeaveType = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();

                                                                if (Deduction == true && leaveType > 0)
                                                                {

                                                                    if (DeductionType == "Employee")
                                                                    {
                                                                        decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strTempWorkHours);
                                                                        //LeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);

                                                                        if (decLeaveCount > 0)
                                                                        {
                                                                            #region Leave Deduction
                                                                            if (decLeaveCount > 0.5M)
                                                                            {
                                                                                strLeaveHours = shiftHours;
                                                                                LeaveCount = 0M;
                                                                                //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                                                strLeaveType = "";
                                                                                //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                                                strLeaveTypeCode = "";
                                                                                flgLeaveIsNew = false;
                                                                            }
                                                                            else if (decLeaveCount <= 0.5M)
                                                                            {
                                                                                var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == oEmp.ID).FirstOrDefault();
                                                                                if (Data != null && Data.UnitsID == "HalfDay")
                                                                                {
                                                                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                                                    LeaveCount = 0.5M;
                                                                                    strLeaveType = Data.LeaveDescription;
                                                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                                                    intLeaveType = Data.LeaveType.Value;
                                                                                    flgLeaveIsNew = true;
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (GetLeaveType != null && decLeaveCount > 0)
                                                                                    {
                                                                                        strLeaveHours = TempLeaveHours;
                                                                                        LeaveCount = decLeaveCount;
                                                                                        strLeaveType = GetLeaveType.Description;
                                                                                        strLeaveTypeCode = GetLeaveType.Code;
                                                                                        flgLeaveIsNew = true;

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        strLeaveHours = "";
                                                                                        LeaveCount = 0M;
                                                                                        strLeaveType = "";
                                                                                        strLeaveTypeCode = "";
                                                                                        flgLeaveIsNew = false;
                                                                                        strDeductionRule = "";
                                                                                    }


                                                                                }
                                                                            }
                                                                            #endregion
                                                                        }
                                                                    }

                                                                }

                                                            }
                                                            else
                                                            {
                                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                                return;
                                                            }

                                                            #endregion


                                                        }
                                                    }
                                                    #endregion
                                                }
                                            }

                                        }
                                    }
                                    #endregion
                                    //Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                    #region Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                                    if (!string.IsNullOrEmpty(strWorkHours))
                                    {
                                        string TempLeaveHours = "";

                                        LeaveCount = 0.0M;
                                        #region LateIn earlyOut Check
                                        if (string.IsNullOrEmpty(DedcutionOnshift))
                                        {
                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                            {
                                                if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                                {
                                                    //strTempWorkHours = CalculateWorkHours(strTimeIn, shiftTimeOut, shiftTimeIn, shiftTimeOut);
                                                    TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (strStatus.Trim() != "LateIn" && strStatus.Trim() != "Early Out" && strStatus.Trim() != "LateIn Early Out")
                                            {
                                                // decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strWorkHours);
                                                //strTempWorkHours = CalculateWorkHours(strTimeIn, shiftTimeOut, shiftTimeIn, shiftTimeOut);
                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                            }
                                            else if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "LateIn Early Out")
                                            {
                                                strTempWorkHours = CalculateWorkHours(strTimeIn, shiftTimeOut, shiftTimeIn, shiftTimeOut);
                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                            }
                                            else if (strStatus.Trim() == "Early Out")
                                            {
                                                strTempWorkHours = CalculateWorkHours(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut);
                                                TempLeaveHours = CalculateLeaveHours(shiftHours, strTempWorkHours);
                                            }




                                        }
                                        #endregion
                                        if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                        //if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            #region Deduction Rules Applies Employee And Company Wise
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                            //strLateInMinutes
                                            //var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;

                                                string ShiftCode = GetDeductionRules.ShiftCode;
                                                int DeductionID = Convert.ToInt32(GetDeductionRules.DeductionRuleID);

                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                var GetLeaveType = (from a in dbHrPayroll.MstLeaveType where a.ID == leaveType select a).FirstOrDefault();

                                                if (Deduction == true && leaveType > 0)
                                                {

                                                    if (DeductionType == "Employee")
                                                    {
                                                        decimal decLeaveCount = CalculateLeaveCountForShiftDeductions(shiftHours, strTempWorkHours);
                                                        //LeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);

                                                        if (decLeaveCount > 0)
                                                        {
                                                            #region Leave Deduction
                                                            //if (decLeaveCount > 0.5M)
                                                            //{
                                                            //    strLeaveHours = shiftHours;
                                                            //    LeaveCount = 0M;
                                                            //    //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                            //    strLeaveType = "";
                                                            //    //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                            //    strLeaveTypeCode = "";
                                                            //    flgLeaveIsNew = false;
                                                            //}
                                                            //else if (decLeaveCount <= 0.5M)
                                                            //{
                                                            //var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == oEmp.ID).FirstOrDefault();
                                                            //if (Data != null && Data.UnitsID == "HalfDay")
                                                            //{
                                                            //    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                            //    LeaveCount = 0.5M;
                                                            //    strLeaveType = Data.LeaveDescription;
                                                            //    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                            //    intLeaveType = Data.LeaveType.Value;
                                                            //    flgLeaveIsNew = true;
                                                            //}
                                                            //else
                                                            //{
                                                            if (GetLeaveType != null && decLeaveCount > 0)
                                                            {
                                                                strLeaveHours = TempLeaveHours;
                                                                LeaveCount = decLeaveCount;
                                                                strLeaveType = GetLeaveType.Description;
                                                                strLeaveTypeCode = GetLeaveType.Code;
                                                                flgLeaveIsNew = true;

                                                            }
                                                            else
                                                            {
                                                                strLeaveHours = "";
                                                                LeaveCount = 0M;
                                                                strLeaveType = "";
                                                                strLeaveTypeCode = "";
                                                                flgLeaveIsNew = false;
                                                                strDeductionRule = "";
                                                            }


                                                            // }
                                                            //}
                                                            #endregion
                                                        }
                                                    }

                                                }

                                            }
                                            else
                                            {
                                                oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                                return;
                                            }

                                            #endregion

                                            #region Old Dedcution Rule Company Wise Commit
                                            //                                            string SQL = @"Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType 
                                            //                                                           From " + Program.objHrmsUI.HRMSDbName + @".dbo.MstDeductionRules 
                                            //                                                           Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                            //                                            DataTable dt = ds.getDataTable(SQL);
                                            //                                            if (dt != null && dt.Rows.Count > 0)
                                            //                                            {
                                            //                                                int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            //                                                bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                            //                                                strDeductionRule = Convert.ToString(dt.Rows[0]["Code"]);
                                            //                                                if (Deduction == true && leaveType > 0)
                                            //                                                {
                                            //                                                    LeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);
                                            //                                                    if (LeaveCount > 0.5M)
                                            //                                                    {
                                            //                                                        strLeaveHours = shiftHours;
                                            //                                                        LeaveCount = 0M;
                                            //                                                        //strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                            //                                                        strLeaveType = "";
                                            //                                                        //strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                            //                                                        strLeaveTypeCode = "";
                                            //                                                        flgLeaveIsNew = false;
                                            //                                                    }
                                            //                                                    else if (LeaveCount <= 0.5M)
                                            //                                                    {
                                            //                                                        var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= x && x <= pd.LeaveTo && pd.EmpID == oEmp.ID).FirstOrDefault();
                                            //                                                        if (Data != null && Data.UnitsID == "HalfDay")
                                            //                                                        {
                                            //                                                            strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                            //                                                            LeaveCount = 0.5M;
                                            //                                                            strLeaveType = Data.LeaveDescription;
                                            //                                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                            //                                                            intLeaveType = Data.LeaveType.Value;
                                            //                                                            flgLeaveIsNew = true;
                                            //                                                        }
                                            //                                                        else
                                            //                                                        {
                                            //                                                            strLeaveHours = TempLeaveHours;
                                            //                                                            LeaveCount = 0M;
                                            //                                                            strLeaveType = "";
                                            //                                                            strLeaveTypeCode = "";
                                            //                                                            flgLeaveIsNew = false;
                                            //                                                        }
                                            //                                                    }
                                            //                                                }
                                            //                                            }
                                            #endregion
                                        }
                                    }
                                    #endregion
                                    #endregion
                                    //Calculate OverTime Here
                                    #region Calculate OverTime Here
                                    if (!string.IsNullOrEmpty(strWorkHours))
                                    {
                                        string strInOverTime = "00:00";
                                        string strOutOverTime = "00:00";
                                        Boolean flgPayroll = false;
                                        flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                        if (!flgPayroll)
                                        {
                                            flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;
                                            if (!flgOverTime)
                                            {
                                                strOverTimeHours = "";
                                                strOverTimeType = "";
                                            }
                                            else
                                            {
                                                bool flgOTApplicable = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                bool flgOtonWorkedHours = oAttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegister.MstShifts.FlgOTWrkHrs.Value;
                                                if (flgOtonWorkedHours)
                                                {
                                                    if (flgOTApplicable)
                                                    {
                                                        strOverTimeHours = CalculateOverTimeHoursSSL(shiftHours, strWorkHours);
                                                    }
                                                    else
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                }
                                                else
                                                {
                                                    if (flgOTApplicable)
                                                    {
                                                        if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                        {
                                                            shiftBefferTimeIn = shiftTimeIn;
                                                        }
                                                        if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                        {
                                                            shiftBufferTimeOut = shiftTimeOut;
                                                        }
                                                        strInOverTime = IFInOvertimeApplicableSSl(shiftBefferTimeIn, strTimeIn);
                                                        if (strInOverTime != "00:00")
                                                        {
                                                            //CalculateIN Overtime AccordingToShift
                                                            strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                        }
                                                        strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                        if (strOutOverTime != "00:00")
                                                        {
                                                            //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                            strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                        }
                                                        strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);
                                                        //OverTime on Weekend
                                                        if (shiftHours == "00:00")
                                                        {
                                                            strOverTimeHours = strWorkHours;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strOverTimeHours = "";
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                {
                                                    strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oAttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (true)
                                            {
                                                if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                                {
                                                    shiftBefferTimeIn = shiftTimeIn;
                                                }
                                                if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                {
                                                    shiftBufferTimeOut = shiftTimeOut;
                                                }
                                                strInOverTime = IFInOvertimeApplicableSSl(shiftBefferTimeIn, strTimeIn);
                                                if (strInOverTime != "00:00")
                                                {
                                                    //CalculateIN Overtime AccordingToShift
                                                    strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                }
                                                strOutOverTime = IFOutOvertimeApplicableSSL(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                if (strOutOverTime != "00:00")
                                                {
                                                    //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                    strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                }
                                                strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);
                                                //OverTime on Weekend
                                                if (shiftHours == "00:00")
                                                {
                                                    strOverTimeHours = strWorkHours;
                                                }
                                                if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                {
                                                    //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                    strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oEmp.CfgPayrollDefination.OTValue.Value).FirstOrDefault().Code;
                                                }
                                            }
                                        }
                                    }
                                    #endregion


                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegister.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());

                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                            else if ((flgNewImport && flgProcessed) || (!flgNewImport && flgProcessed))
                            {
                                #region Read from saved attendance
                                var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                select a).FirstOrDefault();
                                if (oAttendanceRegisterSaved != null)
                                {
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegisterSaved.MstShifts.Description) ? "" : oAttendanceRegisterSaved.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegisterSaved.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBefferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                    }
                                    strStatus = "";
                                    strTimeIn = oAttendanceRegisterSaved.TimeIn;
                                    strTimeOut = oAttendanceRegisterSaved.TimeOut;
                                    strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                    strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                    strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                    strOverTimeHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour) ? "" : oAttendanceRegisterSaved.OTHour;
                                    strDeductionRule = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveDedRule) ? "" : oAttendanceRegisterSaved.LeaveDedRule.Trim();
                                    strLeaveType = oAttendanceRegisterSaved.LeaveType == null ? "" : Convert.ToString(oAttendanceRegisterSaved.LeaveType);
                                    strDesc = oAttendanceRegisterSaved.Description == null ? "" : Convert.ToString(oAttendanceRegisterSaved.Description);
                                    strLeaveHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveHour) ? "" : oAttendanceRegisterSaved.LeaveHour;
                                    if (!string.IsNullOrEmpty(strLeaveType))
                                    {
                                        strLeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID.ToString() == strLeaveType select a.Code).FirstOrDefault() ?? "";
                                        LeaveCount = Convert.ToDecimal(oAttendanceRegisterSaved.LeaveCount);
                                        flgLeaveIsNew = Convert.ToBoolean(oAttendanceRegisterSaved.FlgIsNewLeave);
                                    }
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }

                                    Boolean flgOvertime = oEmp.CfgPayrollDefination.FlgOT != null ? Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT) : false;
                                    if (flgOvertime)
                                    {
                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                        {
                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oEmp.CfgPayrollDefination.OTValue select a.Code).FirstOrDefault() ?? "";
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                        {
                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oAttendanceRegisterSaved.MstShifts.OverTimeID select a.Code).FirstOrDefault() ?? "";
                                        }
                                    }

                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegisterSaved.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clDescription.DataBind.Alias, RecordCounter, strDesc);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                        }
                    }
                }
                if (string.IsNullOrEmpty(DedcutionOnshift))
                {
                    ApplyDeductionsBikiya();
                }
                var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule
                                       select a).FirstOrDefault();
                if (oAttendanceRule != null)
                {
                    if (Convert.ToBoolean(oAttendanceRule.FlgSandwichLeaves))
                    {
                        SandWichLeave();
                    }
                }
                //foreach (var oLine in Program.oOTSlabs)
                //{
                //    oApplication.StatusBar.SetText(oLine.EmpCode + " : " + oLine.OTmins.ToString() + " : " + oLine.PresentDays.ToString(), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success);
                //}
                grdAttendance.LoadFromDataSource();

            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error loading records from temp attendance. " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                }
                prog = null;
            }
        }

        private void LoadEmployeeAttendanceRecordISMMFM()
        {
            SAPbouiCOM.ProgressBar prog = null;
            DateTime StartDate = DateTime.MinValue;
            DateTime EndDate = DateTime.MinValue;
            string strEmpCode, strEmpName, strWorkHours, strDesc, shiftName, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut;
            string shiftHours, strTimeIn, strTimeOut, strOverTimeHours, strOverTimeType, strEarlyOutMinutes, strLeaveHours, strLeaveType, strLeaveTypeCode, strStatus, strDeductionRule;
            string isNewLeave, strLateInMinutes;
            Boolean flgOverTime, flgLeaveIsNew, flgInOverLap, flgOutOverLap, flgProcessed, flgNewImport, flgPosted;
            decimal LeaveCount = 0;
            int RecordCounter = 0, intLeaveType = -1;
            try
            {
                StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                double totalEmps = ((EndDate.Subtract(StartDate)).TotalDays + 1);
                if (totalEmps > 0)
                {
                    int TotalRecord = Convert.ToInt32(totalEmps);
                    prog = oApplication.StatusBar.CreateProgressBar("Importing Employee(s) Attendance Record(s)", TotalRecord, false);
                    prog.Value = 0;
                }
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    System.Windows.Forms.Application.DoEvents();
                    prog.Value += 1;
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (!ifSelected)
                    {
                        continue;
                    }
                    strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                    for (DateTime x = StartDate; x <= EndDate; x = x.AddDays(1))
                    {
                        if (oEmp != null)
                        {
                            bool IsHoliday = false;
                            bool flgActualTimeOutOverlap = false;
                            strDesc = string.Empty;
                            strTimeIn = string.Empty;
                            strTimeOut = string.Empty;
                            strWorkHours = string.Empty;
                            shiftTimeIn = string.Empty;
                            shiftTimeOut = string.Empty;
                            shiftHours = string.Empty;
                            shiftBufferTimeIn = string.Empty;
                            shiftBufferTimeOut = string.Empty;
                            strOverTimeHours = string.Empty;
                            strLateInMinutes = string.Empty;
                            strEarlyOutMinutes = string.Empty;
                            strStatus = string.Empty;
                            strLeaveHours = string.Empty;
                            strLeaveType = string.Empty;
                            strOverTimeType = string.Empty;
                            strLeaveTypeCode = string.Empty;
                            strDeductionRule = string.Empty;
                            flgLeaveIsNew = false;
                            flgOverTime = false;
                            flgInOverLap = false;
                            flgOutOverLap = false;
                            flgProcessed = false;
                            flgPosted = false;
                            intLeaveType = -1;
                            LeaveCount = 0;
                            strDesc = "";
                            string EmpCalenderID = oEmp.EmpCalender;

                            flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                            where a.Date == x && a.EmpID == oEmp.ID
                                            select a.Processed).FirstOrDefault() ?? false;
                            flgNewImport = (from a in dbHrPayroll.TrnsTempAttendance
                                            where a.PunchedDate == x && a.EmpID == oEmp.EmpID
                                            orderby a.ID descending
                                            select (a.FlgProcessed != null ? a.FlgProcessed : false)).FirstOrDefault() ?? false;
                            //Complete false when no record found at tem data,did't show saved data 

                            //retrun true to when no temp data found did't show offday

                            flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                         where a.Date == x && a.EmpID == oEmp.ID
                                         select a.FlgPosted).FirstOrDefault() ?? false;
                            if (flgPosted) continue;
                            string dayofWeeks = Convert.ToString(x.DayOfWeek);
                            if ((!flgNewImport && !flgProcessed) || (flgNewImport && flgProcessed))
                            //if ((!flgNewImport && !flgProcessed) || (!flgNewImport && flgProcessed))
                            //if (!flgNewImport && !flgProcessed)
                            {
                                #region Read from temp attendance
                                var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                           where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                           && (((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == false) ||
                                                           ((a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true))
                                                           select a).FirstOrDefault();
                                if (oAttendanceRegister != null)
                                {

                                    #region Get data from temp attendance
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegister.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                    }
                                    //Get Temp Attendance data base on shift config.
                                    if (!flgInOverLap && !flgOutOverLap)
                                    {
                                        flgActualTimeOutOverlap = false;
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        if (oTempAtt.Count > 0)
                                        {
                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Min(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                        }

                                    }
                                    else if (!flgInOverLap && flgOutOverLap)
                                    {
                                        flgActualTimeOutOverlap = true;
                                        DateTime nextDay = x.AddDays(1);
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        var oTempAttNext = (from a in dbHrPayroll.TrnsTempAttendance
                                                            where a.EmpID == oEmp.EmpID && a.PunchedDate == nextDay
                                                            select a).ToList();
                                        //if (oTempAtt.Count > 0)
                                        //{
                                        //    strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                        //}
                                        //if (oTempAttNext.Count > 0)
                                        //{
                                        //    strTimeOut = Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                        //}
                                        if (oTempAtt.Count > 0)
                                        {
                                            string strPreviousTimeOut = "";

                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                            strPreviousTimeOut = Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Max(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttNext.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                            if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strPreviousTimeOut))
                                            {
                                                decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                TempTimeIn = CalculateStringTime(strTimeIn);
                                                TempPreTimeOut = CalculateStringTime(strPreviousTimeOut);
                                                if (TempTimeIn < TempPreTimeOut)
                                                {
                                                    strTimeOut = strPreviousTimeOut;
                                                    flgActualTimeOutOverlap = false;
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                            {
                                                decimal TempTimeIn = 0, TempPreTimeOut = 0;
                                                TempTimeIn = CalculateStringTime(shiftTimeIn);
                                                TempPreTimeOut = CalculateStringTime(strTimeOut);
                                                if (TempTimeIn < TempPreTimeOut)
                                                {
                                                    strTimeOut = "";
                                                    flgActualTimeOutOverlap = false;
                                                }
                                            }
                                        }
                                    }
                                    else if (flgInOverLap && !flgOutOverLap)
                                    {
                                        flgActualTimeOutOverlap = false;
                                        DateTime previosDay = x.AddDays(-1);
                                        var oTempAtt = (from a in dbHrPayroll.TrnsTempAttendance
                                                        where a.EmpID == oEmp.EmpID && a.PunchedDate == x
                                                        select a).ToList();
                                        var oTempAttPrevios = (from a in dbHrPayroll.TrnsTempAttendance
                                                               where a.EmpID == oEmp.EmpID && a.PunchedDate == previosDay
                                                               select a).ToList();
                                        if (oTempAtt.Count > 0 && oTempAttPrevios.Count > 0)
                                        {
                                            strTimeIn = Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAtt.Where(a => a.In_Out == "01" || a.In_Out == "1" || a.In_Out == "In").Max(b => b.PunchedTime));
                                            strTimeOut = Convert.ToString(oTempAttPrevios.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime)) == null ? "" : Convert.ToString(oTempAttPrevios.Where(a => a.In_Out == "02" || a.In_Out == "2" || a.In_Out == "Out").Min(b => b.PunchedTime));
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                    {
                                        strWorkHours = CalculateWorkHoursISM(strTimeIn, strTimeOut);
                                    }

                                    #endregion

                                    //If Set for Off Day
                                    #region Off Day Working.

                                    if (oAttendanceRegister.FlgOffDay != null)
                                    {
                                        if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                        {
                                            //shiftTimeIn = "00:00";
                                            //shiftTimeOut = "00:00";
                                            //shiftHours = "00:00";
                                            //shiftBufferTimeIn = "00:00";
                                            //shiftBufferTimeOut = "00:00";
                                        }
                                    }

                                    #endregion

                                    //Weekend Calculation
                                    #region Weekend
                                    //if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                                    if (oEmp.DefaultOffDay.ToLower() == dayofWeeks.ToLower())
                                    {
                                        strDesc = "Off Day";
                                        LeaveCount = 0.0M;
                                    }
                                    #endregion

                                    //Public Holiday Calculation   
                                    #region Public Holiday Calculation
                                    if (!string.IsNullOrEmpty(EmpCalenderID))
                                    {
                                        SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                        string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + x + "' AND EndDate >= '" + x + "'";
                                        oRecSet.DoQuery(SQLHolidays);
                                        if (oRecSet.RecordCount > 0)
                                        {
                                            IsHoliday = true;
                                            strDesc = oRecSet.Fields.Item(1).Value;
                                        }
                                        if (IsHoliday)
                                        {
                                            shiftTimeIn = "00:00";
                                            shiftTimeOut = "00:00";
                                            shiftHours = "00:00";
                                            LeaveCount = 0.0M;
                                        }
                                    }
                                    #endregion

                                    //Calculate LateIn Minutes
                                    #region Calculate LateIn Minutes
                                    if (!string.IsNullOrEmpty(strTimeIn))
                                    {
                                        strLateInMinutes = CalculateLateInMinutes(shiftTimeIn, strTimeIn);
                                        if (!string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                        {
                                            var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLateInMinutes, shiftName).FirstOrDefault();
                                            if (GetDeductionRules != null)
                                            {
                                                string DeductionType = GetDeductionRules.DeductionRuleType;
                                                int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                            }
                                            else
                                            {
                                                MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes);
                                                return;
                                            }
                                        }
                                        //Buffer Period  Included Here
                                        var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                        if (AttendanceRule != null)
                                        {
                                            string BufferInTime = AttendanceRule.GpAfterStartTime;
                                            if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                            {
                                                if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                                {
                                                    strLateInMinutes = "00:00";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        strLateInMinutes = "00:00";
                                    }
                                    #endregion

                                    //Calculate Earlyout Minutes
                                    #region Calculate Earlyout Minutes
                                    if (!string.IsNullOrEmpty(strTimeOut))
                                    {
                                        decimal decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                        decimal decTimeIn = 0.0M;
                                        if (strTimeIn != null)
                                        {
                                            decTimeIn = ConvertTimeToDecimal(strTimeIn);
                                        }
                                        if (decTimeIn > decTimeOut && flgOutOverLap == false)
                                        {
                                            //Do Nothing
                                            strEarlyOutMinutes = "00:00";
                                        }
                                        else
                                        {

                                            strEarlyOutMinutes = CalculateEarlyOutMinutesISM(shiftTimeOut, strTimeOut, flgOutOverLap, flgActualTimeOutOverlap);

                                            if (!string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                            {
                                                var GetDeductionRules = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strEarlyOutMinutes, shiftName).FirstOrDefault();
                                                if (GetDeductionRules != null)
                                                {
                                                    string DeductionType = GetDeductionRules.DeductionRuleType;
                                                    int leaveType = Convert.ToInt32(GetDeductionRules.LeaveType);
                                                    bool Deduction = Convert.ToBoolean(GetDeductionRules.Deduction);
                                                    strDeductionRule = Convert.ToString(GetDeductionRules.Code);
                                                }
                                                else
                                                {
                                                    MsgWarning("Please Update deduction Rules To Identify LeaveType for Shift Hours " + strEarlyOutMinutes + " on Date " + x);
                                                    return;
                                                }
                                            }
                                            var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                            if (AttendanceRule != null)
                                            {
                                                string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                                if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                                {
                                                    if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                                    {
                                                        strEarlyOutMinutes = "00:00";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        strEarlyOutMinutes = "00:00";
                                    }
                                    #endregion

                                    // Status is not in Use in Current Version
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }

                                    //Calculate OverTime Here
                                    #region Calculate OverTime Here
                                    if (!string.IsNullOrEmpty(strWorkHours))
                                    {
                                        decimal decWorkHours = ConvertTimeToDecimal(strWorkHours);
                                        decimal decshiftHours = ConvertTimeToDecimal(shiftHours);
                                        if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                        {
                                            strOverTimeHours = strWorkHours;
                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                               where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                               select a.Code).FirstOrDefault() ?? "";
                                        }
                                        if (decWorkHours > decshiftHours)
                                        {
                                            string strInOverTime = "00:00";
                                            string strOutOverTime = "00:00";
                                            Boolean flgPayroll = false;
                                            #region  OverTime from Shift
                                            flgPayroll = Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT);
                                            if (!flgPayroll)
                                            {
                                                if (oAttendanceRegister.FlgOffDay == true)
                                                {
                                                    flgOverTime = oAttendanceRegister.MstShifts.FlgOffDayOverTime == null ? false : oAttendanceRegister.MstShifts.FlgOffDayOverTime.Value;
                                                }
                                                else
                                                {
                                                    flgOverTime = oAttendanceRegister.MstShifts.OverTime == null ? false : oAttendanceRegister.MstShifts.OverTime.Value;
                                                }

                                                if (!flgOverTime)
                                                {
                                                    strOverTimeHours = "";
                                                    strOverTimeType = "";
                                                }
                                                else
                                                {
                                                    bool flgEmployeeOTCheck = oAttendanceRegister.MstEmployee.FlgOTApplicable == null ? false : oAttendanceRegister.MstEmployee.FlgOTApplicable.Value;
                                                    bool flgShiftOTWorkHours = oAttendanceRegister.MstShifts.FlgOTWrkHrs == null ? false : oAttendanceRegister.MstShifts.FlgOTWrkHrs.Value;
                                                    if (flgShiftOTWorkHours)
                                                    {
                                                        if (flgEmployeeOTCheck)
                                                        {
                                                            //strOverTimeHours = CalculateOverTimeHoursSSL(shiftHours, strWorkHours);
                                                            //if (oEmp.DefaultOffDay.ToLower() == dayofWeeks.ToLower())
                                                            if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                            {
                                                                strOverTimeHours = strWorkHours;
                                                            }
                                                            else
                                                            {
                                                                //strOverTimeHours = CalculateOverTimeHours(shiftHours, strWorkHours);
                                                                strOverTimeHours = CalculateOverTimeISM(strTimeIn, strTimeOut, shiftTimeIn, shiftTimeOut, shiftBufferTimeIn, shiftBufferTimeOut, shiftHours, flgOutOverLap, flgActualTimeOutOverlap);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                            strOverTimeType = "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (flgEmployeeOTCheck)
                                                        {
                                                            if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                            {
                                                                shiftBufferTimeIn = shiftTimeIn;
                                                            }
                                                            if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                            {
                                                                shiftBufferTimeOut = shiftTimeOut;
                                                            }
                                                            strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                            if (strInOverTime != "00:00")
                                                            {
                                                                //CalculateIN Overtime AccordingToShift
                                                                strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                            }
                                                            decimal decTimeOut = ConvertTimeToDecimal(strTimeOut);
                                                            decimal decshiftBufferTimeOut = ConvertTimeToDecimal(shiftBufferTimeOut);
                                                            //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                            //{
                                                            //    strOutOverTime = strWorkHours;
                                                            //}
                                                            if (decshiftBufferTimeOut > decTimeOut)
                                                            {
                                                                //if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                                //{
                                                                //    strOutOverTime = strWorkHours;
                                                                //}
                                                                //else
                                                                //{
                                                                strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                                //}

                                                            }
                                                            if (strOutOverTime != "00:00")
                                                            {
                                                                //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);

                                                                strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);

                                                            }

                                                            strOverTimeHours = CalculateOverTimeHoursInandOutTimeSSL(strInOverTime, strOutOverTime);

                                                            //OverTime on Weekend
                                                            //if (shiftHours == "00:00")
                                                            if (Convert.ToBoolean(oAttendanceRegister.FlgOffDay))
                                                            {
                                                                strOverTimeHours = strWorkHours;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strOverTimeHours = "";
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        if (oAttendanceRegister.FlgOffDay == true)
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegister.MstShifts.OffDayOverTimeMstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                        else
                                                        {
                                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                               where a.ID == oAttendanceRegister.MstShifts.MstOverTime.ID
                                                                               select a.Code).FirstOrDefault() ?? "";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strOverTimeType = "";
                                                    }
                                                }
                                            }
                                            #endregion
                                            else
                                            {
                                                if (true)
                                                {
                                                    if (string.IsNullOrEmpty(shiftBufferTimeIn))
                                                    {
                                                        shiftBufferTimeIn = shiftTimeIn;
                                                    }
                                                    if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                                    {
                                                        shiftBufferTimeOut = shiftTimeOut;
                                                    }
                                                    strInOverTime = IFInOvertimeApplicableSSl(shiftBufferTimeIn, strTimeIn);
                                                    if (strInOverTime != "00:00")
                                                    {
                                                        //CalculateIN Overtime AccordingToShift
                                                        strInOverTime = CalculateInOvertimeApplicableSSL(shiftTimeIn, strTimeIn);
                                                    }
                                                    strOutOverTime = IFOutOvertimeApplicableSSL(strTimeOut, shiftBufferTimeOut, flgOutOverLap); //IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                                    if (strOutOverTime != "00:00")
                                                    {
                                                        //strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                                        strOutOverTime = CalculateOutOvertimeApplicableSSL(strTimeOut, shiftTimeOut, flgOutOverLap);
                                                    }
                                                    strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                                    //OverTime on Weekend
                                                    if (shiftHours == "00:00")
                                                    {
                                                        strOverTimeHours = strWorkHours;
                                                    }
                                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                                    {
                                                        //strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == AttendanceRegister.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                                        strOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                                           where a.ID == oEmp.CfgPayrollDefination.OTValue
                                                                           select a.Code).FirstOrDefault() ?? "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    //Calculate New Leaves Structured.
                                    #region Calculate Leaves
                                    //Full Days Leave Absent
                                    #region Full Leave Case
                                    if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && shiftHours != "00:00")
                                    {
                                        var PostedLeave = (from a in dbHrPayroll.TrnsLeavesRequest
                                                           where a.MstEmployee.EmpID == oEmp.EmpID
                                                           && a.LeaveFrom <= x && a.LeaveTo >= x && a.DocAprStatus == "LV0006"
                                                           select a).FirstOrDefault();
                                        if (PostedLeave != null)
                                        {
                                            strLeaveHours = "00:00";
                                            LeaveCount = 0M;
                                            strLeaveType = "";
                                            strLeaveTypeCode = "";
                                            intLeaveType = 0;
                                            flgLeaveIsNew = false;
                                            strDeductionRule = "";
                                            strDesc = "Leave already Posted.";
                                        }
                                        else
                                        {
                                            if (oEmp.DefaultOffDay.ToLower() != dayofWeeks.ToLower())
                                            {
                                                var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                                where a.Code == "DR_03"
                                                                select a).FirstOrDefault();

                                                if (oDedRule != null)
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = shiftHours;
                                                        LeaveCount = 1.0M;
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        //strDesc = "";
                                                    }
                                                    else
                                                    {
                                                        MsgError("Leave Type not selected in deduction rule 3.");
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    //Work Hour differ's from Shift Hours
                                    #region Work Hour Differs Shift Hours
                                    if (!string.IsNullOrEmpty(strWorkHours) && shiftHours != "00:00")
                                    {
                                        if (oEmp.DefaultOffDay.ToLower() != dayofWeeks.ToLower())
                                        {
                                            string TempLeaveHours = "";
                                            TempLeaveHours = CalculateLeaveHoursOTAdjustment(shiftHours, strWorkHours, strOverTimeHours, strLateInMinutes, strEarlyOutMinutes, out strOverTimeHours);
                                            if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                            {
                                                var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(TempLeaveHours, shiftName).FirstOrDefault();
                                                if (oDedRule.Code == "DR_02")
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                        LeaveCount = 0.5M;
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }
                                                else if (oDedRule.Code == "DR_01")
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = TempLeaveHours;
                                                        LeaveCount = GetLeaveCountOnMinLeaves(strLeaveHours, shiftHours);
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }
                                                else if (oDedRule.Code == "DR_03")
                                                {
                                                    if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                                    {
                                                        var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                            where a.ID == oDedRule.LeaveType
                                                                            select a).FirstOrDefault();
                                                        strLeaveHours = TempLeaveHours;
                                                        LeaveCount = 1;
                                                        strLeaveType = oLeaveMaster.Description;
                                                        strLeaveTypeCode = oLeaveMaster.Code;
                                                        intLeaveType = oLeaveMaster.ID;
                                                        flgLeaveIsNew = true;
                                                        strDeductionRule = oDedRule.Code;
                                                        strDesc = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    //Time In / Time Out Missing.
                                    #region Time In,Out Missing.
                                    if (((string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut)) ||
                                            (!string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut)))
                                        && (Convert.ToBoolean(Program.systemInfo.FlgAbsent)))
                                    {
                                        var oAttRule = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                        if (oAttRule != null)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType where a.Code == oAttRule.LeaveTypeWOP select a).FirstOrDefault();
                                            if (oLeaveMaster != null)
                                            {
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = oLeaveMaster.Description;
                                                strLeaveTypeCode = oLeaveMaster.Code;
                                                intLeaveType = oLeaveMaster.ID;
                                                flgLeaveIsNew = true;
                                                strDeductionRule = "DR_03";
                                            }
                                        }
                                    }
                                    #endregion

                                    #endregion

                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegister.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());

                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                            else if ((flgNewImport && flgProcessed) || (!flgNewImport && flgProcessed))
                            {
                                #region Read from saved attendance
                                var oAttendanceRegisterSaved = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                                where a.Date == x && a.MstEmployee.EmpID == oEmp.EmpID
                                                                && (a.Processed == null ? false : Convert.ToBoolean(a.Processed)) == true
                                                                select a).FirstOrDefault();
                                if (oAttendanceRegisterSaved != null)
                                {
                                    shiftName = string.IsNullOrEmpty(oAttendanceRegisterSaved.MstShifts.Description) ? "" : oAttendanceRegisterSaved.MstShifts.Description;
                                    var ShiftDetail = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofWeeks && a.ShiftID == oAttendanceRegisterSaved.MstShifts.Id select a).FirstOrDefault();
                                    if (ShiftDetail != null)
                                    {
                                        shiftTimeIn = ShiftDetail.StartTime;
                                        shiftBufferTimeIn = ShiftDetail.BufferStartTime;
                                        shiftBufferTimeOut = ShiftDetail.BufferEndTime;
                                        shiftTimeOut = ShiftDetail.EndTime;
                                        shiftHours = ShiftDetail.Duration;
                                        flgInOverLap = ShiftDetail.FlgInOverlap.Value;
                                        flgOutOverLap = ShiftDetail.FlgOutOverlap.Value;
                                    }
                                    strStatus = "";
                                    strTimeIn = oAttendanceRegisterSaved.TimeIn;
                                    strTimeOut = oAttendanceRegisterSaved.TimeOut;
                                    strWorkHours = oAttendanceRegisterSaved.WorkHour;
                                    strLateInMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.LateInMin) ? "" : oAttendanceRegisterSaved.LateInMin;
                                    strEarlyOutMinutes = string.IsNullOrEmpty(oAttendanceRegisterSaved.EarlyOutMin) ? "" : oAttendanceRegisterSaved.EarlyOutMin;
                                    strOverTimeHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour) ? "" : oAttendanceRegisterSaved.OTHour;
                                    strDeductionRule = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveDedRule) ? "" : oAttendanceRegisterSaved.LeaveDedRule.Trim();
                                    strLeaveType = oAttendanceRegisterSaved.LeaveType == null ? "" : Convert.ToString(oAttendanceRegisterSaved.LeaveType);
                                    strDesc = oAttendanceRegisterSaved.Description == null ? "" : Convert.ToString(oAttendanceRegisterSaved.Description);
                                    strLeaveHours = string.IsNullOrEmpty(oAttendanceRegisterSaved.LeaveHour) ? "" : oAttendanceRegisterSaved.LeaveHour;
                                    if (!string.IsNullOrEmpty(strLeaveType))
                                    {
                                        strLeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID.ToString() == strLeaveType select a.Code).FirstOrDefault() ?? "";
                                        LeaveCount = Convert.ToDecimal(oAttendanceRegisterSaved.LeaveCount);
                                        flgLeaveIsNew = true;
                                    }
                                    if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                                    {
                                        strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                                    }

                                    Boolean flgOvertime = oEmp.CfgPayrollDefination.FlgOT != null ? Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT) : false;
                                    if (flgOvertime)
                                    {
                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                        {
                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oEmp.CfgPayrollDefination.OTValue select a.Code).FirstOrDefault() ?? "";
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(oAttendanceRegisterSaved.OTHour))
                                        {
                                            //strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oAttendanceRegisterSaved.MstShifts.OverTimeID select a.Code).FirstOrDefault() ?? "";
                                            strOverTimeType = (from a in dbHrPayroll.MstOverTime where a.ID == oAttendanceRegisterSaved.OTType select a.Code).FirstOrDefault() ?? "";
                                        }
                                    }

                                    #region Assign value in grid
                                    dtAttendance.Rows.Add(1);
                                    dtAttendance.SetValue("Id", RecordCounter, oAttendanceRegisterSaved.Id);
                                    dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                    dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                    dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                    dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(x).ToString("yyyyMMdd"));
                                    dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                                    dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                                    dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                                    dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                                    dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                                    dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                                    dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                    dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                    dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                    dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                                    dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                    dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                    dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                    dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                    dtAttendance.SetValue("IsNewLeave", RecordCounter, flgLeaveIsNew == true ? "Y" : "N");
                                    dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                    dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                    dtAttendance.SetValue(clDRType.DataBind.Alias, RecordCounter, strDeductionRule.Trim());
                                    dtAttendance.SetValue(clDescription.DataBind.Alias, RecordCounter, strDesc);
                                    RecordCounter++;
                                    #endregion
                                }
                                else
                                {
                                    oApplication.StatusBar.SetText("EmpID : " + oEmp.EmpID + " shift not assign on date : " + x.ToString("MM/dd/yyyy"), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning);
                                }
                                #endregion
                            }
                        }
                    }
                }
                SandWichLeave();
                grdAttendance.LoadFromDataSource();

            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("Error loading records from temp attendance. " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
            finally
            {
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                }
                prog = null;
            }
        }

        private void ApplyDeductionsBikiya()
        {
            try
            {
                Program.oOTSlabs.Clear();
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        List<string> oCountDR1 = new List<string>();
                        List<string> oCountDR2 = new List<string>();
                        List<string> oCountDR3 = new List<string>();
                        int PresentDays = 0;
                        int minutes = 0;
                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                        {
                            string attEmp = dtAttendance.GetValue("EmpCode", j);
                            if (strEmpCode == attEmp)
                            {
                                string strDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, j);
                                string strLeaveHour = dtAttendance.GetValue(clLeaveHour.DataBind.Alias, j);
                                string strStatus = dtAttendance.GetValue(clStatus.DataBind.Alias, j);
                                string strAttID = Convert.ToString(dtAttendance.GetValue("Id", j));
                                string strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, j));
                                string strOTHour = Convert.ToString(dtAttendance.GetValue(clOTHour.DataBind.Alias, j));
                                string strTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, j));
                                string strTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, j));
                                string strShiftHour = Convert.ToString(dtAttendance.GetValue(clShiftHours.DataBind.Alias, j));
                                if (!string.IsNullOrEmpty(strStatus) && !string.IsNullOrEmpty(strDeductionType))
                                {
                                    if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                    {
                                        switch (strDeductionType)
                                        {
                                            case "DR_01":
                                                oCountDR1.Add(strAttID);
                                                break;
                                            case "DR_02":
                                                oCountDR2.Add(strAttID);
                                                break;
                                            case "DR_03":
                                                oCountDR3.Add(strAttID);
                                                break;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                {
                                    if (strTimeIn.Trim() != "00:00" && strTimeOut.Trim() != "00:00")
                                    {
                                        PresentDays++;
                                    }
                                }
                                if (!string.IsNullOrEmpty(strOTHour))
                                {
                                    if (strOTHour != "00:00")
                                    {
                                        string[] arrValue = strOTHour.Split(':');
                                        minutes += (Convert.ToInt32(arrValue[0]) * 60) + (Convert.ToInt32(arrValue[1]));
                                    }
                                }
                            }
                        }

                        var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                        if (oEmp.OTSlabs != null)
                        {
                            Program.PresentOTSlab OTData = new Program.PresentOTSlab();
                            OTData.EmpCode = strEmpCode;
                            OTData.OTmins = minutes;
                            if (PresentDays <= 26)
                            {
                                OTData.PresentDays = (PresentDays * 60);
                            }
                            else
                            {
                                OTData.PresentDays = 26 * 60;
                            }
                            Program.oOTSlabs.Add(OTData);
                        }

                        var oDedR1 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_01" select a).FirstOrDefault();
                        var oDedR2 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_02" select a).FirstOrDefault();
                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_03" select a).FirstOrDefault();
                        var oAttRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                        if (oAttRules != null)
                        {
                            if (Convert.ToBoolean(oAttRules.FlgConsecutiveLeave))
                            {
                                for (int LoopGrace = 0; LoopGrace < oDedR1.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR1.Count > 0)
                                        oCountDR1.RemoveAt(oCountDR1.Count - 1);
                                }
                                for (int LoopGrace = 0; LoopGrace < oDedR2.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR2.Count > 0)
                                        oCountDR2.RemoveAt(oCountDR2.Count - 1);
                                }
                                for (int LoopGrace = 0; LoopGrace < oDedR3.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR3.Count > 0)
                                        oCountDR3.RemoveAt(oCountDR3.Count - 1);
                                }
                                //Deduction Rule # 1
                                if ((oCountDR1.Count + oDedR1.GracePeriod) > oDedR1.GracePeriod && oDedR1.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR1)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR1.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR1.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 2
                                if ((oCountDR2.Count + oDedR2.GracePeriod) > oDedR2.GracePeriod && oDedR2.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR2)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR2.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR2.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 3
                                if ((oCountDR3.Count + oDedR3.GracePeriod) > oDedR3.GracePeriod && oDedR3.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR3)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (oCountDR1.Count > oDedR1.GracePeriod && oDedR1.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR1)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR1.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR1.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 2
                                if (oCountDR2.Count > oDedR2.GracePeriod && oDedR2.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR2)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR2.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR2.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 3
                                if (oCountDR3.Count > oDedR3.GracePeriod && oDedR3.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR3)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string Grdattid = Convert.ToString(dtAttendance.GetValue("No", j));
                                            string grdid = Grdattid;
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("ApplyDeductionsSSL : " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void SandWichLeaveOld()
        {
            try
            {
                for (int i = 0; i < dtAttendance.Rows.Count; i++)
                {

                    string strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, i));
                    string empcode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                    if (string.IsNullOrEmpty(empcode))
                    {
                        var oemp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == empcode
                                    select a).FirstOrDefault();
                        if (oemp == null) continue;
                        if ((oemp.FlgSandwich == null ? false : (bool)oemp.FlgSandwich) == false) continue;
                    }
                    if (strDescription == "Weekend")
                    {
                        if ((i - 1) >= 0)
                        {
                            decimal decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i - 1));
                            string strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i - 1);
                            if (decPreviousLeaveCount > 0 && strPreviousDeductionType == "DR_03")
                            {
                                if ((i + 1) < dtAttendance.Rows.Count)
                                {
                                    decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                    string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                    if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                    {
                                        string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, i - 1);
                                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                      where a.Code == "DR_03"
                                                      select a).FirstOrDefault();
                                        string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                        dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, LeaveHoursApplied);
                                        dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                        dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "Y");
                                        dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, LeaveTypeCode);
                                        dtAttendance.SetValue(clStatus.DataBind.Alias, i, "Sandwich Leave");
                                        dtAttendance.SetValue(clDRType.DataBind.Alias, i, oDedR3.Code);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void SandWichLeave()
        {
            try
            {
                DateTime CurrentPeriodFirstDate = DateTime.MinValue;
                DateTime PreviousPeriodEndDate = DateTime.MinValue;
                DateTime shiftDateX = DateTime.MinValue;

                for (int i = 0; i < dtAttendance.Rows.Count; i++)
                {
                    string GazetedHoliday = "";
                    Int32 previosperiodid = 0;
                    string shftDate = Convert.ToString(dtAttendance.GetValue(clTodayDate.DataBind.Alias, i)); //(grdAttendance.Columns.Item("Date").Cells.Item(pVal.Row).Specific as SAPbouiCOM.EditText).Value;
                    shiftDateX = Convert.ToDateTime(shftDate); //DateTime.ParseExact(shftDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    DateTime x = Convert.ToDateTime(shiftDateX);

                    string strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, i));
                    string empcode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                    string strWorkingHoursSandWhich = Convert.ToString(dtAttendance.GetValue(clWorkHours.DataBind.Alias, i));
                    string attid = Convert.ToString(dtAttendance.GetValue(clId.DataBind.Alias, i));
                    bool flgOffDay = false;

                    var oEmp = (from a in dbHrPayroll.MstEmployee
                                where a.EmpID == empcode
                                select a).FirstOrDefault();

                    if (!string.IsNullOrEmpty(empcode))
                    {
                        if (oEmp == null) continue;
                        if ((oEmp.FlgSandwich == null ? false : (bool)oEmp.FlgSandwich) == false) continue;

                    }
                    if (!string.IsNullOrEmpty(attid))
                    {
                        var oAtt = (from a in dbHrPayroll.TrnsAttendanceRegister
                                    where a.Id.ToString() == attid.Trim()
                                    select a).FirstOrDefault();
                        if (oAtt == null) continue;
                        flgOffDay = Convert.ToBoolean(oAtt.FlgOffDay);
                    }
                    #region Check Previous Period
                    Int32 selectedperiodid = Convert.ToInt32(cmbPeriod.Selected.Value);
                    Int32 selectedpayroll = Convert.ToInt32(cmbPayroll.Selected.Value);
                    var oPeriodsCollection = (from a in dbHrPayroll.CfgPeriodDates
                                              where a.PayrollId == selectedpayroll
                                              select a).ToList();
                    for (int j = 0; j < oPeriodsCollection.Count; j++)
                    {
                        if (selectedperiodid == oPeriodsCollection[j].ID)
                        {
                            previosperiodid = oPeriodsCollection[j - 1].ID;
                        }
                    }
                    var oPeriodCurrent = (from a in dbHrPayroll.CfgPeriodDates
                                          where a.ID == selectedperiodid
                                          select a).FirstOrDefault();

                    var oPeriodPrevious = (from a in dbHrPayroll.CfgPeriodDates
                                           where a.ID == previosperiodid
                                           select a).FirstOrDefault();
                    CurrentPeriodFirstDate = Convert.ToDateTime(oPeriodCurrent.StartDate);
                    PreviousPeriodEndDate = Convert.ToDateTime(oPeriodPrevious.EndDate);

                    var oAttPeriodEndDateOffDay = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                   where a.Date == PreviousPeriodEndDate
                                                   && a.LeaveCount == 1
                                                   && a.EmpID == oEmp.ID
                                                   select a).FirstOrDefault();

                    #endregion
                    if (oAttPeriodEndDateOffDay != null)
                    {
                        #region Sandwich Leave Current Period First Day Off and next Day Leave
                        if ((strDescription == "Weekend" || strDescription == "Off Day") && flgOffDay
                        && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                        {
                            if (oAttPeriodEndDateOffDay.FlgOffDay == true && oAttPeriodEndDateOffDay.LeaveCount > 0)
                            {
                                if ((i + 1) < dtAttendance.Rows.Count)
                                {
                                    decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                    string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                    if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                    {
                                        string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, i + 1);
                                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                      where a.Code == "DR_03"
                                                      select a).FirstOrDefault();
                                        string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                        dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, LeaveHoursApplied);
                                        dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                        dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "Y");
                                        dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, LeaveTypeCode);
                                        dtAttendance.SetValue(clStatus.DataBind.Alias, i, "Sandwich Leave");
                                        dtAttendance.SetValue(clDRType.DataBind.Alias, i, oDedR3.Code);

                                    }
                                    else
                                    {
                                        dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                        dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                        dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                        dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                        dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                        dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");

                                    }


                                }
                            }
                            else
                            {
                                #region Sandwich Leave Current Period
                                if ((strDescription == "Weekend" || strDescription == "Off Day") && flgOffDay
                                && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                                {
                                    if ((i - 1) >= 0)
                                    {
                                        decimal decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i - 1));
                                        string strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i - 1);
                                        if (decPreviousLeaveCount > 0 && strPreviousDeductionType == "DR_03")
                                        {
                                            if ((i + 1) < dtAttendance.Rows.Count)
                                            {
                                                decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                                string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                                if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                                {
                                                    string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, i - 1);
                                                    var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                                  where a.Code == "DR_03"
                                                                  select a).FirstOrDefault();
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, LeaveHoursApplied);
                                                    dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                    dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "Y");
                                                    dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, LeaveTypeCode);
                                                    dtAttendance.SetValue(clStatus.DataBind.Alias, i, "Sandwich Leave");
                                                    dtAttendance.SetValue(clDRType.DataBind.Alias, i, oDedR3.Code);
                                                }
                                                else
                                                {
                                                    dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                                    dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                                    dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                                    dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                                    dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                                    dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                            dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                            dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                            dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                            dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                            dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                        }
                                    }
                                }
                                else if ((strDescription == "Weekend" || strDescription == "Off Day")
                                    && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                                {
                                    if ((i - 1) >= 0)
                                    {
                                        decimal decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i - 1));
                                        string strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i - 1);
                                        if (decPreviousLeaveCount > 0 && strPreviousDeductionType == "DR_03")
                                        {
                                            if ((i + 1) < dtAttendance.Rows.Count)
                                            {
                                                decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                                string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                                if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                                {
                                                    string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, i - 1);
                                                    var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                                  where a.Code == "DR_03"
                                                                  select a).FirstOrDefault();
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, LeaveHoursApplied);
                                                    dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                    dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "Y");
                                                    dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, LeaveTypeCode);
                                                    dtAttendance.SetValue(clStatus.DataBind.Alias, i, "Sandwich Leave");
                                                    dtAttendance.SetValue(clDRType.DataBind.Alias, i, oDedR3.Code);
                                                }
                                                else
                                                {
                                                    dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                                    dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                                    dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                                    dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                                    dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                                    dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                            dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                            dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                            dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                            dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                            dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                        }
                                    }
                                }
                                #endregion

                            }

                        }

                        #endregion

                    }
                    else
                    {
                        #region Sandwich Leave Current Period
                        if ((strDescription == "Weekend" || strDescription == "Off Day") && flgOffDay
                        && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                        {
                            if ((i - 1) >= 0)
                            {
                                decimal decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i - 1));
                                string strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i - 1);
                                if (decPreviousLeaveCount > 0 && strPreviousDeductionType == "DR_03")
                                {
                                    if ((i + 1) < dtAttendance.Rows.Count)
                                    {
                                        decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                        string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                        if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                        {
                                            int j = i;
                                            while (decPreviousLeaveCount == 0 && strPreviousDeductionType == "DR_03")
                                            {
                                                string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, j - 1);
                                            var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                          where a.Code == "DR_03"
                                                          select a).FirstOrDefault();
                                            string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue(clLeaveHour.DataBind.Alias, j, LeaveHoursApplied);
                                                dtAttendance.SetValue(clLeaveCount.DataBind.Alias, j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, j, "Y");
                                                dtAttendance.SetValue(clLeaveType.DataBind.Alias, j, LeaveTypeCode);
                                                dtAttendance.SetValue(clStatus.DataBind.Alias, j, "Sandwich Leave");
                                                dtAttendance.SetValue(clDRType.DataBind.Alias, j, oDedR3.Code);
                                                decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, j - 1));
                                                strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, j - 1);
                                                j--;
                                        }
                                        }
                                    }
                                }
                            }
                        }
                        else if ((strDescription == "Weekend" || strDescription == "")
                            && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                        {
                            if ((i - 1) >= 0)
                            {
                                decimal decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i - 1));
                                string strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i - 1);
                                if (decPreviousLeaveCount > 0 || strPreviousDeductionType == "DR_03")
                                {
                                    if ((i + 1) < dtAttendance.Rows.Count)
                                    {
                                        decimal decNextLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, i + 1));
                                        string strNextDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i + 1);
                                        if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                        {
                                            int j = i;
                                            while (decPreviousLeaveCount == 0 && strPreviousDeductionType == "DR_03")
                                            {
                                                string LeaveHoursApplied = dtAttendance.GetValue(clShiftHours.DataBind.Alias, j - 1);
                                            var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                          where a.Code == "DR_03"
                                                          select a).FirstOrDefault();
                                            string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue(clLeaveHour.DataBind.Alias, j, LeaveHoursApplied);
                                                dtAttendance.SetValue(clLeaveCount.DataBind.Alias, j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, j, "Y");
                                                dtAttendance.SetValue(clLeaveType.DataBind.Alias, j, LeaveTypeCode);
                                                dtAttendance.SetValue(clStatus.DataBind.Alias, j, "Sandwich Leave");
                                                dtAttendance.SetValue(clDRType.DataBind.Alias, j, oDedR3.Code);
                                                decPreviousLeaveCount = Convert.ToDecimal(dtAttendance.GetValue(clLeaveCount.DataBind.Alias, j - 1));
                                                strPreviousDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, j - 1);
                                                j--;
                                        }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void SandWichLeaveGrid()
        {
            try
            {
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {

                    string strDescription = string.Empty, empcode = string.Empty;
                    empcode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    strDescription = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(empcode))
                    {
                        var oemp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == empcode
                                    select a).FirstOrDefault();
                        if (oemp == null) continue;
                        if ((oemp.FlgSandwich == null ? false : (bool)oemp.FlgSandwich) == false) continue;
                    }
                    if (strDescription == "Weekend" || strDescription == "Off Day")
                    {
                        if ((i - 1) >= 0)
                        {
                            decimal decPreviousLeaveCount = 0M;
                            string strPreviousDeductionType = string.Empty;
                            strPreviousDeductionType = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                            decPreviousLeaveCount = Convert.ToDecimal((grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                            if (decPreviousLeaveCount > 0 && strPreviousDeductionType == "DR_03")
                            {
                                if ((i + 1) < dtAttendance.Rows.Count)
                                {
                                    decimal decNextLeaveCount = Convert.ToDecimal((grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value);
                                    string strNextDeductionType = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                    if (decNextLeaveCount > 0 && strNextDeductionType == "DR_03")
                                    {
                                        string LeaveHoursApplied = (grdAttendance.Columns.Item(clShiftHours.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value;
                                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                      where a.Code == "DR_03"
                                                      select a).FirstOrDefault();
                                        string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                        //dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, LeaveHoursApplied);
                                        //dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                        //dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "Y");
                                        //dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, LeaveTypeCode);
                                        //dtAttendance.SetValue(clStatus.DataBind.Alias, i, "Sandwich Leave");
                                        //dtAttendance.SetValue(clDRType.DataBind.Alias, i, oDedR3.Code);
                                        (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = LeaveHoursApplied;
                                        (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount));
                                        (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                        (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Select(LeaveTypeCode, SAPbouiCOM.BoSearchKey.psk_ByValue);
                                        (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "Sandwich Leave";
                                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = oDedR3.Code;
                                    }
                                    else
                                    {
                                        //dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                        //dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                        //dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                        //dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                        //dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                        //dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                        (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                        (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "0.00";
                                        (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                        (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                        (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "";
                                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "";
                                    }
                                }
                            }
                            else
                            {
                                //dtAttendance.SetValue(clLeaveHour.DataBind.Alias, i, "00:00");
                                //dtAttendance.SetValue(clLeaveCount.DataBind.Alias, i, "0.00");
                                //dtAttendance.SetValue(clIsNewLeave.DataBind.Alias, i, "N");
                                //dtAttendance.SetValue(clLeaveType.DataBind.Alias, i, "-1");
                                //dtAttendance.SetValue(clStatus.DataBind.Alias, i, "");
                                //dtAttendance.SetValue(clDRType.DataBind.Alias, i, "");
                                (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "0.00";
                                (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "";
                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as SAPbouiCOM.EditText).Value = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void SandwichLeaveGridTwoLine(int LineNumber)
        {
            try
            {
                if (LineNumber > 0)
                {
                    string LeaveCount = string.Empty, EmpCode = string.Empty, Desc = string.Empty;
                    int MaxRange = grdAttendance.RowCount;
                    int MinRange = 1;
                    EmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value;
                    LeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value;
                    string strOffDayCurrentEditLine = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value;
                    string strWorkingHoursSandWhichCurrentEditLine = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value;
                    string strWorkingHoursSandWhich = "";
                    if (LeaveCount == "")
                    {
                        LeaveCount = "0";
                    }
                    //= Convert.ToString(dtAttendance.GetValue(clsWHrs.DataBind.Alias, i));
                    Desc = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value;
                    if (!string.IsNullOrEmpty(EmpCode))
                    {
                        var oemp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == EmpCode
                                    select a).FirstOrDefault();
                        if (oemp == null) return;
                        if ((oemp.FlgSandwich == null ? false : (bool)oemp.FlgSandwich) == false) return;
                    }

                    #region Back Check

                    if (LineNumber - 1 > 0) //go back for off day
                    {
                        if (Convert.ToDecimal(LeaveCount) >= 0.5M)
                        {
                            string preEmpCode = string.Empty, preDesc = string.Empty;

                            preEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            preDesc = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            //if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode))
                            strWorkingHoursSandWhich = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode) && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                            {

                                if (LineNumber - 2 > 0)
                                {
                                    string prepreEmpCode = string.Empty, prepreleavecount = string.Empty;
                                    prepreEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber - 2).Specific as SAPbouiCOM.EditText).Value;
                                    prepreleavecount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber - 2).Specific as SAPbouiCOM.EditText).Value;
                                    if ((Convert.ToDecimal(prepreleavecount) >= 0.5M) && (prepreEmpCode == EmpCode))
                                    {
                                        string LeaveHoursApplied = (grdAttendance.Columns.Item(clShiftHours.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                      where a.Code == "DR_03"
                                                      select a).FirstOrDefault();
                                        string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                        (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = LeaveHoursApplied;
                                        (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount));
                                        (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                        (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.ComboBox).Select(LeaveTypeCode, SAPbouiCOM.BoSearchKey.psk_ByValue);
                                        (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = "Sandwich Leave";
                                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = oDedR3.Code;
                                    }
                                }
                            }
                        }
                        else
                        {
                            string preEmpCode = string.Empty, preDesc = string.Empty;
                            strWorkingHoursSandWhich = "";
                            preEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            preDesc = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            strWorkingHoursSandWhich = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                            //if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode))
                            if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode)
                                && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                            {
                                (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = "0.00";
                                (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = "";
                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value = "";
                            }
                        }
                    }

                    #endregion

                    #region Forward Check

                    if (LineNumber + 2 <= MaxRange) //go forward for off day
                    {
                        if (Convert.ToDecimal(LeaveCount) >= 0.5M)
                        {
                            string preEmpCode = string.Empty, preDesc = string.Empty;
                            strWorkingHoursSandWhich = "";
                            preEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                            preDesc = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                            strWorkingHoursSandWhich = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                            //if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode))
                            if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode)
                                && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                            {
                                if (LineNumber + 2 > 0)
                                {
                                    string prepreEmpCode = string.Empty, prepreleavecount = string.Empty;
                                    prepreEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber + 2).Specific as SAPbouiCOM.EditText).Value;
                                    prepreleavecount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber + 2).Specific as SAPbouiCOM.EditText).Value;
                                    if ((Convert.ToDecimal(prepreleavecount) >= 0.5M) && (prepreEmpCode == EmpCode))
                                    {
                                        string LeaveHoursApplied = (grdAttendance.Columns.Item(clShiftHours.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                                      where a.Code == "DR_03"
                                                      select a).FirstOrDefault();
                                        string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                        (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = LeaveHoursApplied;
                                        (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount));
                                        (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                        (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.ComboBox).Select(LeaveTypeCode, SAPbouiCOM.BoSearchKey.psk_ByValue);
                                        (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = "Sandwich Leave";
                                        (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = oDedR3.Code;
                                    }
                                }
                            }
                        }
                        else
                        {
                            string preEmpCode = string.Empty, preDesc = string.Empty;
                            strWorkingHoursSandWhich = "";
                            preEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                            preDesc = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;

                            strWorkingHoursSandWhich = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                            //if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode))
                            if ((preDesc == "Weekend" || preDesc == "Off Day") && (preEmpCode == EmpCode)
                                && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                            {
                                (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = "00:00";
                                (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = "0.00";
                                (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.CheckBox).Checked = false;
                                (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.ComboBox).Select(0, SAPbouiCOM.BoSearchKey.psk_Index);
                                (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = "";
                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value = "";
                            }
                        }
                    }

                    #endregion

                    #region Line Check

                    //if ((Desc == "Weekend" || Desc == "Off Day") && (LineNumber - 1 > MinRange && LineNumber + 1 < MaxRange))
                    if ((Desc == "Weekend" || Desc == "Off Day") && (strWorkingHoursSandWhich == "" || strWorkingHoursSandWhich == "00:00"))
                    //&& (LineNumber - 1 > MinRange && LineNumber + 1 < MaxRange))
                    {
                        string preEmpCode = string.Empty, preLeaveCount = string.Empty;
                        string pstEmpCode = string.Empty, pstLeaveCount = string.Empty;
                        preEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                        preLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber - 1).Specific as SAPbouiCOM.EditText).Value;
                        pstEmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                        pstLeaveCount = (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                        if (Convert.ToDecimal(preLeaveCount) >= 0.5M && preEmpCode == EmpCode)
                        {
                            if (Convert.ToDecimal(pstLeaveCount) >= 0.5M && pstEmpCode == EmpCode)
                            {
                                string LeaveHoursApplied = (grdAttendance.Columns.Item(clShiftHours.UniqueID).Cells.Item(LineNumber + 1).Specific as SAPbouiCOM.EditText).Value;
                                var oDedR3 = (from a in dbHrPayroll.MstDeductionRules
                                              where a.Code == "DR_03"
                                              select a).FirstOrDefault();
                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = LeaveHoursApplied;
                                (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount));
                                (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.CheckBox).Checked = true;
                                (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.ComboBox).Select(LeaveTypeCode, SAPbouiCOM.BoSearchKey.psk_ByValue);
                                (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = "Sandwich Leave";
                                (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = oDedR3.Code;
                            }
                        }
                    }
                    #endregion

                    #region if Present On OffDay
                    //if ((strOffDayCurrentEditLine == "Weekend" || strOffDayCurrentEditLine == "Off Day") && (strWorkingHoursSandWhichCurrentEditLine != "00:00" || strWorkingHoursSandWhichCurrentEditLine != ""))
                    //{
                    //    (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = "";
                    //    (grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = "";
                    //    (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.CheckBox).Checked = false;
                    //    (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.ComboBox).Select("-1", SAPbouiCOM.BoSearchKey.psk_ByValue);
                    //    (grdAttendance.Columns.Item(clStatus.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = "";
                    //    (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(LineNumber).Specific as SAPbouiCOM.EditText).Value = "";
                    //}
                    #endregion
                }
            }
            catch (Exception ex)
            {
                MsgWarning("sandwichleavegridtwoline : " + ex.Message);
                logger(ex);
            }
        }

        private void LoadEmployeeAttendanceWrstCostCenter()
        {
            DateTime StartDate, EndDate;
            List<String> Emplist = new List<String>();
            SAPbouiCOM.ProgressBar prog = null;
            string strEmpCode = "";
            int intEmpID = 0;
            string strEmpName = "";
            string strWorkHours = "";
            int RecordCounter = 0;
            decimal LeaveCount = 0;
            string shiftName = "";
            string strDesc = "";
            string shiftTimeIn = "";
            string shiftBefferTimeIn = "";
            string shiftBufferTimeOut = "";
            string shiftTimeOut = "";
            string shiftHours = "";
            string strTimeIn = "";
            string strTimeOut = "";
            string strCostCenter = "";
            string strOverTimeHours = "";
            string strOverTimeType = "";
            string strLateInMinutes = "";
            string strEarlyOutMinutes = "";
            string strLeaveHours = "";
            string strStatus = "";
            string strLeaveType = "";
            string strLeaveTypeCode = "";
            bool isNewLeave = false;
            bool InflgOverlap = false;
            bool OutflgOverlap = false;
            bool isOverTimeApplicable = false;
            int intLeaveType = -1;
            bool IsHoliday = false;
            string EmpCalenderID = "";
            try
            {
                grdEmployees.FlushToDataSource();
                StartDate = new DateTime(2014, 09, 01);
                //StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = new DateTime(2014, 09, 30);
                //EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //Get Employees List
                if (dtEmployees.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmployees.Rows.Count; i++)
                    {
                        string selected, empid;
                        selected = dtEmployees.GetValue("isSel", i);
                        empid = dtEmployees.GetValue("EmpCode", i);
                        if (selected == "Y")
                        {
                            Emplist.Add(empid);
                        }
                    }
                }
                else
                {
                    return;
                }

                foreach (var OneEmp in Emplist)
                {
                    MstEmployee oEmployee = (from a in dbHrPayroll.MstEmployee where a.EmpID == OneEmp select a).FirstOrDefault();
                    dtCostCenterPerDay.Rows.Clear();
                    if (oEmployee == null)
                    {
                        continue;
                    }
                    strEmpCode = oEmployee.EmpID;
                    intEmpID = oEmployee.ID;
                    strEmpName = oEmployee.FirstName + " " + oEmployee.LastName;
                    EmpCalenderID = oEmployee.EmpCalender;
                    for (DateTime i = StartDate; i <= EndDate; i = i.AddDays(1))
                    {
                        TrnsAttendanceRegister oAtt = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                       where a.Date == i && a.EmpID == 3 && (a.Processed == null || a.Processed == false)
                                                       select a).FirstOrDefault();
                        if (oAtt != null)
                        {
                            string dayofweek = Convert.ToString(i.DayOfWeek);
                            if (!String.IsNullOrEmpty(oAtt.MstShifts.Description))
                            {
                                shiftName = oAtt.MstShifts.Description;
                            }
                            MstShiftDetails ShiftDetails = (from a in dbHrPayroll.MstShiftDetails where a.Day == dayofweek && a.ShiftID == oAtt.MstShifts.Id select a).FirstOrDefault();
                            if (ShiftDetails != null)
                            {
                                shiftTimeIn = ShiftDetails.StartTime;
                                shiftBefferTimeIn = ShiftDetails.BufferStartTime;
                                shiftBufferTimeOut = ShiftDetails.BufferEndTime;
                                shiftTimeOut = ShiftDetails.EndTime;
                                shiftHours = ShiftDetails.Duration;
                                InflgOverlap = ShiftDetails.FlgInOverlap.Value;
                                OutflgOverlap = ShiftDetails.FlgOutOverlap.Value;

                            }
                            //Get Attendance Record
                            if (!InflgOverlap && !OutflgOverlap)
                            {
                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == i).OrderBy(ab => ab.PunchedTime).ToList();
                                //var TempAttendance = from a in dbHrPayroll.TrnsTempAttendance
                                //                     where a.EmpID == intEmpID && a.PunchedDate == i.Date
                                //                     orderby a.PunchedTime descending
                                //                     select a;

                                if (TempAttendance != null && TempAttendance.Count > 0)
                                {
                                    //strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                    //strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                    string costcenter = "";
                                    string timein = "";
                                    string pptimeout = "";
                                    string pcostcenter = "", ptimein = "";
                                    for (int ab = 0; ab < TempAttendance.Count; ab++)
                                    {
                                        costcenter = TempAttendance[ab].CostCenter;
                                        timein = TempAttendance[ab].PunchedTime;
                                        pptimeout = Convert.ToString(TempAttendance.Where(a => (a.In_Out == "02" || a.In_Out == "2") && a.CostCenter == costcenter).Min(b => b.PunchedTime));
                                        if (ab > 0)
                                        {
                                            pcostcenter = TempAttendance[ab - 1].CostCenter;
                                            ptimein = TempAttendance[ab - 1].PunchedTime;
                                        }
                                        if (!string.IsNullOrEmpty(pcostcenter) && !string.IsNullOrEmpty(ptimein))
                                        {
                                            if (costcenter == pcostcenter && timein != ptimein)
                                            {
                                                strTimeIn = ptimein;
                                                strTimeOut = timein;
                                                DataRow dtRow = dtCostCenterPerDay.NewRow();
                                                dtRow["CostCenter"] = costcenter;
                                                dtRow["TimeIn"] = ptimein;
                                                dtRow["TimeOut"] = timein;
                                                dtRow["LineHour"] = CalculateWorkHours(ptimein, timein);
                                                dtRow["EmpID"] = oEmployee.EmpID;
                                                dtRow["Date"] = i.Date;
                                                dtCostCenterPerDay.Rows.Add(dtRow);
                                            }
                                        }

                                    }
                                    strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                                }
                            }
                            else if (!InflgOverlap && OutflgOverlap)
                            {
                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate.Value.Date == i.Date).ToList();
                                if (TempAttendance != null && TempAttendance.Count > 0)
                                {
                                    strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                }
                                DateTime dtx = i.AddDays(1);
                                var TempAttendanceOverlap = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                if (TempAttendanceOverlap != null && TempAttendanceOverlap.Count > 0)
                                {
                                    strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                }
                                strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                            }

                            else if (InflgOverlap && OutflgOverlap)
                            {
                                DateTime dtx = i.AddDays(1);
                                var TempAttendance = dbHrPayroll.TrnsTempAttendance.Where(tr => tr.EmpID == oEmployee.EmpID && tr.PunchedDate == dtx).ToList();
                                if (TempAttendance != null && TempAttendance.Count > 0)
                                {
                                    strTimeIn = Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "01" || str.In_Out == "1").Min(y => y.PunchedTime));
                                    strTimeOut = Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime)) == null ? "" : Convert.ToString(TempAttendance.Where(str => str.In_Out == "02" || str.In_Out == "2").Min(y => y.PunchedTime));
                                    strWorkHours = CalculateWorkHours(strTimeIn, strTimeOut);
                                }
                            }
                            //Weekend Calulation
                            if (!string.IsNullOrEmpty(shiftHours) && shiftHours == "00:00")
                            {
                                strDesc = "Weekend";
                                LeaveCount = 0.0M;
                            }

                            //Public Holiday Calculation                                 
                            if (!string.IsNullOrEmpty(EmpCalenderID))
                            {
                                SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + i + "' AND EndDate >= '" + i + "'";
                                oRecSet.DoQuery(SQLHolidays);
                                if (oRecSet.RecordCount > 0)
                                {
                                    IsHoliday = true;
                                    strDesc = oRecSet.Fields.Item(1).Value;
                                }
                                if (IsHoliday)
                                {
                                    shiftTimeIn = "00:00";
                                    shiftTimeOut = "00:00";
                                    shiftHours = "00:00";
                                    LeaveCount = 0.0M;
                                }
                            }
                            //Calculate Leaves in diffrent Scenerio
                            if (string.IsNullOrEmpty(strTimeIn) && string.IsNullOrEmpty(strTimeOut) && !string.IsNullOrEmpty(shiftHours) && shiftHours != "00:00")
                            {
                                string TempLeaveHours = "";
                                LeaveCount = 0.0M;
                                var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= i && i <= pd.LeaveTo && pd.EmpID == intEmpID).FirstOrDefault();
                                if (Data != null && Data.UnitsID == "Day")
                                {
                                    strLeaveHours = shiftHours;
                                    LeaveCount = 1.0M;
                                    strLeaveType = Data.LeaveDescription;
                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                    intLeaveType = Data.LeaveType.Value;
                                    isNewLeave = false;
                                }
                                else if (Data != null && Data.UnitsID == "HalfDay")
                                {
                                    TempLeaveHours = CalculateHalfShiftHours(shiftHours);
                                    string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                    System.Data.DataTable dt = ds.getDataTable(SQL);
                                    if (dt != null && dt.Rows.Count > 0)
                                    {
                                        int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        if (leaveType > 0)
                                        {
                                            intLeaveType = leaveType;
                                            strLeaveHours = TempLeaveHours;
                                            LeaveCount = 0.5M;
                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                            isNewLeave = true;
                                        }
                                    }
                                }
                                else
                                {
                                    TempLeaveHours = shiftHours;
                                    LeaveCount = 0.0M;
                                    string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                    System.Data.DataTable dt = ds.getDataTable(SQL);
                                    if (dt != null && dt.Rows.Count > 0)
                                    {
                                        int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        if (leaveType > 0)
                                        {
                                            intLeaveType = leaveType;
                                            strLeaveHours = TempLeaveHours;
                                            LeaveCount = 1.0M;
                                            strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                            strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                            isNewLeave = true;
                                        }
                                    }
                                    else
                                    {
                                        oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                        return;
                                    }
                                }
                            }
                            //Calculate LeaveHours If Person is Available in Office but Working Hours Differ From Shift Hours
                            if (!string.IsNullOrEmpty(strWorkHours))
                            {
                                string TempLeaveHours = "";
                                LeaveCount = 0.0M;
                                TempLeaveHours = CalculateLeaveHours(shiftHours, strWorkHours);
                                if (!string.IsNullOrEmpty(TempLeaveHours) && TempLeaveHours != "00:00")
                                {
                                    string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                    System.Data.DataTable dt = ds.getDataTable(SQL);
                                    if (dt != null && dt.Rows.Count > 0)
                                    {
                                        int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                        bool Deduction = Convert.ToBoolean(dt.Rows[0]["Deduction"]);
                                        if (Deduction == true && leaveType > 0)
                                        {
                                            LeaveCount = CalculateLeaveCount(shiftHours, strWorkHours);
                                            if (LeaveCount > 0.5M)
                                            {
                                                strLeaveHours = shiftHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                isNewLeave = true;
                                            }
                                            else if (LeaveCount <= 0.5M)
                                            {
                                                var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= i && i <= pd.LeaveTo && pd.EmpID == intEmpID).FirstOrDefault();
                                                if (Data != null && Data.UnitsID == "HalfDay")
                                                {
                                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                    LeaveCount = 0.5M;
                                                    strLeaveType = Data.LeaveDescription;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                                    intLeaveType = Data.LeaveType.Value;
                                                    isNewLeave = false;
                                                }
                                                else
                                                {
                                                    strLeaveHours = CalculateHalfShiftHours(shiftHours);
                                                    LeaveCount = 0.5M;
                                                    strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                    strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                    isNewLeave = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //Calculate OverTime Here
                            if (!string.IsNullOrEmpty(strWorkHours))
                            {
                                string strInOverTime = "00:00";
                                string strOutOverTime = "00:00";
                                isOverTimeApplicable = oAtt.MstShifts.OverTime.Value;
                                if (!isOverTimeApplicable)
                                {
                                    strOverTimeHours = "";
                                    strOverTimeType = "";
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(shiftBefferTimeIn))
                                    {
                                        shiftBefferTimeIn = shiftTimeIn;
                                    }
                                    if (string.IsNullOrEmpty(shiftBufferTimeOut))
                                    {
                                        shiftBufferTimeOut = shiftTimeOut;
                                    }
                                    strInOverTime = IFInOvertimeApplicable(shiftBefferTimeIn, strTimeIn);
                                    if (strInOverTime != "00:00")
                                    {
                                        //CalculateIN Overtime AccordingToShift
                                        strInOverTime = CalculateInOvertimeApplicable(shiftTimeIn, strTimeIn);
                                    }
                                    strOutOverTime = IFOutOvertimeApplicable(strTimeOut, shiftBufferTimeOut);
                                    if (strOutOverTime != "00:00")
                                    {
                                        strOutOverTime = CalculateOutOvertimeApplicable(strTimeOut, shiftTimeOut);
                                    }
                                    strOverTimeHours = CalculateOverTimeHoursInandOutTime(strInOverTime, strOutOverTime);
                                    //OverTime on Weekend
                                    if (shiftHours == "00:00")
                                    {
                                        strOverTimeHours = strWorkHours;
                                    }
                                    if (!string.IsNullOrEmpty(strOverTimeHours) && strOverTimeHours != "00:00")
                                    {
                                        strOverTimeType = dbHrPayroll.MstOverTime.Where(O => O.ID == oAtt.MstShifts.OverTimeID.Value).FirstOrDefault().Code;
                                    }
                                }
                            }

                            //Calculate LateIn Minutes
                            if (!string.IsNullOrEmpty(strTimeIn))
                            {
                                strLateInMinutes = CalculateLateInMinutes(shiftTimeIn, strTimeIn);
                                //Buffer Period  Included Here
                                var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                if (AttendanceRule != null)
                                {
                                    string BufferInTime = AttendanceRule.GpAfterStartTime;
                                    if (!string.IsNullOrEmpty(BufferInTime) && BufferInTime != "00:00" && !string.IsNullOrEmpty(strLateInMinutes) && strLateInMinutes != "00:00")
                                    {
                                        if (!IsBufferApplicable(BufferInTime, strLateInMinutes))
                                        {
                                            strLateInMinutes = "00:00";
                                        }
                                    }
                                }
                            }
                            //Calculate Earlyout Minutes
                            if (!string.IsNullOrEmpty(strTimeOut))
                            {
                                strEarlyOutMinutes = CalculateEarlyOutMinutes(shiftTimeOut, strTimeOut);
                                var AttendanceRule = dbHrPayroll.MstAttendanceRule.Where(ru => ru.FlgGpActive == false).FirstOrDefault();
                                if (AttendanceRule != null)
                                {
                                    string BufferOutTime = AttendanceRule.GpBeforeTimeEnd;
                                    if (!string.IsNullOrEmpty(BufferOutTime) && BufferOutTime != "00:00" && !string.IsNullOrEmpty(strEarlyOutMinutes) && strEarlyOutMinutes != "00:00")
                                    {
                                        if (!IsBufferApplicable(BufferOutTime, strEarlyOutMinutes))
                                        {
                                            strEarlyOutMinutes = "00:00";
                                        }
                                    }
                                }
                            }
                            // Status is not in Use in Current Version
                            if (!string.IsNullOrEmpty(strLateInMinutes) && !string.IsNullOrEmpty(strEarlyOutMinutes))
                            {
                                strStatus = GetAttendanceStatus_NEW(strLateInMinutes, strEarlyOutMinutes);
                            }

                            dtAttendance.Rows.Add(1);
                            dtAttendance.SetValue("Id", RecordCounter, oAtt.Id);
                            dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                            dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                            dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                            dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(i).ToString("yyyyMMdd"));
                            dtAttendance.SetValue("Shift", RecordCounter, shiftName.Trim());
                            dtAttendance.SetValue("SfStart", RecordCounter, shiftTimeIn.Trim());
                            dtAttendance.SetValue("SfEnd", RecordCounter, shiftTimeOut.Trim());
                            dtAttendance.SetValue("SfHours", RecordCounter, shiftHours.Trim());
                            dtAttendance.SetValue("TimeIn", RecordCounter, strTimeIn.Trim());
                            dtAttendance.SetValue("TimeOut", RecordCounter, strTimeOut.Trim());
                            dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                            dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                            dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                            dtAttendance.SetValue("WorkHours", RecordCounter, strWorkHours.Trim());
                            dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                            dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                            dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                            dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                            dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                            dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                            dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                            RecordCounter++;
                        }
                    }
                }
                grdAttendance.LoadFromDataSource();
                //oApplication.StatusBar.SetText("Hurra  ", SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Success);

            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("LoadEmployeeAttendanceWrstCostCenter Exception : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void LoadEmployeeAttendanceCC()
        {
            try
            {
                DateTime StartDate, EndDate;
                Int32 RecordCounter = 0;
                List<String> Emplist = new List<String>();
                Decimal LeaveCount = 0;
                string strEmpCode = "", strEmpName = "", EmpCalenderID = "";
                string DayofWeek = "", ShiftName = "", ShiftTimeIn = "", ShiftTimeOut = "", ShiftBufferTimeIn = "", ShiftBufferTimeOut = "";
                string ShiftHour = "", CostCenterCurrent = "", CostCenterTimeIn = "", CostCenterTimeOut = "", CostCenterZero = "";
                string LateInMinutes = "", EarlyOutMinutes = "", strStatus = "", strOverTimeType = "", strOverTimeHours = "", strLeaveHours = "";
                string strLeaveTypeCode = "", strDesc = "", WorkHours = "", strLeaveType = "";
                Boolean flgInOverLap = false, flgOutOverLap = false, isNewLeave = false, IsHoliday = false;
                Int32 intEmpID = 0, intLeaveType;
                grdEmployees.FlushToDataSource();
                //StartDate = new DateTime(2014, 11, 03);
                StartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                //EndDate = new DateTime(2014, 11, 07);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                if (dtEmployees.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmployees.Rows.Count; i++)
                    {
                        string selected, empid;
                        selected = dtEmployees.GetValue("isSel", i);
                        empid = dtEmployees.GetValue("EmpCode", i);
                        if (selected == "Y")
                        {
                            Emplist.Add(empid);
                        }
                    }
                }
                else
                {
                    return;
                }
                foreach (var OneEmp in Emplist)
                {
                    MstEmployee oEmployee = (from a in dbHrPayroll.MstEmployee where a.EmpID == OneEmp select a).FirstOrDefault();
                    dtCostCenterPerDay.Rows.Clear();
                    if (oEmployee == null)
                    {
                        continue;
                    }
                    strEmpCode = oEmployee.EmpID;
                    intEmpID = oEmployee.ID;
                    strEmpName = oEmployee.FirstName + " " + oEmployee.LastName;
                    EmpCalenderID = oEmployee.EmpCalender;

                    for (DateTime i = StartDate; i <= EndDate; i = i.AddDays(1))
                    {

                        TrnsAttendanceRegister oAttendance = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                              where a.Date == i && a.EmpID == intEmpID &&
                                                              (a.Processed == null || a.Processed == false)
                                                              select a).FirstOrDefault();
                        if (oAttendance != null)
                        {
                            DayofWeek = Convert.ToString(i.DayOfWeek);
                            ShiftName = oAttendance.MstShifts.Description;
                            MstShiftDetails oShiftDetail = (from a in dbHrPayroll.MstShiftDetails
                                                            where a.Day == DayofWeek && a.ShiftID == oAttendance.MstShifts.Id
                                                            select a).FirstOrDefault();
                            if (oShiftDetail == null)
                            {
                                continue;
                            }
                            ShiftTimeIn = oShiftDetail.StartTime;
                            ShiftTimeOut = oShiftDetail.EndTime;
                            ShiftBufferTimeIn = oShiftDetail.BufferStartTime;
                            ShiftBufferTimeOut = oShiftDetail.BufferEndTime;
                            ShiftHour = oShiftDetail.Duration;
                            flgInOverLap = Convert.ToBoolean(oShiftDetail.FlgInOverlap);
                            flgOutOverLap = Convert.ToBoolean(oShiftDetail.FlgOutOverlap);

                            var TempAttandence = (from a in dbHrPayroll.TrnsTempAttendance
                                                  where a.EmpID == oEmployee.EmpID && a.PunchedDate == i
                                                  select a).OrderBy(b => b.PunchedTime).ToList();

                            if (TempAttandence != null && TempAttandence.Count > 0)
                            {
                                List<String> CostCenterPerDay = new List<String>();
                                for (Int32 k = 0; k < TempAttandence.Count; k++)
                                {
                                    if (!CostCenterPerDay.Contains(TempAttandence[k].CostCenter))
                                    {
                                        CostCenterPerDay.Add(TempAttandence[k].CostCenter);
                                    }
                                }
                                if (CostCenterPerDay.Count > 0)
                                {

                                    foreach (String OneItem in CostCenterPerDay)
                                    {
                                        dtCostCenterPerDay.Rows.Clear();
                                        CostCenterTimeIn = TempAttandence.Where(a => a.CostCenter == OneItem && (a.In_Out == "01" || a.In_Out == "1")).Min(b => b.PunchedTime);
                                        CostCenterTimeOut = TempAttandence.Where(a => a.CostCenter == OneItem && (a.In_Out == "02" || a.In_Out == "2")).Min(b => b.PunchedTime);
                                        if (string.IsNullOrEmpty(CostCenterTimeIn))
                                        {
                                            CostCenterTimeIn = "";
                                        }
                                        if (string.IsNullOrEmpty(CostCenterTimeOut))
                                        {
                                            CostCenterTimeOut = "";
                                        }
                                        CostCenterZero = OneItem;
                                        var OnlyIns = TempAttandence.Where(a => a.CostCenter == OneItem && (a.In_Out == "01" || a.In_Out == "1")).OrderBy(b => b.PunchedTime).ToList();
                                        var OnlyOuts = TempAttandence.Where(a => a.CostCenter == OneItem && (a.In_Out == "02" || a.In_Out == "2")).OrderBy(b => b.PunchedTime).ToList();
                                        Int32 MainCount = 0;
                                        if (OnlyIns.Count >= OnlyOuts.Count)
                                        {
                                            MainCount = OnlyIns.Count;
                                        }
                                        else
                                        {
                                            MainCount = OnlyOuts.Count;
                                        }
                                        String preTimeIn = "", preTimeOut = "";
                                        String currTimeIn = "", currTimeOut = "";
                                        for (Int32 l = 0; l < MainCount; l++)
                                        {
                                            currTimeIn = "";
                                            currTimeOut = "";
                                            DataRow dtRow = dtCostCenterPerDay.NewRow();
                                            try
                                            {
                                                dtRow["TimeIn"] = OnlyIns[l].PunchedTime;
                                            }
                                            catch
                                            {
                                                dtRow["TimeIn"] = "";
                                            }
                                            try
                                            {
                                                dtRow["TimeOut"] = OnlyOuts[l].PunchedTime;
                                            }
                                            catch
                                            {
                                                dtRow["TimeOut"] = "";
                                            }
                                            if (dtRow["TimeOut"] != "" && dtRow["TimeIn"] != "")
                                            {
                                                WorkHours = CalculateWorkHours(dtRow["TimeIn"].ToString().Trim(), dtRow["TimeOut"].ToString().Trim());
                                                dtRow["LineHour"] = WorkHours;
                                            }
                                            else
                                            {
                                                WorkHours = "";
                                            }
                                            dtRow["CostCenter"] = OneItem;
                                            currTimeIn = dtRow["TimeIn"].ToString().Trim();
                                            currTimeOut = dtRow["TimeOut"].ToString().Trim();
                                            if ((preTimeIn != currTimeIn) && (preTimeOut != currTimeOut))
                                            {
                                                preTimeIn = currTimeIn;
                                                preTimeOut = currTimeOut;
                                                dtCostCenterPerDay.Rows.Add(dtRow);
                                            }

                                        }
                                        Int32 ccperday = 0;

                                        for (Int32 l = 0; l < dtCostCenterPerDay.Rows.Count; l++)
                                        {
                                            dtAttendance.Rows.Add(1);
                                            dtAttendance.SetValue("Id", RecordCounter, oAttendance.Id);
                                            dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                            dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                            dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                            dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(i).ToString("yyyyMMdd"));
                                            dtAttendance.SetValue("Shift", RecordCounter, ShiftName.Trim());
                                            dtAttendance.SetValue("SfStart", RecordCounter, ShiftTimeIn.Trim());
                                            dtAttendance.SetValue("SfEnd", RecordCounter, ShiftTimeOut.Trim());
                                            dtAttendance.SetValue("SfHours", RecordCounter, ShiftHour.Trim());
                                            dtAttendance.SetValue("TimeIn", RecordCounter, dtCostCenterPerDay.Rows[l]["TimeIn"].ToString().Trim());
                                            dtAttendance.SetValue("TimeOut", RecordCounter, dtCostCenterPerDay.Rows[l]["TimeOut"].ToString().Trim());
                                            MstLocation oLoc = (from a in dbHrPayroll.MstLocation where a.AttandanceID == dtCostCenterPerDay.Rows[l]["CostCenter"].ToString() select a).FirstOrDefault();
                                            dtAttendance.SetValue("CostCenter", RecordCounter, oLoc.CostCenter);
                                            //WorkHours = CalculateWorkHours(dtCostCenterPerDay.Rows[l]["TimeIn"].ToString().Trim(), dtCostCenterPerDay.Rows[l]["TimeOut"].ToString().Trim());
                                            dtAttendance.SetValue("WorkHours", RecordCounter, dtCostCenterPerDay.Rows[l]["LineHour"].ToString());
                                            //dtAttendance.SetValue("LateInMin", RecordCounter, strLateInMinutes.Trim());
                                            //dtAttendance.SetValue("EarlyOutMin", RecordCounter, strEarlyOutMinutes.Trim());
                                            //dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                            //dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                            //dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                            //dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                            //dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                            //dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                                            //dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                            //dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                            RecordCounter++;
                                            ccperday++;
                                        }
                                        if (dtCostCenterPerDay.Rows.Count == 0)
                                        {
                                            dtAttendance.Rows.Add(1);
                                            dtAttendance.SetValue("Id", RecordCounter, oAttendance.Id);
                                            dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                            dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                            dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                            dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(i).ToString("yyyyMMdd"));
                                            dtAttendance.SetValue("Shift", RecordCounter, ShiftName.Trim());
                                            dtAttendance.SetValue("SfStart", RecordCounter, ShiftTimeIn.Trim());
                                            dtAttendance.SetValue("SfEnd", RecordCounter, ShiftTimeOut.Trim());
                                            dtAttendance.SetValue("SfHours", RecordCounter, ShiftHour.Trim());
                                            dtAttendance.SetValue("TimeIn", RecordCounter, CostCenterTimeIn);
                                            dtAttendance.SetValue("TimeOut", RecordCounter, CostCenterTimeOut);
                                            MstLocation oLoc = (from a in dbHrPayroll.MstLocation where a.AttandanceID == CostCenterZero select a).FirstOrDefault();
                                            dtAttendance.SetValue("CostCenter", RecordCounter, oLoc.CostCenter);
                                            //WorkHours = CalculateWorkHours(dtCostCenterPerDay.Rows[l]["TimeIn"].ToString().Trim(), dtCostCenterPerDay.Rows[l]["TimeOut"].ToString().Trim());
                                            dtAttendance.SetValue("WorkHours", RecordCounter, "00:00");
                                            RecordCounter++;
                                        }

                                    }
                                    //for (Int32 k = 0; k < dtCostCenterPerDay.Rows.Count; k++)
                                    //{
                                    //    if (k + 1 < dtCostCenterPerDay.Rows.Count)
                                    //    {
                                    //        dtCostCenterPerDay.Rows[k]["TimeOut"] = dtCostCenterPerDay.Rows[k + 1]["TimeIn"];
                                    //    }                                        
                                    //}

                                }

                            }
                            else
                            {
                                CostCenterCurrent = "";
                                //Weekend Calulation
                                if (!string.IsNullOrEmpty(ShiftHour) && ShiftHour == "00:00")
                                {
                                    strDesc = "Weekend";
                                    LeaveCount = 0.0M;
                                }
                                //Public Holiday Calculation                                 
                                if (!string.IsNullOrEmpty(EmpCalenderID))
                                {
                                    SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                    string SQLHolidays = "SELECT HldCode,Rmrks FROM dbo.HLD1 WHERE HldCode = '" + EmpCalenderID + "' AND StrDate <= '" + i + "' AND EndDate >= '" + i + "'";
                                    oRecSet.DoQuery(SQLHolidays);
                                    if (oRecSet.RecordCount > 0)
                                    {
                                        IsHoliday = true;
                                        strDesc = oRecSet.Fields.Item(1).Value;
                                    }
                                    if (IsHoliday)
                                    {
                                        ShiftTimeIn = "00:00";
                                        ShiftTimeOut = "00:00";
                                        ShiftHour = "00:00";
                                        LeaveCount = 0.0M;
                                    }
                                }
                                //Calculate Leaves in diffrent Scenerio
                                if (string.IsNullOrEmpty(CostCenterTimeIn) && string.IsNullOrEmpty(CostCenterTimeOut) && !string.IsNullOrEmpty(ShiftHour) && ShiftHour != "00:00")
                                {
                                    string TempLeaveHours = "";
                                    LeaveCount = 0.0M;
                                    var Data = dbHrPayroll.TrnsLeavesRequest.Where(pd => pd.LeaveFrom <= i && i <= pd.LeaveTo && pd.EmpID == intEmpID).FirstOrDefault();
                                    if (Data != null && Data.UnitsID == "Day")
                                    {
                                        strLeaveHours = ShiftHour;
                                        LeaveCount = 1.0M;
                                        strLeaveType = Data.LeaveDescription;
                                        strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == Data.LeaveType.Value).FirstOrDefault().Code;
                                        intLeaveType = Data.LeaveType.Value;
                                        isNewLeave = false;
                                    }
                                    else if (Data != null && Data.UnitsID == "HalfDay")
                                    {
                                        TempLeaveHours = CalculateHalfShiftHours(ShiftHour);
                                        string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        System.Data.DataTable dt = ds.getDataTable(SQL);
                                        if (dt != null && dt.Rows.Count > 0)
                                        {
                                            int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            if (leaveType > 0)
                                            {
                                                intLeaveType = leaveType;
                                                strLeaveHours = TempLeaveHours;
                                                LeaveCount = 0.5M;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                isNewLeave = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        TempLeaveHours = ShiftHour;
                                        LeaveCount = 0.0M;
                                        string SQL = "Select Code,Value,RangeFrom,RangeTo,Deduction,LeaveType From " + Program.objHrmsUI.HRMSDbName + ".dbo.MstDeductionRules Where RangeFrom <= '" + TempLeaveHours + "' and RangeTo >= '" + TempLeaveHours + "'";
                                        System.Data.DataTable dt = ds.getDataTable(SQL);
                                        if (dt != null && dt.Rows.Count > 0)
                                        {
                                            int leaveType = Convert.ToInt32(dt.Rows[0]["LeaveType"]);
                                            if (leaveType > 0)
                                            {
                                                intLeaveType = leaveType;
                                                strLeaveHours = TempLeaveHours;
                                                LeaveCount = 1.0M;
                                                strLeaveType = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Description;
                                                strLeaveTypeCode = dbHrPayroll.MstLeaveType.Where(lt => lt.ID == leaveType).FirstOrDefault().Code;
                                                isNewLeave = true;
                                            }
                                        }
                                        else
                                        {
                                            oApplication.StatusBar.SetText("Please Update deduction Rules To Identify LeaveType for Shift Hours " + TempLeaveHours, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
                                            return;
                                        }
                                    }
                                }
                                dtAttendance.Rows.Add(1);
                                dtAttendance.SetValue("Id", RecordCounter, oAttendance.Id);
                                dtAttendance.SetValue("No", RecordCounter, RecordCounter + 1);
                                dtAttendance.SetValue("EmpCode", RecordCounter, strEmpCode.Trim());
                                dtAttendance.SetValue("EmpName", RecordCounter, strEmpName.Trim());
                                dtAttendance.SetValue("Date", RecordCounter, Convert.ToDateTime(i).ToString("yyyyMMdd"));
                                dtAttendance.SetValue("Shift", RecordCounter, ShiftName.Trim());
                                dtAttendance.SetValue("SfStart", RecordCounter, ShiftTimeIn.Trim());
                                dtAttendance.SetValue("SfEnd", RecordCounter, ShiftTimeOut.Trim());
                                dtAttendance.SetValue("SfHours", RecordCounter, ShiftHour.Trim());
                                dtAttendance.SetValue("TimeIn", RecordCounter, CostCenterTimeIn.Trim());
                                dtAttendance.SetValue("TimeOut", RecordCounter, CostCenterTimeOut.Trim());
                                dtAttendance.SetValue("LateInMin", RecordCounter, LateInMinutes.Trim());
                                dtAttendance.SetValue("EarlyOutMin", RecordCounter, EarlyOutMinutes.Trim());
                                dtAttendance.SetValue("CostCenter", RecordCounter, CostCenterCurrent);
                                dtAttendance.SetValue("Status", RecordCounter, strStatus.Trim());
                                dtAttendance.SetValue("WorkHours", RecordCounter, WorkHours.Trim());
                                dtAttendance.SetValue("OTType", RecordCounter, strOverTimeType.Trim());
                                dtAttendance.SetValue("OTHours", RecordCounter, strOverTimeHours.Trim());
                                dtAttendance.SetValue("LevHours", RecordCounter, strLeaveHours.Trim());
                                dtAttendance.SetValue("LevCount", RecordCounter, string.Format("{0:0.00}", LeaveCount));
                                dtAttendance.SetValue("IsNewLeave", RecordCounter, isNewLeave == true ? "Y" : "N");
                                dtAttendance.SetValue("LevType", RecordCounter, strLeaveTypeCode.Trim());
                                dtAttendance.SetValue("clDesc", RecordCounter, strDesc.Trim());
                                RecordCounter++;
                            }
                            CostCenterTimeOut = "";
                            CostCenterTimeIn = "";

                        }



                    }
                }
                Int32 dtCount = 0;
                dtCount = dtAttendance.Rows.Count;
                for (Int32 a = 0; a < dtCount; a++)
                {
                    DateTime Today, Yesterday;
                    Today = new DateTime(2000, 01, 01);
                    Yesterday = new DateTime(2000, 01, 01);
                    String TodayTimeIn = "", TodayTimeOut = "", YestTimeIn = "", YestTimeOut = "", YestCC = "", TodayCC = "";
                    Today = dtAttendance.GetValue("Date", a);
                    TodayTimeIn = dtAttendance.GetValue("TimeIn", a);
                    TodayTimeOut = dtAttendance.GetValue("TimeOut", a);
                    TodayCC = dtAttendance.GetValue("CostCenter", a);
                    if (a != 0)
                    {
                        Yesterday = dtAttendance.GetValue("Date", a - 1);
                        YestTimeIn = dtAttendance.GetValue("TimeIn", a - 1);
                        YestTimeOut = dtAttendance.GetValue("TimeOut", a - 1);
                        YestCC = dtAttendance.GetValue("CostCenter", a - 1);
                    }
                    if ((Today == Yesterday) && (Today.Year != 2000 || Yesterday.Year != 2000) && (YestCC != TodayCC))
                    {
                        if (String.IsNullOrEmpty(YestTimeOut))
                        {
                            YestTimeOut = "";
                        }
                        dtAttendance.SetValue("TimeIn", a, YestTimeOut);
                    }
                }

                grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("LoadEmployeeAttendanceCC Exception : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void FillEmployeeLeaveBalanceLeaveCalendar()
        {
            try
            {
                oEmployeeLeaveCollection.Clear();
                for (int i = 0; i < grdEmployees.RowCount; i++)
                {
                    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode.Trim() select a).FirstOrDefault();
                    string value = cmbPeriod.Value.Trim();
                    if (string.IsNullOrEmpty(value) || value == "0") return;
                    var oPeriod = (from a in dbHrPayroll.CfgPeriodDates where a.ID.ToString() == value select a).FirstOrDefault();
                    var oCal = (from a in dbHrPayroll.MstLeaveCalendar where (a.FlgActive != null ? a.FlgActive : false) == true select a).FirstOrDefault();
                    var oEmplLeaves = (from a in dbHrPayroll.MstEmployeeLeaves
                                       where a.EmpID == oEmp.ID
                                       //&& a.FromDt == oCal.StartDate 
                                       && a.LeaveCalCode == oCal.Code
                                       select a).ToList();
                    foreach (var OneLeave in oEmplLeaves)
                    {

                        //if (OneLeave.MstLeaveType.Code.Trim().ToLower() == "casual" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "sick" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "annual" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "absent")
                        //{
                        EmployeeLeaves oEmployee = new EmployeeLeaves(oEmp.EmpID, OneLeave.MstLeaveType.Code, oPeriod);
                        if (oEmployee.Balance >= 0)
                        {
                            oEmployeeLeaveCollection.Add(oEmployee);
                        }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void FillEmployeeLeaveBalance()
        {
            try
            {
                oEmployeeLeaveCollection.Clear();
                for (int i = 0; i < grdEmployees.RowCount; i++)
                {
                    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode.Trim() select a).FirstOrDefault();
                    string value = cmbPeriod.Value.Trim();
                    if (string.IsNullOrEmpty(value) || value == "0") return;
                    var oPeriod = (from a in dbHrPayroll.CfgPeriodDates where a.ID.ToString() == value select a).FirstOrDefault();
                    var oCal = (from a in dbHrPayroll.MstCalendar where (a.FlgActive != null ? a.FlgActive : false) == true select a).FirstOrDefault();
                    var oEmplLeaves = (from a in dbHrPayroll.MstEmployeeLeaves
                                       where a.EmpID == oEmp.ID
                                       //&& a.FromDt == oCal.StartDate 
                                       && a.LeaveCalCode == oCal.Code
                                       select a).ToList();
                    foreach (var OneLeave in oEmplLeaves)
                    {

                        //if (OneLeave.MstLeaveType.Code.Trim().ToLower() == "casual" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "sick" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "annual" || OneLeave.MstLeaveType.Code.Trim().ToLower() == "absent")
                        //{
                        EmployeeLeaves oEmployee = new EmployeeLeaves(oEmp.EmpID, OneLeave.MstLeaveType.Code, oPeriod);
                        if (oEmployee.Balance >= 0)
                        {
                            oEmployeeLeaveCollection.Add(oEmployee);
                        }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private decimal GetLeaveCountOnMinLeaves(string pLeaveHour, string pShiftHour)
        {
            decimal retValue = 0;
            try
            {
                string[] arrLeaveHour = pLeaveHour.Split(':');
                int LeaveHour = (Convert.ToInt32(arrLeaveHour[0]) * 60) + (Convert.ToInt32(arrLeaveHour[1]));
                string[] arrShiftHour = pShiftHour.Split(':');
                int ShiftHour = (Convert.ToInt32(arrShiftHour[0]) * 60) + (Convert.ToInt32(arrShiftHour[1]));
                decimal LeaveCount = (ShiftHour - LeaveHour) / Convert.ToDecimal(ShiftHour);
                retValue = 1 - LeaveCount;
            }
            catch (Exception ex)
            {
                logger(ex);
                retValue = 0;
            }
            return retValue;
        }

        private int CalculateTimeDifference(string pFrom, string pTo)
        {
            int retMin = 0;
            try
            {
                string[] arrpFrom = pFrom.Split(':');
                string[] arrpTo = pTo.Split(':');

                if (arrpFrom.Count() != 2 || arrpTo.Count() != 2)
                {
                    return retMin;
                }
                retMin = ((Convert.ToInt32(arrpFrom[0]) * 60) + Convert.ToInt32(arrpFrom[1])) - ((Convert.ToInt32(arrpTo[0]) * 60) + Convert.ToInt32(arrpTo[1]));
            }
            catch (Exception ex)
            {
                logger(ex);
            }
            return retMin;
        }

        private int CalculateTimeDifferenceOverLap(string pFrom, string pTo, Boolean flgShiftOverlap, Boolean flgActualOverlap)
        {
            int retMin = 0, DurinMin = 0;
            try
            {
                string[] arrpFrom = pFrom.Split(':');
                string[] arrpTo = pTo.Split(':');

                if (arrpFrom.Count() != 2 || arrpTo.Count() != 2)
                {
                    return retMin;
                }
                int ShiftTimeDurantion = 0, OutTimeDur = 0;
                if (flgShiftOverlap)
                {
                    ShiftTimeDurantion = (((int.Parse(arrpFrom[0]) * 60) + (24 * 60)) + int.Parse(arrpFrom[1]));
                }
                else
                {
                    ShiftTimeDurantion = ((int.Parse(arrpFrom[0]) * 60) + int.Parse(arrpFrom[1]));
                }
                if (flgActualOverlap)
                {
                    OutTimeDur = (((int.Parse(arrpTo[0]) * 60) + (24 * 60)) + int.Parse(arrpTo[1]));
                }
                else
                {
                    OutTimeDur = ((int.Parse(arrpTo[0]) * 60) + int.Parse(arrpTo[1]));
                }
                DurinMin = OutTimeDur - ShiftTimeDurantion;
                if (DurinMin < 0)
                {
                    DurinMin = 0;
                }

                //retMin = ((Convert.ToInt32(arrpFrom[0]) * 60) + Convert.ToInt32(arrpFrom[1])) - ((Convert.ToInt32(arrpTo[0]) * 60) + Convert.ToInt32(arrpTo[1]));
            }
            catch (Exception ex)
            {
                logger(ex);
            }
            return DurinMin;
        }

        private void CalculatingLateInOrEarlyOut()
        {
            try
            {
                prog = null;
                //prog.Value = 0;
                totalCnt = 0;
                //grdAttendance.FlushToDataSource();
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                int TotalLateIn_EarlyOut = 0;
                int DateCountDR_01 = 0;
                int DateCountDR_02 = 0;
                int DateCountDR_03 = 0;
                string strStatus = "", strDeductionType = "", strLeaveHour = "", strAttID = "", strDeductionRuleType = ""
                    , strDescription = "", strOTHour = "", strleaveDate = "", strShiftHours = "", strDay = "", GetBreakTime = "00:00";
                //for (int i = 0; i < dtEmployees.Rows.Count; i++)
                //{
                //    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                //    string strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                //    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                //    if (ifSelected)
                //    {
                //        if (!ht.ContainsKey(strEmpCode))
                //        {
                //            ht.Add(strEmpCode, 0);
                //            oSelectedEmployee.Add(strEmpCode);
                //        }
                //    }
                //}

                //List<string> okeys = new List<string>();
                //foreach (System.Collections.DictionaryEntry de in ht)
                //    okeys.Add(de.Key.ToString());
                totalCnt = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Deduction Rules", totalCnt, false);
                prog.Value = 0;
                for (int k = 0; k < oSelectedEmployee.Count; k++)
                //foreach (var key in okeys)
                {
                    prog.Value += 1;
                    for (int j = 0; j < dtAttendance.Rows.Count; j++)
                    {
                        string strEmpCode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, j));
                        //if (strEmpCode == key.ToString())
                        if (strEmpCode == oSelectedEmployee[k].ToString())
                        {
                            string strLateInEarlyOut = dtAttendance.GetValue(clStatus.DataBind.Alias, j);
                            if (strLateInEarlyOut.Trim().ToLower() == "latein"
                                            || strLateInEarlyOut.Trim().ToLower() == "latein early out"
                                            || strLateInEarlyOut.Trim().ToLower() == "early out")
                            {
                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.0000}", Convert.ToDecimal(0.0000)));
                                dtAttendance.SetValue("IsNewLeave", j, "N");
                                dtAttendance.SetValue("LevType", j, "");
                            }
                        }
                    }
                    //foreach (var key in okeys)
                    //{
                    DateCountDR_01 = 0;
                    DateCountDR_02 = 0;
                    DateCountDR_03 = 0;
                    TotalLateIn_EarlyOut = 0;
                    var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule where a.FlgLateInTriger == true select a).FirstOrDefault();

                    for (int i = 0; i < dtAttendance.Rows.Count; i++)
                    {
                        decimal decBreakTime = 0;
                        decimal dectShiftHrs = 0;
                        string strEmpCode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                        //if (strEmpCode == key.ToString())
                        if (strEmpCode == oSelectedEmployee[k].ToString())
                        {
                            decimal LeaveCount = 0M;
                            strDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i);
                            strLeaveHour = dtAttendance.GetValue(clLeaveHour.DataBind.Alias, i);
                            strStatus = dtAttendance.GetValue(clStatus.DataBind.Alias, i);
                            strAttID = Convert.ToString(dtAttendance.GetValue("Id", i));
                            strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, i));
                            strOTHour = Convert.ToString(dtAttendance.GetValue(clOTHour.DataBind.Alias, i));
                            strleaveDate = Convert.ToString(dtAttendance.GetValue(clTodayDate.DataBind.Alias, i));
                            strShiftHours = Convert.ToString(dtAttendance.GetValue(clShiftHours.DataBind.Alias, i));
                            strDay = Convert.ToString(dtAttendance.GetValue(clDay.DataBind.Alias, i));
                            string strShiftHour = Convert.ToString(dtAttendance.GetValue(clShiftHours.DataBind.Alias, i));
                            var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                       where a.Id == Convert.ToInt32(strAttID) && a.MstEmployee.EmpID == strEmpCode
                                                       select a).FirstOrDefault();
                            string shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                            string strBreakTimeName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;

                            var oShiftDetails = (from a in dbHrPayroll.MstShiftDetails
                                                 where a.ShiftID == oAttendanceRegister.ShiftID
                                                 && a.Day == oAttendanceRegister.DateDay
                                                 select a).FirstOrDefault();
                            if (oShiftDetails != null)
                            {
                                GetBreakTime = oShiftDetails.BreakTime;
                            }
                            decBreakTime = CalculateStringTime(GetBreakTime);
                            dectShiftHrs = CalculateStringTime(strShiftHours);
                            if (dectShiftHrs > decBreakTime)
                            {
                                double netShiftHours = Convert.ToDouble(dectShiftHrs - decBreakTime);

                                TimeSpan ShortDuration = TimeSpan.FromMinutes(netShiftHours);
                                string output = ShortDuration.ToString("h\\:mm");
                                int hrs = ShortDuration.Hours;
                                int mint = ShortDuration.Minutes;
                                strShiftHours = string.Format("{0:00}", hrs) + ':' + string.Format("{0:00}", mint);
                            }
                            if (!string.IsNullOrEmpty(strStatus) && !string.IsNullOrEmpty(strDeductionType))
                            {
                                if (strStatus.Trim().ToLower() == "latein"
                                    || strStatus.Trim().ToLower() == "latein early out"
                                    || strStatus.Trim().ToLower() == "early out")
                                {
                                    var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLeaveHour, shiftName).FirstOrDefault();
                                    if (oDedRule != null)
                                    {
                                        string deductionRuleType = oDedRule.DeductionRuleType;
                                        int StrGracePeriod = Convert.ToInt32(oDedRule.GracePeriod);
                                        strDeductionRuleType = oDedRule.DeductionRuleType.Trim();
                                        if (oDedRule.Code == "DR_01")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_01 += 1;
                                        }
                                        else if (oDedRule.Code == "DR_02")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_02 += 1;
                                        }
                                        else if (oDedRule.Code == "DR_03")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_03 += 1;
                                        }

                                        if (CompanyName.ToLower() == "phimc" || CompanyName.ToLower() == "primerenergy" || CompanyName.ToLower() == "interwood")
                                        {
                                            if (oAttendanceRules.FlgLateInTriger.GetValueOrDefault() == true)
                                            {
                                                if (TotalLateIn_EarlyOut >= oAttendanceRule.LateInCountTriger)
                                                {
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    if (CompanyName.ToLower() == "interwood")
                                                {
                                                        if (oDedRule.Code == "DR_01")
                                                        {
                                                            if (DateCountDR_01 == oDedRule.GracePeriod)
                                                {
                                                                LeaveCount = Convert.ToDecimal(GetLeaveCountOnMinLeaves(strLeaveHour, strShiftHours));
                                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", LeaveCount));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                                            else if (TotalLateIn_EarlyOut >= oAttendanceRule.LateInCountTriger && DateCountDR_01 >= oDedRule.GracePeriod)
                                                {
                                                                LeaveCount = Convert.ToDecimal(GetLeaveCountOnMinLeaves(strLeaveHour, strShiftHours));
                                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", LeaveCount));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                            }
                                                        else
                                            {
                                                            if (oDedRule.Code != "DR_01")
                                                            {
                                                                LeaveCount = Convert.ToDecimal(GetLeaveCountOnMinLeaves(strLeaveHour, strShiftHours));
                                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", LeaveCount));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                                        }
                                            }
                                                    else
                                            {
                                                        dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(1)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                        }
                                                else if (DateCountDR_01 == oDedRule.GracePeriod && oDedRule.Code == "DR_01")
                                            {
                                                DateCountDR_01 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                                else if (DateCountDR_02 == oDedRule.GracePeriod && oDedRule.Code == "DR_02")
                                            {
                                                DateCountDR_02 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    if (CompanyName.ToLower() == "interwood")
                                                    {
                                                        LeaveCount = Convert.ToDecimal(GetLeaveCountOnMinLeaves(strLeaveHour, strShiftHours));
                                                        dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", LeaveCount));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                    }
                                                    else
                                                    {
                                                        dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                        dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                        dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                    }

                                                }
                                                else if (DateCountDR_03 == oDedRule.GracePeriod && oDedRule.Code == "DR_03")
                                                {
                                                    DateCountDR_03 = 0;
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    if (CompanyName.ToLower() == "interwood")
                                                    {
                                                        LeaveCount = Convert.ToDecimal(GetLeaveCountOnMinLeaves(strLeaveHour, strShiftHours));
                                                        dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", LeaveCount));
                                                        dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                        dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                                    else
                                            {
                                                        dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                                }
                                            }
                                            else if (DateCountDR_01 == oDedRule.GracePeriod && oDedRule.Code == "DR_01")
                                            {
                                                DateCountDR_01 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_02 == oDedRule.GracePeriod && oDedRule.Code == "DR_02")
                                            {
                                                DateCountDR_02 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_03 == oDedRule.GracePeriod && oDedRule.Code == "DR_03")
                                            {
                                                DateCountDR_03 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                        }
                                        else
                                        {
                                            if (DateCountDR_01 == oDedRule.GracePeriod && oDedRule.Code == "DR_01")
                                            {
                                                DateCountDR_01 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                               // if (LeaveTypeCode == null) continue;
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_02 == oDedRule.GracePeriod && oDedRule.Code == "DR_02")
                                            {
                                                DateCountDR_02 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_03 == oDedRule.GracePeriod && oDedRule.Code == "DR_03")
                                            {
                                                DateCountDR_03 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.0000}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    prog.Text = "(" + prog.Value.ToString() + " of " + totalCnt.ToString() + " ) Deduction Rule of EmpID--> " + oSelectedEmployee[k].ToString() + "";
                }
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
                //grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
                oApplication.StatusBar.SetText("CalculatingLateInOrEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void CalculatingLateInOrEarlyOutOld()
        {
            try
            {
                //grdAttendance.FlushToDataSource();
                DateTime startDate = DateTime.MinValue;
                DateTime EndDate = DateTime.MinValue;
                startDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                EndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                int TotalLateIn_EarlyOut = 0;
                int DateCountDR_01 = 0;
                int DateCountDR_02 = 0;
                int DateCountDR_03 = 0;
                string strStatus = "", strDeductionType = "", strLeaveHour = "", strAttID = ""
                    , strDescription = "", strOTHour = "", strleaveDate = "";
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    string strEmpName = Convert.ToString(dtEmployees.GetValue("EmpName", i));
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        if (!ht.ContainsKey(strEmpCode))
                        {
                            ht.Add(strEmpCode, 0);

                        }
                    }
                }
                List<string> okeys = new List<string>();
                foreach (System.Collections.DictionaryEntry de in ht)
                    okeys.Add(de.Key.ToString());
                for (int j = 0; j < dtAttendance.Rows.Count; j++)
                {
                    string strLateInEarlyOut = dtAttendance.GetValue(clStatus.DataBind.Alias, j);
                    if (strLateInEarlyOut.Trim().ToLower() == "latein"
                                    || strLateInEarlyOut.Trim().ToLower() == "latein early out"
                                    || strLateInEarlyOut.Trim().ToLower() == "early out")
                    {
                        dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(0.00)));
                        dtAttendance.SetValue("IsNewLeave", j, "N");
                        dtAttendance.SetValue("LevType", j, "");
                    }
                }
                foreach (var key in okeys)
                {
                    DateCountDR_01 = 0;
                    DateCountDR_02 = 0;
                    DateCountDR_03 = 0;
                    TotalLateIn_EarlyOut = 0;
                    var oAttendanceRule = (from a in dbHrPayroll.MstAttendanceRule where a.FlgLateInTriger == true select a).FirstOrDefault();

                    for (int i = 0; i < dtAttendance.Rows.Count; i++)
                    {
                        string strEmpCode = Convert.ToString(dtAttendance.GetValue(clEmpCode.DataBind.Alias, i));
                        if (strEmpCode == key.ToString())
                        {
                            strDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, i);
                            strLeaveHour = dtAttendance.GetValue(clLeaveHour.DataBind.Alias, i);
                            strStatus = dtAttendance.GetValue(clStatus.DataBind.Alias, i);
                            strAttID = Convert.ToString(dtAttendance.GetValue("Id", i));
                            strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, i));
                            strOTHour = Convert.ToString(dtAttendance.GetValue(clOTHour.DataBind.Alias, i));
                            strleaveDate = Convert.ToString(dtAttendance.GetValue(clTodayDate.DataBind.Alias, i));
                            string strShiftHour = Convert.ToString(dtAttendance.GetValue(clShiftHours.DataBind.Alias, i));
                            var oAttendanceRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                       where a.Id == Convert.ToInt32(strAttID) && a.MstEmployee.EmpID == strEmpCode
                                                       select a).FirstOrDefault();
                            string shiftName = string.IsNullOrEmpty(oAttendanceRegister.MstShifts.Description) ? "" : oAttendanceRegister.MstShifts.Description;
                            if (!string.IsNullOrEmpty(strStatus) && !string.IsNullOrEmpty(strDeductionType))
                            {
                                if (strStatus.Trim().ToLower() == "latein"
                                    || strStatus.Trim().ToLower() == "latein early out"
                                    || strStatus.Trim().ToLower() == "early out")
                                {
                                    var oAttendanceRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                                    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(strLeaveHour, shiftName).FirstOrDefault();
                                    if (oDedRule != null)
                                    {
                                        string deductionRuleType = oDedRule.DeductionRuleType;
                                        int StrGracePeriod = Convert.ToInt32(oDedRule.GracePeriod);
                                        if (oDedRule.Code == "DR_01")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_01 += 1;
                                        }
                                        else if (oDedRule.Code == "DR_02")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_02 += 1;
                                        }
                                        else if (oDedRule.Code == "DR_03")
                                        {
                                            TotalLateIn_EarlyOut += 1;
                                            DateCountDR_03 += 1;
                                        }

                                        if (CompanyName.ToLower() == "phimc")
                                        {
                                            if (oAttendanceRules.FlgLateInTriger.GetValueOrDefault() == true)
                                            {
                                                if (TotalLateIn_EarlyOut >= oAttendanceRule.LateInCountTriger)
                                                {
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(1)));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                                else if (DateCountDR_01 == oDedRule.GracePeriod)
                                                {
                                                    DateCountDR_01 = 0;
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                                else if (DateCountDR_02 == oDedRule.GracePeriod)
                                                {
                                                    DateCountDR_02 = 0;
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                                else if (DateCountDR_03 == oDedRule.GracePeriod)
                                                {
                                                    DateCountDR_03 = 0;
                                                    string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                    dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                    dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                    dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                                }
                                            }
                                            else if (DateCountDR_01 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_01 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_02 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_02 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_03 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_03 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                        }
                                        else
                                        {
                                            if (DateCountDR_01 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_01 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_02 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_02 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                            else if (DateCountDR_03 == oDedRule.GracePeriod)
                                            {
                                                DateCountDR_03 = 0;
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedRule.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevCount", i, string.Format("{0:0.00}", Convert.ToDecimal(oDedRule.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", i, "Y");
                                                dtAttendance.SetValue("LevType", i, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //grdAttendance.LoadFromDataSource();
            }
            catch (Exception Ex)
            {
                oApplication.StatusBar.SetText("CalculatingLateInOrEarlyOut Msg : " + Ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        private void ApplyDeductionsSSL()
        {
            try
            {
                Program.oOTSlabs.Clear();
                for (int i = 0; i < dtEmployees.Rows.Count; i++)
                {
                    string strEmpCode = Convert.ToString(dtEmployees.GetValue("EmpCode", i));
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(i + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        List<string> oCountDR1 = new List<string>();
                        List<string> oCountDR2 = new List<string>();
                        List<string> oCountDR3 = new List<string>();
                        int PresentDays = 0;
                        int minutes = 0;
                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                        {
                            string attEmp = dtAttendance.GetValue("EmpCode", j);
                            if (strEmpCode == attEmp)
                            {
                                string strDeductionType = dtAttendance.GetValue(clDRType.DataBind.Alias, j);
                                string strLeaveHour = dtAttendance.GetValue(clLeaveHour.DataBind.Alias, j);
                                string strStatus = dtAttendance.GetValue(clStatus.DataBind.Alias, j);
                                string strAttID = Convert.ToString(dtAttendance.GetValue("Id", j));
                                string strDescription = Convert.ToString(dtAttendance.GetValue(clDescription.DataBind.Alias, j));
                                string strOTHour = Convert.ToString(dtAttendance.GetValue(clOTHour.DataBind.Alias, j));
                                string strTimeIn = Convert.ToString(dtAttendance.GetValue(clTimeIn.DataBind.Alias, j));
                                string strTimeOut = Convert.ToString(dtAttendance.GetValue(clTimeOut.DataBind.Alias, j));
                                string strShiftHour = Convert.ToString(dtAttendance.GetValue(clShiftHours.DataBind.Alias, j));
                                if (!string.IsNullOrEmpty(strStatus) && !string.IsNullOrEmpty(strDeductionType))
                                {
                                    if (strStatus.Trim() == "LateIn" || strStatus.Trim() == "Early Out" || strStatus.Trim() == "LateIn Early Out")
                                    {
                                        switch (strDeductionType)
                                        {
                                            case "DR_01":
                                                oCountDR1.Add(strAttID);
                                                break;
                                            case "DR_02":
                                                oCountDR2.Add(strAttID);
                                                break;
                                            case "DR_03":
                                                oCountDR3.Add(strAttID);
                                                break;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(strTimeIn) && !string.IsNullOrEmpty(strTimeOut))
                                {
                                    if (strTimeIn.Trim() != "00:00" && strTimeOut.Trim() != "00:00")
                                    {
                                        PresentDays++;
                                    }
                                }
                                if (!string.IsNullOrEmpty(strOTHour))
                                {
                                    if (strOTHour != "00:00")
                                    {
                                        string[] arrValue = strOTHour.Split(':');
                                        minutes += (Convert.ToInt32(arrValue[0]) * 60) + (Convert.ToInt32(arrValue[1]));
                                    }
                                }
                            }
                        }

                        var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == strEmpCode select a).FirstOrDefault();
                        if (oEmp.OTSlabs != null)
                        {
                            Program.PresentOTSlab OTData = new Program.PresentOTSlab();
                            OTData.EmpCode = strEmpCode;
                            OTData.OTmins = minutes;
                            if (PresentDays <= 26)
                            {
                                OTData.PresentDays = (PresentDays * 60);
                            }
                            else
                            {
                                OTData.PresentDays = 26 * 60;
                            }
                            Program.oOTSlabs.Add(OTData);
                        }

                        var oDedR1 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_01" select a).FirstOrDefault();
                        var oDedR2 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_02" select a).FirstOrDefault();
                        var oDedR3 = (from a in dbHrPayroll.MstDeductionRules where a.Code == "DR_03" select a).FirstOrDefault();
                        var oAttRules = (from a in dbHrPayroll.MstAttendanceRule select a).FirstOrDefault();
                        if (oAttRules != null)
                        {
                            if (Convert.ToBoolean(oAttRules.FlgConsecutiveLeave))
                            {
                                for (int LoopGrace = 0; LoopGrace < oDedR1.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR1.Count > 0)
                                        oCountDR1.RemoveAt(oCountDR1.Count - 1);
                                }
                                for (int LoopGrace = 0; LoopGrace < oDedR2.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR2.Count > 0)
                                        oCountDR2.RemoveAt(oCountDR2.Count - 1);
                                }
                                for (int LoopGrace = 0; LoopGrace < oDedR3.GracePeriod; LoopGrace++)
                                {
                                    if (oCountDR3.Count > 0)
                                        oCountDR3.RemoveAt(oCountDR3.Count - 1);
                                }
                                //Deduction Rule # 1
                                if ((oCountDR1.Count + oDedR1.GracePeriod) > oDedR1.GracePeriod && oDedR1.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR1)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR1.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR1.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 2
                                if ((oCountDR2.Count + oDedR2.GracePeriod) > oDedR2.GracePeriod && oDedR2.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR2)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR2.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR2.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 3
                                if ((oCountDR3.Count + oDedR3.GracePeriod) > oDedR3.GracePeriod && oDedR3.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR3)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && string.IsNullOrEmpty(alreadyEnteredleave))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (oCountDR1.Count > oDedR1.GracePeriod && oDedR1.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR1)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && (string.IsNullOrEmpty(alreadyEnteredleave) || alreadyEnteredleave == "-1"))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR1.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR1.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 2
                                if (oCountDR2.Count > oDedR2.GracePeriod && oDedR2.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR2)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && (string.IsNullOrEmpty(alreadyEnteredleave) || alreadyEnteredleave == "-1"))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR2.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR2.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                                //For Deduction 3
                                if (oCountDR3.Count > oDedR3.GracePeriod && oDedR3.GracePeriod >= 0)
                                {
                                    foreach (string strAttID in oCountDR3)
                                    {
                                        for (int j = 0; j < dtAttendance.Rows.Count; j++)
                                        {
                                            string loopattid = Convert.ToString(dtAttendance.GetValue("Id", j));
                                            string strShiftHour = Convert.ToString(dtAttendance.GetValue("SfHours", j));
                                            string alreadyEnteredleave = Convert.ToString(dtAttendance.GetValue("LevType", j));
                                            if (loopattid == strAttID && (string.IsNullOrEmpty(alreadyEnteredleave) || alreadyEnteredleave == "-1"))
                                            {
                                                string LeaveHoursApplied = CalculateHalfShiftHours(strShiftHour);
                                                string LeaveTypeCode = (from a in dbHrPayroll.MstLeaveType where a.ID == oDedR3.LeaveType select a.Code).FirstOrDefault();
                                                dtAttendance.SetValue("LevHours", j, LeaveHoursApplied);
                                                dtAttendance.SetValue("LevCount", j, string.Format("{0:0.00}", Convert.ToDecimal(oDedR3.LeaveCount)));
                                                dtAttendance.SetValue("IsNewLeave", j, "Y");
                                                dtAttendance.SetValue("LevType", j, LeaveTypeCode);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oApplication.StatusBar.SetText("ApplyDeductionsSSL : " + ex.Message, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error);
            }
        }

        #endregion

        #region UAE Attendance Working

        private int ConvertTimeMinutes(string pTime, bool DayToggle)
        {
            int retValue = 0;
            try
            {
                if (!string.IsNullOrEmpty(pTime))
                {
                    string[] arr = pTime.Split(':');
                    if (DayToggle)
                    {
                        retValue = (Convert.ToInt32(arr[0]) + 24) * 60 + Convert.ToInt32(arr[1]);
                    }
                    else
                    {
                        retValue = Convert.ToInt32(arr[0]) * 60 + Convert.ToInt32(arr[1]);
                    }
                }
                else
                {
                    retValue = 0;
                }
            }
            catch (Exception ex)
            {
                retValue = 0;
                logger(ex);
            }
            return retValue;
        }

        private string GetWorkHour(string In, string Out, bool DayChange)
        {
            string WorkHour = "00:00";
            try
            {
                int decIn = 0, decOut = 0, duration = 0;
                if (DayChange)
                {
                    string[] arrIn = In.Split(':');
                    decIn = Convert.ToInt32(arrIn[0]) * 60 + Convert.ToInt32(arrIn[1]);
                    string[] arrOut = Out.Split(':');
                    decOut = (Convert.ToInt32(arrOut[0]) + 24) * 60 + Convert.ToInt32(arrOut[1]);
                    duration = decOut - decIn;

                    if (duration < 0)
                    {
                        WorkHour = "00:00";
                    }
                    else
                    {
                        int HrsDur = duration / 60;
                        int MinDur = duration % 60;
                        WorkHour = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
                else
                {
                    string[] arrIn = In.Split(':');
                    decIn = Convert.ToInt32(arrIn[0]) * 60 + Convert.ToInt32(arrIn[1]);
                    string[] arrOut = Out.Split(':');
                    decOut = Convert.ToInt32(arrOut[0]) * 60 + Convert.ToInt32(arrOut[1]);
                    duration = decOut - decIn;

                    if (duration < 0)
                    {
                        WorkHour = "00:00";
                    }
                    else
                    {
                        int HrsDur = duration / 60;
                        int MinDur = duration % 60;
                        WorkHour = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    }
                }
            }
            catch (Exception ex)
            {
                logger(ex);
                WorkHour = "00:00";
            }
            return WorkHour;
        }

        private void GetEarlyLateIn(string In, string ShiftIn, out string EarlyIn, out string LateIn)
        {
            EarlyIn = "00:00";
            LateIn = "00:00";
            try
            {
                int decIn = 0, decShiftIn = 0, duration = 0;
                string[] arrIn = In.Split(':');
                decIn = Convert.ToInt32(arrIn[0]) * 60 + Convert.ToInt32(arrIn[1]);
                string[] arrShiftIn = ShiftIn.Split(':');
                decShiftIn = Convert.ToInt32(arrShiftIn[0]) * 60 + Convert.ToInt32(arrShiftIn[1]);
                duration = decShiftIn - decIn;
                if (duration == 0)
                {
                    EarlyIn = "00:00";
                    LateIn = "00:00";
                }
                else if (duration > 0)
                {
                    int HrsDur = Math.Abs(duration) / 60;
                    int MinDur = Math.Abs(duration) % 60;
                    EarlyIn = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    LateIn = "00:00";
                }
                else if (duration < 0)
                {
                    int HrsDur = Math.Abs(duration) / 60;
                    int MinDur = Math.Abs(duration) % 60;
                    EarlyIn = "00:00";
                    LateIn = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void GetEarlyLateOut(string Out, string ShiftOut, out string EarlyOut, out string LateOut)
        {
            EarlyOut = "00:00";
            LateOut = "00:00";
            try
            {
                int decIn = 0, decShiftIn = 0, duration = 0;
                string[] arrIn = Out.Split(':');
                decIn = Convert.ToInt32(arrIn[0]) * 60 + Convert.ToInt32(arrIn[1]);
                string[] arrShiftIn = ShiftOut.Split(':');
                decShiftIn = Convert.ToInt32(arrShiftIn[0]) * 60 + Convert.ToInt32(arrShiftIn[1]);
                duration = decShiftIn - decIn;
                if (duration == 0)
                {
                    EarlyOut = "00:00";
                    LateOut = "00:00";
                }
                else if (duration > 0)
                {
                    int HrsDur = Math.Abs(duration) / 60;
                    int MinDur = Math.Abs(duration) % 60;
                    EarlyOut = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                    LateOut = "00:00";
                }
                else if (duration < 0)
                {
                    int HrsDur = Math.Abs(duration) / 60;
                    int MinDur = Math.Abs(duration) % 60;
                    EarlyOut = "00:00";
                    LateOut = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private string CalculateLeaveHoursForShifts(string pWorkHour, string pShiftHour)
        {
            string LeaveHours = "00:00";
            try
            {
                int decWH = 0, decShiftWH = 0, duration = 0;
                string[] arrWH = pWorkHour.Split(':');
                decWH = Convert.ToInt32(arrWH[0]) * 60 + Convert.ToInt32(arrWH[1]);
                string[] arrShiftHour = pShiftHour.Split(':');
                decShiftWH = Convert.ToInt32(arrShiftHour[0]) * 60 + Convert.ToInt32(arrShiftHour[1]);
                duration = decShiftWH - decWH;
                if (duration > 0)
                {
                    int HrsDur = duration / 60;
                    int MinDur = duration % 60;
                    LeaveHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                }
                else
                {
                    LeaveHours = "00:00";
                }
            }
            catch (Exception ex)
            {
                logger(ex);
                LeaveHours = "00:00";
            }
            return LeaveHours;
        }

        private string CalculateOTHours(string pWorkHour, string pShiftHour)
        {
            string OTHours = "00:00";
            try
            {
                int decWH = 0, decShiftWH = 0, duration = 0;
                string[] arrWH = pWorkHour.Split(':');
                decWH = Convert.ToInt32(arrWH[0]) * 60 + Convert.ToInt32(arrWH[1]);
                string[] arrShiftHour = pShiftHour.Split(':');
                decShiftWH = Convert.ToInt32(arrShiftHour[0]) * 60 + Convert.ToInt32(arrShiftHour[1]);
                duration = decWH - decShiftWH;
                if (duration > 0)
                {
                    int HrsDur = duration / 60;
                    int MinDur = duration % 60;
                    OTHours = HrsDur.ToString().PadLeft(2, '0') + ":" + MinDur.ToString().PadLeft(2, '0');
                }
                else
                {
                    OTHours = "00:00";
                }
            }
            catch (Exception ex)
            {
                logger(ex);
                OTHours = "00:00";
            }
            return OTHours;
        }

        private void FillSelectedEmployee()
        {
            try
            {
                oSelectedEmployee.Clear();
                for (int j = 0; j < dtEmployees.Rows.Count; j++)
                {
                    bool ifSelected = (grdEmployees.Columns.Item("isSel").Cells.Item(j + 1).Specific as SAPbouiCOM.CheckBox).Checked;
                    if (ifSelected)
                    {
                        string empid = string.Empty;
                        empid = (grdEmployees.Columns.Item("EmpCode").Cells.Item(j + 1).Specific as SAPbouiCOM.EditText).Value;
                        oSelectedEmployee.Add(empid);
                    }
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
        }

        private void ProcessingAttendance()
        {
            DateTime PeriodStartDate, PeriodEndDate;
            bool flgSandwich = false;
            int TotalEmployees = 0;
            try
            {
                PeriodStartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                PeriodEndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                flgSandwich = (from a in dbHrPayroll.MstAttendanceRule
                               select a.FlgSandwichLeaves).FirstOrDefault() ?? false;
                FillSelectedEmployee();
                TotalEmployees = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Attendance Processing", TotalEmployees, false);
                prog.Value = 0;
                for (int i = 0; i < oSelectedEmployee.Count; i++)
                {
                    string EmpName, EmpCode;
                    int AttendanceCount = 0;
                    System.Windows.Forms.Application.DoEvents();
                    prog.Value += 1;
                    var oEmp = (from a in dbHrPayroll.MstEmployee
                                where a.EmpID == oSelectedEmployee[i]
                                select a).FirstOrDefault();
                    if (oEmp == null)
                    {
                        MsgWarning("Employee not foud.");
                        continue;
                    }
                    EmpCode = oEmp.EmpID;
                    EmpName = oEmp.FirstName + " " + oEmp.MiddleName + " " + oEmp.LastName;

                    for (DateTime TodayDate = PeriodStartDate; TodayDate <= PeriodEndDate; TodayDate = TodayDate.AddDays(1))
                    {
                        string TimeIn = "", TimeOut = "", WorkHours = "", DayName = "", EarlyIn = "", LateIn = "", EarlyOut = "", LateOut = "";
                        string ShiftCode = "", ShiftName = "", ShiftDay = "", ShiftIn = "", ShiftOut = "", ShiftHour = "";
                        string LeaveHour = "00:00", OvertimeHours = "00:00", DeductionRule = "", Remarks = "", LineComments = "";
                        string LeaveType = "-1", OvertimeType = "-1";
                        bool flgShiftOverlap = false, flgShiftExpectedOverlap = false;
                        bool flgProcessed = false, flgPosted = false, flgNewLeave = false;
                        bool flgActualOverlap = false, flgIsWeekend = false, flgIsOffDay = false, flgIsPublicHoliday = false;
                        bool flgShiftOT = false, flgShiftOTOffDay = false, flgShiftOTHoliday = false;
                        int ShiftOTId = 0, ShiftOTOffDayId = 0, ShiftOTHolidayId = 0;
                        decimal decTimeIn = 0, LeaveCount = 0;

                        flgProcessed = (from a in dbHrPayroll.TrnsAttendanceRegister
                                        where a.Date == TodayDate && a.EmpID == oEmp.ID
                                        select a.Processed).FirstOrDefault() ?? false;

                        flgPosted = (from a in dbHrPayroll.TrnsAttendanceRegister
                                     where a.Date == TodayDate && a.EmpID == oEmp.ID
                                     select a.FlgPosted).FirstOrDefault() ?? false;

                        if (flgPosted)
                        {
                            MsgWarning("Attendance already posted @ Date: " + TodayDate.ToString("dd/MM/yyyy") + " for EmpCode : " + EmpCode);
                            continue;
                        }
                        if (!flgProcessed)
                        {
                            #region Attendance From Temp
                            TrnsTempAttendance oTempTimeIn = null;
                            TrnsTempAttendance oTempTimeOut = null;
                            //Case 1 
                            oTempTimeIn = (from a in dbHrPayroll.TrnsTempAttendance
                                           where a.PunchedDate == TodayDate
                                           && a.In_Out == "1"
                                           orderby a.PunchedDate, a.PunchedTime ascending
                                           select a).FirstOrDefault();

                            TimeIn = oTempTimeIn != null ? oTempTimeIn.PunchedTime : "";
                            DayName = Convert.ToString(TodayDate.DayOfWeek);

                            #region Shift Decision

                            if (!string.IsNullOrEmpty(TimeIn))
                            {
                                decTimeIn = ConvertTimeMinutes(TimeIn, false);
                                var oPayroll = (from a in dbHrPayroll.CfgPayrollDefination
                                                where a.ID == oEmp.PayrollID
                                                select a).FirstOrDefault();
                                List<PayrollShifts> oValidShiftCollection = new List<PayrollShifts>();
                                foreach (var One in oPayroll.CfgPayrollShifts)
                                {
                                    if (!Convert.ToBoolean(One.FlgDefault))
                                    {
                                        var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                      where a.ShiftID == One.ShiftId
                                                      select a).ToList();
                                        foreach (var ShiftDetail in oShift)
                                        {
                                            PayrollShifts oNew = new PayrollShifts();
                                            oNew.ShiftCode = ShiftDetail.MstShifts.Code;
                                            oNew.ShiftDay = ShiftDetail.Day;
                                            oNew.LowerTimeIn = ConvertTimeMinutes(ShiftDetail.StartTime, false) - ConvertTimeMinutes(ShiftDetail.BufferEndTime, false);
                                            oNew.UpperTimeIn = ConvertTimeMinutes(ShiftDetail.StartTime, false) + ConvertTimeMinutes(ShiftDetail.BufferEndTime, false);
                                            oNew.Priority = Convert.ToInt32(One.Priority);
                                            oValidShiftCollection.Add(oNew);
                                        }
                                    }
                                }
                                var DayWiseCollection = (from a in oValidShiftCollection
                                                         where a.ShiftDay == DayName
                                                         orderby a.Priority ascending
                                                         select a).ToList();
                                foreach (var One in DayWiseCollection)
                                {
                                    if (decTimeIn >= One.LowerTimeIn && decTimeIn <= One.UpperTimeIn)
                                    {
                                        ShiftCode = One.ShiftCode;
                                        break;
                                    }

                                }
                                if (string.IsNullOrEmpty(ShiftCode))
                                {
                                    var ShiftID = (from a in dbHrPayroll.CfgPayrollShifts
                                                   where a.CfgPayrollDefination.ID == oEmp.PayrollID
                                                   && (a.FlgDefault == null ? false : a.FlgDefault) == true
                                                   select a).FirstOrDefault();
                                    var oShift = (from a in dbHrPayroll.MstShiftDetails
                                                  where a.ShiftID == ShiftID.ShiftId
                                                  && a.Day == DayName
                                                  select a).FirstOrDefault();
                                    ShiftCode = oShift.MstShifts.Code;
                                }
                            }
                            else
                            {
                                var ShiftID = (from a in dbHrPayroll.CfgPayrollShifts
                                               where a.CfgPayrollDefination.ID == oEmp.PayrollID
                                               && (a.FlgDefault == null ? false : a.FlgDefault) == true
                                               select a).FirstOrDefault();
                                var oShift = (from a in dbHrPayroll.MstShiftDetails
                                              where a.ShiftID == ShiftID.ShiftId
                                              && a.Day == DayName
                                              select a).FirstOrDefault();
                                ShiftCode = oShift.MstShifts.Code;
                            }
                            if (!string.IsNullOrEmpty(ShiftCode))
                            {
                                var oShift = (from a in dbHrPayroll.MstShiftDetails
                                              where a.MstShifts.Code == ShiftCode
                                              && a.Day == DayName
                                              select a).FirstOrDefault();
                                ShiftName = oShift.MstShifts.Description;
                                ShiftDay = oShift.Day;
                                ShiftIn = oShift.StartTime;
                                ShiftOut = oShift.EndTime;
                                ShiftHour = oShift.Duration;
                                flgShiftOverlap = Convert.ToBoolean(oShift.FlgOutOverlap);
                                flgShiftExpectedOverlap = Convert.ToBoolean(oShift.FlgExpectedOut);
                                flgShiftOT = oShift.MstShifts.OverTime ?? false;
                                flgShiftOTOffDay = oShift.MstShifts.FlgOffDayOverTime ?? false;
                                flgShiftOTHoliday = oShift.MstShifts.FlgHoliDayOverTime ?? false;
                                ShiftOTId = oShift.MstShifts.OverTimeID ?? 0;
                                ShiftOTOffDayId = oShift.MstShifts.OffDayOverTime ?? 0;
                                ShiftOTHolidayId = oShift.MstShifts.HoliDayOverTime ?? 0;
                                if (ShiftHour == "00:00")
                                {
                                    flgIsWeekend = true;
                                }
                                if (!string.IsNullOrEmpty(oEmp.EmpCalender))
                                {
                                    SAPbobsCOM.Recordset oRecSet = (SAPbobsCOM.Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
                                    string SQLHolidays = "SELECT \"HldCode\", \"Rmrks\" FROM \"HLD1\" WHERE \"HldCode\" = '" + oEmp.EmpCalender + "' AND \"StrDate\" <= '" + TodayDate.ToString("yyyyMMdd") + "' AND \"EndDate\" >= '" + TodayDate.ToString("yyyyMMdd") + "'";
                                    oRecSet.DoQuery(SQLHolidays);
                                    if (oRecSet.RecordCount > 0)
                                    {
                                        Remarks = oRecSet.Fields.Item(1).Value;
                                        ShiftHour = "00:00";
                                        ShiftIn = "00:00";
                                        ShiftOut = "00:00";
                                        if (Remarks.Contains("OffDay"))
                                        {
                                            flgIsOffDay = true;
                                            flgIsPublicHoliday = false;
                                        }
                                        else
                                        {
                                            flgIsPublicHoliday = true;
                                            flgIsOffDay = true;
                                        }
                                    }
                                }
                            }

                            #endregion

                            flgActualOverlap = false;
                            if (!flgShiftOverlap)
                            {
                                oTempTimeOut = (from a in dbHrPayroll.TrnsTempAttendance
                                                where a.PunchedDate == TodayDate
                                                && a.In_Out == "2"
                                                orderby a.PunchedDate, a.PunchedTime descending
                                                select a).FirstOrDefault();
                            }
                            else
                            {
                                oTempTimeOut = (from a in dbHrPayroll.TrnsTempAttendance
                                                where a.PunchedDate == TodayDate.AddDays(1)
                                                && a.In_Out == "2"
                                                orderby a.PunchedDate, a.PunchedTime ascending
                                                select a).FirstOrDefault();
                                flgActualOverlap = true;
                            }
                            if (oTempTimeOut == null && flgShiftExpectedOverlap)
                            {
                                oTempTimeOut = (from a in dbHrPayroll.TrnsTempAttendance
                                                where a.PunchedDate == TodayDate.AddDays(1)
                                                && a.In_Out == "2"
                                                orderby a.PunchedDate, a.PunchedTime ascending
                                                select a).FirstOrDefault();
                                flgActualOverlap = true;
                            }


                            TimeOut = oTempTimeOut != null ? oTempTimeOut.PunchedTime : "";
                            WorkHours = GetWorkHour(TimeIn, TimeOut, flgActualOverlap);

                            #region EarlyIn/LateIn

                            if (!string.IsNullOrEmpty(TimeIn))
                            {
                                GetEarlyLateIn(TimeIn, ShiftIn, out EarlyIn, out LateIn);
                            }

                            if (!string.IsNullOrEmpty(LateIn) && LateIn != "00:00")
                            {
                                LineComments += " LateIn";
                            }

                            #endregion

                            #region EarlyOut/LateOut

                            if (!string.IsNullOrEmpty(TimeOut))
                            {
                                GetEarlyLateOut(TimeOut, ShiftOut, out EarlyOut, out LateOut);
                            }

                            if (!string.IsNullOrEmpty(EarlyOut) && EarlyOut != "00:00")
                            {
                                LineComments += " Early Out";
                            }

                            #endregion

                            #region Leaves

                            #region Full Day Leave
                            if (string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut) && ShiftHour != "00:00")
                            {
                                var LeaveRequest = (from a in dbHrPayroll.TrnsLeavesRequest
                                                    where a.EmpID == oEmp.ID
                                                    && a.LeaveFrom <= TodayDate
                                                    && a.LeaveTo >= TodayDate
                                                    && a.DocAprStatus == "LV0006"
                                                    select a).FirstOrDefault();
                                if (LeaveRequest == null)
                                {
                                    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(ShiftHour, ShiftName).FirstOrDefault();
                                    if (oDedRule != null)
                                    {
                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == oDedRule.LeaveType
                                                                select a).FirstOrDefault();
                                            LeaveHour = ShiftHour;
                                            LeaveCount = 1.0M;
                                            LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                            flgNewLeave = true;
                                            DeductionRule = oDedRule.Code;
                                        }
                                        else
                                        {
                                            MsgError("Leave Type not selected in deduction rule 3.");
                                        }
                                    }
                                }
                                else
                                {
                                    LeaveHour = ShiftHour;
                                    LeaveType = LeaveRequest != null ? LeaveRequest.MstLeaveType.Code : "-1";
                                    DeductionRule = "DR_03";
                                    LeaveCount = 1;
                                    flgNewLeave = false;
                                }
                            }

                            #endregion

                            #region Half Day Leave
                            if (!string.IsNullOrEmpty(WorkHours) && ShiftHour != "00:00")
                            {
                                string CalculateLeaveHour = "00:00";
                                CalculateLeaveHour = CalculateLeaveHoursForShifts(WorkHours, ShiftHour);
                                if (CalculateLeaveHour != "00:00")
                                {
                                    var oDedRule = dbHrPayroll.SpAppliedDeductionRuleCompanyAndEmployeeWise(CalculateLeaveHour, ShiftName).FirstOrDefault();
                                    if (oDedRule != null)
                                    {
                                        if (oDedRule.Code == "DR_02")
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                LeaveHour = CalculateHalfShiftHours(ShiftHour);
                                                LeaveCount = 0.5M;
                                                LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                flgNewLeave = true;
                                                strDeductionRule = oDedRule.Code;
                                            }
                                        }
                                        else if (oDedRule.Code == "DR_01")
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                LeaveCount = GetLeaveCountOnMinLeaves(LeaveHour, ShiftHour);
                                                LeaveHour = CalculateLeaveHour;
                                                LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                flgNewLeave = true;
                                                strDeductionRule = oDedRule.Code;
                                            }
                                        }
                                        else if (oDedRule.Code == "DR_03")
                                        {
                                            if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                            {
                                                var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                    where a.ID == oDedRule.LeaveType
                                                                    select a).FirstOrDefault();
                                                LeaveHour = ShiftHour;
                                                LeaveCount = 1.0M;
                                                LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                                flgNewLeave = true;
                                                DeductionRule = oDedRule.Code;
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Missing TimeIn Or TimeOut

                            if (((string.IsNullOrEmpty(TimeIn) && !string.IsNullOrEmpty(TimeOut)) || (!string.IsNullOrEmpty(TimeIn) && string.IsNullOrEmpty(TimeOut))) && ShiftHour != "00:00")
                            {
                                var LeaveRequest = (from a in dbHrPayroll.TrnsLeavesRequest
                                                    where a.EmpID == oEmp.ID
                                                    && a.LeaveFrom <= TodayDate
                                                    && a.LeaveTo >= TodayDate
                                                    && a.DocAprStatus == "LV0006"
                                                    select a).FirstOrDefault();
                                if (LeaveRequest == null)
                                {
                                    var oDedRule = (from a in dbHrPayroll.MstDeductionRules
                                                    where a.Code == "DR_03"
                                                    select a).FirstOrDefault();
                                    if (oDedRule != null)
                                    {
                                        if (oDedRule.LeaveType != null && oDedRule.LeaveType != 0)
                                        {
                                            var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                                where a.ID == oDedRule.LeaveType
                                                                select a).FirstOrDefault();
                                            LeaveHour = ShiftHour;
                                            LeaveCount = 1.0M;
                                            LeaveType = oLeaveMaster != null ? oLeaveMaster.Code : "-1";
                                            flgNewLeave = true;
                                            DeductionRule = oDedRule.Code;
                                        }
                                        else
                                        {
                                            MsgError("Leave Type not selected in deduction rule 3.");
                                        }
                                    }
                                }
                                else
                                {
                                    LeaveHour = ShiftHour;
                                    LeaveType = LeaveRequest != null ? LeaveRequest.MstLeaveType.Code : "-1";
                                    DeductionRule = "DR_03";
                                    LeaveCount = 1;
                                    flgNewLeave = false;
                                }
                            }

                            #endregion

                            #endregion

                            #region Overtime Calculation

                            if (Convert.ToBoolean(oEmp.FlgOTApplicable))
                            {
                                //Payroll Check
                                if (Convert.ToBoolean(oEmp.CfgPayrollDefination.FlgOT))
                                {
                                    if (WorkHours != "00:00")
                                    {
                                        if (flgIsWeekend || flgIsPublicHoliday)
                                        {
                                            OvertimeHours = WorkHours;
                                        }
                                        else
                                        {
                                            OvertimeHours = CalculateOTHours(WorkHours, ShiftHour);
                                        }
                                        if (OvertimeHours != "00:00")
                                        {
                                            int intOTId = Convert.ToInt32(oEmp.CfgPayrollDefination.OTValue);
                                            var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                             where a.ID == intOTId
                                                             select a).FirstOrDefault();
                                            OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                        }
                                    }
                                }
                                //Shift Check
                                else if (Convert.ToBoolean(flgShiftOT))
                                {
                                    if (flgIsWeekend || flgIsPublicHoliday)
                                    {
                                        OvertimeHours = WorkHours;
                                    }
                                    else
                                    {
                                        OvertimeHours = CalculateOTHours(WorkHours, ShiftHour);
                                    }
                                    if (OvertimeHours != "00:00")
                                    {
                                        if (flgIsPublicHoliday)
                                        {
                                            int intOTId = Convert.ToInt32(ShiftOTHolidayId);
                                            var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                             where a.ID == intOTId
                                                             select a).FirstOrDefault();
                                            OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                        }
                                        else if (flgIsOffDay)
                                        {
                                            int intOTId = Convert.ToInt32(ShiftOTOffDayId);
                                            var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                             where a.ID == intOTId
                                                             select a).FirstOrDefault();
                                            OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                        }
                                        else if (flgIsWeekend)
                                        {
                                            int intOTId = Convert.ToInt32(ShiftOTId);
                                            var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                             where a.ID == intOTId
                                                             select a).FirstOrDefault();
                                            OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                        }
                                        else
                                        {
                                            int intOTId = Convert.ToInt32(ShiftOTId);
                                            var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                             where a.ID == intOTId
                                                             select a).FirstOrDefault();
                                            OvertimeType = oOTMaster != null ? oOTMaster.Code : "-1";
                                        }
                                    }
                                }
                            }

                            #endregion

                            #region SandwichWorking
                            if (flgSandwich)
                            {
                                if (Convert.ToBoolean(oEmp.FlgSandwich))
                                {
                                    if (flgIsWeekend || flgIsPublicHoliday || flgIsOffDay)
                                    {
                                        if (AttendanceCount >= 2)
                                        {

                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Setting Grid
                            dtAttendance.Rows.Add(1);
                            dtAttendance.SetValue("Id", AttendanceCount, 0);
                            dtAttendance.SetValue("No", AttendanceCount, AttendanceCount + 1);
                            dtAttendance.SetValue("EmpCode", AttendanceCount, EmpCode.Trim());
                            dtAttendance.SetValue("EmpName", AttendanceCount, EmpName.Trim());
                            dtAttendance.SetValue("Date", AttendanceCount, Convert.ToDateTime(TodayDate).ToString("yyyyMMdd"));
                            dtAttendance.SetValue(clDay.DataBind.Alias, AttendanceCount, DayName);
                            dtAttendance.SetValue("Shift", AttendanceCount, ShiftName);
                            dtAttendance.SetValue("SfStart", AttendanceCount, ShiftIn);
                            dtAttendance.SetValue("SfEnd", AttendanceCount, ShiftOut);
                            dtAttendance.SetValue("SfHours", AttendanceCount, ShiftHour);
                            //dtAttendance.SetValue("ReportingTime", AttendanceCount, shiftReportingTime.Trim());
                            dtAttendance.SetValue("TimeIn", AttendanceCount, TimeIn);
                            dtAttendance.SetValue("TimeOut", AttendanceCount, TimeOut);
                            dtAttendance.SetValue("WorkHours", AttendanceCount, WorkHours);
                            dtAttendance.SetValue("LateInMin", AttendanceCount, LateIn);
                            dtAttendance.SetValue("EarlyOutMin", AttendanceCount, EarlyOut);
                            dtAttendance.SetValue("Status", AttendanceCount, LineComments);
                            //dtAttendance.SetValue("ShortHours", AttendanceCount, strShortHours.Trim());
                            dtAttendance.SetValue("OTType", AttendanceCount, OvertimeType.ToString());
                            dtAttendance.SetValue("OTHours", AttendanceCount, OvertimeHours);
                            dtAttendance.SetValue("LevHours", AttendanceCount, LeaveHour);
                            dtAttendance.SetValue("LevCount", AttendanceCount, string.Format("{0:0.00}", LeaveCount));
                            dtAttendance.SetValue("IsNewLeave", AttendanceCount, flgNewLeave == true ? "Y" : "N");
                            dtAttendance.SetValue("LevType", AttendanceCount, LeaveType.ToString());
                            //dtAttendance.SetValue("clDesc", AttendanceCount, strDesc.Trim());
                            //dtAttendance.SetValue("AdjHrs", AttendanceCount, "00:00");
                            //dtAttendance.SetValue("TotalHrs", AttendanceCount, strWorkHours.Trim());
                            //dtAttendance.SetValue("OTAdjt", AttendanceCount, "00:00");
                            //dtAttendance.SetValue("StandHrs", AttendanceCount, strStandardWorkingHours);
                            dtAttendance.SetValue(clDRType.DataBind.Alias, AttendanceCount, DeductionRule);
                            dtAttendance.SetValue(clRemarks.DataBind.Alias, AttendanceCount, Remarks);
                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region Attendance From Saved Data

                            var oAttRegister = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                where a.Date == TodayDate
                                                && a.EmpID == oEmp.ID
                                                select a).FirstOrDefault();
                            if (oAttRegister != null)
                            {
                                DayName = Convert.ToString(TodayDate.DayOfWeek);
                                var oShift = (from a in dbHrPayroll.MstShiftDetails
                                              where a.ShiftID == oAttRegister.ShiftID
                                              && a.Day == DayName
                                              select a).FirstOrDefault();

                                if (oShift != null)
                                {
                                    ShiftName = oShift.MstShifts.Description;
                                    ShiftDay = oShift.Day;
                                    ShiftIn = oShift.StartTime;
                                    ShiftOut = oShift.EndTime;
                                    ShiftHour = oShift.Duration;
                                    flgShiftOverlap = Convert.ToBoolean(oShift.FlgOutOverlap);
                                    flgShiftExpectedOverlap = Convert.ToBoolean(oShift.FlgExpectedOut);
                                    flgShiftOT = oShift.MstShifts.OverTime ?? false;
                                    flgShiftOTOffDay = oShift.MstShifts.FlgOffDayOverTime ?? false;
                                    flgShiftOTHoliday = oShift.MstShifts.FlgHoliDayOverTime ?? false;
                                    ShiftOTId = oShift.MstShifts.OverTimeID ?? 0;
                                    ShiftOTOffDayId = oShift.MstShifts.OffDayOverTime ?? 0;
                                    ShiftOTHolidayId = oShift.MstShifts.HoliDayOverTime ?? 0;
                                    if (ShiftHour == "00:00")
                                    {
                                        flgIsWeekend = true;
                                    }
                                }

                                TimeIn = oAttRegister.TimeIn;
                                TimeOut = oAttRegister.TimeOut;
                                WorkHours = oAttRegister.WorkHour;
                                LateIn = oAttRegister.LateInMin;
                                EarlyOut = oAttRegister.EarlyOutMin;
                                LineComments = oAttRegister.Remarks;

                                if (oAttRegister.LeaveType != null)
                                {
                                    var oLeaveMaster = (from a in dbHrPayroll.MstLeaveType
                                                        where a.ID == oAttRegister.LeaveType
                                                        select a).FirstOrDefault();
                                    if (oLeaveMaster != null)
                                    {
                                        LeaveType = oLeaveMaster.Code;
                                        LeaveCount = Convert.ToDecimal(oAttRegister.LeaveCount);
                                        LeaveHour = oAttRegister.LeaveHour;
                                        flgNewLeave = Convert.ToBoolean(oAttRegister.FlgIsNewLeave);
                                    }
                                }
                                if (oAttRegister.OTType != null)
                                {
                                    var oOTMaster = (from a in dbHrPayroll.MstOverTime
                                                     where a.ID == oAttRegister.OTType
                                                     select a).FirstOrDefault();
                                    if (oOTMaster != null)
                                    {
                                        OvertimeType = oOTMaster.Code;
                                        OvertimeHours = oAttRegister.OTHour;
                                    }
                                }
                                DeductionRule = oAttRegister.LeaveDedRule;
                                Remarks = oAttRegister.Remarks;

                                #region Setting Grid
                                dtAttendance.Rows.Add(1);
                                dtAttendance.SetValue("Id", AttendanceCount, 0);
                                dtAttendance.SetValue("No", AttendanceCount, AttendanceCount + 1);
                                dtAttendance.SetValue("EmpCode", AttendanceCount, EmpCode.Trim());
                                dtAttendance.SetValue("EmpName", AttendanceCount, EmpName.Trim());
                                dtAttendance.SetValue("Date", AttendanceCount, Convert.ToDateTime(TodayDate).ToString("yyyyMMdd"));
                                dtAttendance.SetValue(clDay.DataBind.Alias, AttendanceCount, DayName);
                                dtAttendance.SetValue("Shift", AttendanceCount, ShiftName);
                                dtAttendance.SetValue("SfStart", AttendanceCount, ShiftIn);
                                dtAttendance.SetValue("SfEnd", AttendanceCount, ShiftOut);
                                dtAttendance.SetValue("SfHours", AttendanceCount, ShiftHour);
                                //dtAttendance.SetValue("ReportingTime", AttendanceCount, shiftReportingTime.Trim());
                                dtAttendance.SetValue("TimeIn", AttendanceCount, TimeIn);
                                dtAttendance.SetValue("TimeOut", AttendanceCount, TimeOut);
                                dtAttendance.SetValue("WorkHours", AttendanceCount, WorkHours);
                                dtAttendance.SetValue("LateInMin", AttendanceCount, LateIn);
                                dtAttendance.SetValue("EarlyOutMin", AttendanceCount, EarlyOut);
                                dtAttendance.SetValue("Status", AttendanceCount, LineComments);
                                //dtAttendance.SetValue("ShortHours", AttendanceCount, strShortHours.Trim());
                                dtAttendance.SetValue("OTType", AttendanceCount, OvertimeType.ToString());
                                dtAttendance.SetValue("OTHours", AttendanceCount, OvertimeHours);
                                dtAttendance.SetValue("LevHours", AttendanceCount, LeaveHour);
                                dtAttendance.SetValue("LevCount", AttendanceCount, string.Format("{0:0.00}", LeaveCount));
                                dtAttendance.SetValue("IsNewLeave", AttendanceCount, flgNewLeave == true ? "Y" : "N");
                                dtAttendance.SetValue("LevType", AttendanceCount, LeaveType.ToString());
                                //dtAttendance.SetValue("clDesc", AttendanceCount, strDesc.Trim());
                                //dtAttendance.SetValue("AdjHrs", AttendanceCount, "00:00");
                                //dtAttendance.SetValue("TotalHrs", AttendanceCount, strWorkHours.Trim());
                                //dtAttendance.SetValue("OTAdjt", AttendanceCount, "00:00");
                                //dtAttendance.SetValue("StandHrs", AttendanceCount, strStandardWorkingHours);
                                dtAttendance.SetValue(clDRType.DataBind.Alias, AttendanceCount, DeductionRule);
                                dtAttendance.SetValue(clRemarks.DataBind.Alias, AttendanceCount, Remarks);
                                #endregion
                            }

                            #endregion
                        }
                        AttendanceCount++;
                    }
                    prog.Text = "(" + prog.Value.ToString() + " of " + totalCnt.ToString() + " ) Attendance Processing of EmpID--> " + EmpCode + "";
                }
                grdAttendance.LoadFromDataSource();
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
            finally
            {
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    totalCnt = 0;
                }
            }
        }

        private void SavingAttendance()
        {
            string EmpCode = "";
            string TimeIn = "", TimeOut = "", WorkHour = "", DayName = "", TempDate = "";
            string LateIn = "", EarlyOut = "", LeaveHour = "00:00", LeaveType = "-1", DeductionRule = "";
            decimal LeaveCount = 0;
            string OverTimeType = "-1", OverTimeHour = "00:00";
            string ShiftCode = "";
            string Descriptions = "", Remarks = "";
            int RecId = 0, PeriodID = 0;
            bool flgNewLeave = false;
            DateTime TodayDate = DateTime.Now;
            try
            {
                PeriodID = Convert.ToInt32(cmbPeriod.Value);
                for (int i = 1; i < grdAttendance.RowCount + 1; i++)
                {
                    RecId = Convert.ToInt32((grdAttendance.Columns.Item(clId.UniqueID).Cells.Item(i).Specific as EditText).Value);
                    EmpCode = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    TimeIn = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    TimeOut = (grdAttendance.Columns.Item(clEmpCode.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    TempDate = (grdAttendance.Columns.Item(clTodayDate.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    TodayDate = DateTime.ParseExact(TempDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                    DayName = (grdAttendance.Columns.Item(clDay.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    WorkHour = (grdAttendance.Columns.Item(clWorkHours.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    ShiftCode = (grdAttendance.Columns.Item(clShiftCode.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    LateIn = (grdAttendance.Columns.Item(clLateInMinutes.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    EarlyOut = (grdAttendance.Columns.Item(clEarlyOutMinutes.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    flgNewLeave = (grdAttendance.Columns.Item(clIsNewLeave.UniqueID).Cells.Item(i).Specific as CheckBox).Checked;
                    LeaveHour = (grdAttendance.Columns.Item(clLeaveHour.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    LeaveCount = Convert.ToDecimal((grdAttendance.Columns.Item(clLeaveCount.UniqueID).Cells.Item(i).Specific as EditText).Value);
                    LeaveType = (grdAttendance.Columns.Item(clLeaveType.UniqueID).Cells.Item(i).Specific as ComboBox).Selected.Value;
                    DeductionRule = (grdAttendance.Columns.Item(clDRType.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    OverTimeType = (grdAttendance.Columns.Item(clOTType.UniqueID).Cells.Item(i).Specific as ComboBox).Selected.Value;
                    OverTimeHour = (grdAttendance.Columns.Item(clOTHour.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    Descriptions = (grdAttendance.Columns.Item(clDescription.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    Remarks = (grdAttendance.Columns.Item(clRemarks.UniqueID).Cells.Item(i).Specific as EditText).Value;
                    if (RecId == 0)
                    {
                        var oEmp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == EmpCode
                                    select a).FirstOrDefault();
                        var oShift = (from a in dbHrPayroll.MstShifts
                                      where a.Code == ShiftCode
                                      select a).FirstOrDefault();
                        TrnsAttendanceRegister oDoc = new TrnsAttendanceRegister();
                        dbHrPayroll.TrnsAttendanceRegister.InsertOnSubmit(oDoc);
                        oDoc.MstEmployee = oEmp;
                        oDoc.MstShifts = oShift;
                        oDoc.PeriodID = PeriodID;
                        oDoc.Date = TodayDate;
                        oDoc.DateDay = DayName;
                        oDoc.TimeIn = TimeIn;
                        oDoc.TimeOut = TimeOut;
                        oDoc.WorkHour = WorkHour;
                        oDoc.LateInMin = LateIn;
                        oDoc.EarlyOutMin = EarlyOut;
                        oDoc.Description = Descriptions;
                        oDoc.Remarks = Remarks;

                        if (OverTimeType != "-1" && OverTimeHour != "00:00")
                        {
                            var oOTType = (from a in dbHrPayroll.MstOverTime
                                           where a.Code == OverTimeType
                                           select a).FirstOrDefault();
                            if (oOTType != null)
                            {
                                oDoc.OTType = oOTType.ID;
                                oDoc.OTHour = OverTimeHour;
                            }
                        }
                        else
                        {
                            oDoc.OTType = null;
                            oDoc.OTHour = "00:00";
                        }
                        if (LeaveType != "-1" && LeaveHour != "00:00")
                        {
                            var oLeaveType = (from a in dbHrPayroll.MstLeaveType
                                              where a.Code == LeaveType
                                              select a).FirstOrDefault();
                            if (oLeaveType != null)
                            {
                                oDoc.LeaveType = oLeaveType.ID;
                                oDoc.LeaveHour = LeaveHour;
                                oDoc.LeaveCount = LeaveCount;
                                oDoc.FlgIsNewLeave = flgNewLeave;
                                oDoc.LeaveDedRule = DeductionRule;
                            }
                        }
                        else
                        {
                            oDoc.LeaveType = null;
                            oDoc.LeaveHour = "00:00";
                            oDoc.LeaveCount = 0m;
                            oDoc.FlgIsNewLeave = false;
                            oDoc.LeaveDedRule = "";
                        }
                        oDoc.Processed = true;
                        oDoc.FlgPosted = false;
                        oDoc.CreateDate = DateTime.Now;
                        oDoc.UpdateDate = DateTime.Now;
                        oDoc.UserId = oCompany.UserName;
                        oDoc.UpdatedBy = oCompany.UserName;
                    }
                    else
                    {
                        var oEmp = (from a in dbHrPayroll.MstEmployee
                                    where a.EmpID == EmpCode
                                    select a).FirstOrDefault();
                        var oShift = (from a in dbHrPayroll.MstShifts
                                      where a.Code == ShiftCode
                                      select a).FirstOrDefault();
                        TrnsAttendanceRegister oDoc = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                       where a.Id == RecId
                                                       select a).FirstOrDefault();
                        oDoc.MstShifts = oShift;
                        oDoc.PeriodID = PeriodID;
                        oDoc.Date = TodayDate;
                        oDoc.DateDay = DayName;
                        oDoc.TimeIn = TimeIn;
                        oDoc.TimeOut = TimeOut;
                        oDoc.WorkHour = WorkHour;
                        oDoc.LateInMin = LateIn;
                        oDoc.EarlyOutMin = EarlyOut;
                        oDoc.Description = Descriptions;
                        oDoc.Remarks = Remarks;

                        if (OverTimeType != "-1" && OverTimeHour != "00:00")
                        {
                            var oOTType = (from a in dbHrPayroll.MstOverTime
                                           where a.Code == OverTimeType
                                           select a).FirstOrDefault();
                            if (oOTType != null)
                            {
                                oDoc.OTType = oOTType.ID;
                                oDoc.OTHour = OverTimeHour;
                            }
                        }
                        else
                        {
                            oDoc.OTType = null;
                            oDoc.OTHour = "00:00";
                        }
                        if (LeaveType != "-1" && LeaveHour != "00:00")
                        {
                            var oLeaveType = (from a in dbHrPayroll.MstLeaveType
                                              where a.Code == LeaveType
                                              select a).FirstOrDefault();
                            if (oLeaveType != null)
                            {
                                oDoc.LeaveType = oLeaveType.ID;
                                oDoc.LeaveHour = LeaveHour;
                                oDoc.LeaveCount = LeaveCount;
                                oDoc.FlgIsNewLeave = flgNewLeave;
                                oDoc.LeaveDedRule = DeductionRule;
                            }
                        }
                        else
                        {
                            oDoc.LeaveType = null;
                            oDoc.LeaveHour = "00:00";
                            oDoc.LeaveCount = 0m;
                            oDoc.FlgIsNewLeave = false;
                            oDoc.LeaveDedRule = "";
                        }
                        oDoc.Processed = true;
                        oDoc.FlgPosted = false;
                        oDoc.UpdateDate = DateTime.Now;
                        oDoc.UpdatedBy = oCompany.UserName;
                    }
                }
                dbHrPayroll.SubmitChanges();
                MsgSuccess("Record saved successfully.");
                dtAttendance.Rows.Clear();
                grdAttendance.LoadFromDataSource();
            }
            catch (Exception ex)
            {
                MsgError("Error while saving records.");
                logger(ex);
            }
        }

        private void PostAttendance()
        {

            try
            {
                DateTime PeriodStartDate, PeriodEndDate;
                string PayrollName, PeriodName;
                int TotalEmployees = 0, LeaveDocNum = 0;
                PayrollName = cmbPayroll.Value.Trim();
                PeriodName = cmbPeriod.Value.Trim();
                PeriodStartDate = DateTime.ParseExact(txtFromDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                PeriodEndDate = DateTime.ParseExact(txtToDate.Value, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
                var oPayroll = (from a in dbHrPayroll.CfgPayrollDefination
                                where a.ID.ToString() == PayrollName
                                select a).FirstOrDefault();
                var oPeriod = (from a in dbHrPayroll.CfgPeriodDates
                               where a.ID.ToString() == PeriodName
                               select a).FirstOrDefault();
                int TempValue = dbHrPayroll.TrnsLeavesRequest.Max(a => a.DocNum) ?? 0;
                LeaveDocNum = TempValue == 0 ? 1 : TempValue + 1;
                FillSelectedEmployee();
                TotalEmployees = oSelectedEmployee.Count;
                prog = oApplication.StatusBar.CreateProgressBar("Attendance Posting Started.", TotalEmployees, false);
                prog.Value = 0;
                for (int i = 0; i < oSelectedEmployee.Count; i++)
                {
                    prog.Value += 1;
                    var oEmp = (from a in dbHrPayroll.MstEmployee
                                where a.EmpID == oSelectedEmployee[i]
                                select a).FirstOrDefault();
                    if (oEmp == null)
                    {
                        MsgWarning("Employee not found");
                        continue;
                    }
                    string EmpName = string.Empty;
                    EmpName = oEmp.FirstName + " " + oEmp.MiddleName + " " + oEmp.LastName;
                    var oAttendanceCollection = (from a in dbHrPayroll.TrnsAttendanceRegister
                                                 where a.EmpID == oEmp.ID
                                                 && a.PeriodID.ToString() == PeriodName
                                                 && a.FlgPosted == false
                                                 select a).ToList();
                    #region Overtime Record Head
                    TrnsEmployeeOvertime oHead;
                    oHead = (from a in dbHrPayroll.TrnsEmployeeOvertime
                             where a.EmployeeId == oEmp.ID
                             && a.Period == oPeriod.ID
                             select a).FirstOrDefault();

                    if (oHead == null)
                    {
                        oHead = new TrnsEmployeeOvertime();
                        oHead.EmployeeId = oEmp.ID;
                        oHead.Period = oPeriod.ID;
                        oHead.UserId = oCompany.UserName;
                        oHead.UpdatedBy = oCompany.UserName;
                        oHead.CreateDate = DateTime.Now;
                        oHead.UpdateDate = DateTime.Now;
                        dbHrPayroll.TrnsEmployeeOvertime.InsertOnSubmit(oHead);
                    }
                    #endregion
                    foreach (var OneDay in oAttendanceCollection)
                    {

                        #region Leaves
                        if (Convert.ToBoolean(OneDay.FlgIsNewLeave))
                        {
                            var oLeaveCheck = (from a in dbHrPayroll.TrnsLeavesRequest
                                               where a.EmpID == oEmp.ID
                                               && a.LeaveFrom <= OneDay.Date
                                               && a.LeaveTo >= OneDay.Date
                                               select a).Count();

                            if (oLeaveCheck == 0)
                            {
                                var oLeaveType = (from a in dbHrPayroll.MstLeaveType
                                                  where a.ID == OneDay.LeaveType
                                                  select a).FirstOrDefault();
                                decimal LeaveCount = Convert.ToDecimal(OneDay.LeaveCount);
                                string LeaveUnits = string.Empty;
                                if (LeaveCount == 0.5M)
                                {
                                    LeaveUnits = "Day";
                                }
                                else if (LeaveCount == 1M)
                                {
                                    LeaveUnits = "Day";
                                }
                                else
                                {
                                    LeaveUnits = "MIN";
                                }
                                TrnsLeavesRequest oLeaveRequest = new TrnsLeavesRequest();
                                oLeaveRequest.EmpID = oEmp.ID;
                                oLeaveRequest.Series = 0;
                                oLeaveRequest.EmpName = EmpName;
                                oLeaveRequest.DocNum = LeaveDocNum;
                                oLeaveRequest.DocDate = OneDay.Date;
                                oLeaveRequest.LeaveFrom = OneDay.Date;
                                oLeaveRequest.LeaveTo = OneDay.Date;
                                oLeaveRequest.UnitsID = LeaveUnits;
                                oLeaveRequest.UnitsLOVType = "LeaveUnits";
                                oLeaveRequest.FlgMedical = false;
                                oLeaveRequest.FlgPaid = false;
                                oLeaveRequest.FlgVisa = false;
                                oLeaveRequest.TotalCount = OneDay.LeaveCount;
                                oLeaveRequest.LeaveType = oLeaveType.ID;
                                oLeaveRequest.LeaveDescription = oLeaveType.Description;
                                oLeaveRequest.CreatedBy = oCompany.UserName;
                                oLeaveRequest.UpdatedBy = oCompany.UserName;
                                oLeaveRequest.CreateDate = DateTime.Now;
                                oLeaveRequest.UpdateDate = DateTime.Now;
                                oLeaveRequest.AttendanceID = OneDay.Id;
                                dbHrPayroll.TrnsLeavesRequest.InsertOnSubmit(oLeaveRequest);
                            }
                            else
                            {
                                MsgWarning("Leave already entery for Employee: " + oEmp.EmpID + " @ Date: " + Convert.ToDateTime(OneDay.Date).ToString("MM/dd/yyyy"));
                            }
                        }
                        #endregion

                        #region Overtime

                        string OTHours = "00:00";
                        int OTType = 0;
                        decimal OTAmount = 0M, decOTHour = 0M;
                        OTHours = OneDay.OTHour;
                        if (OneDay.OTType != null)
                        {
                            OTType = Convert.ToInt32(OneDay.OTType);
                        }
                        if (OTType > 0 && OTHours != "00:00")
                        {
                            var oOverTimeType = (from a in dbHrPayroll.MstOverTime
                                                 where a.ID == OTType
                                                 select a).FirstOrDefault();
                            var oCheckPreviousEntry = (from a in dbHrPayroll.TrnsEmployeeOvertimeDetail
                                                       where a.TrnsEmployeeOvertime.EmployeeId == oEmp.ID
                                                       && a.OTDate == OneDay.Date
                                                       && a.FlgActive == true
                                                       select a).FirstOrDefault();
                            if (oCheckPreviousEntry == null)
                            {
                                decOTHour = CalculateHourTimeCount(OTHours);
                                OTAmount = setRowAmnt(oEmp, decOTHour, OneDay.PeriodID.ToString(), oOverTimeType.ID.ToString());

                                TrnsEmployeeOvertimeDetail oLine = new TrnsEmployeeOvertimeDetail();
                                oLine.OvertimeID = oOverTimeType.ID;
                                oLine.ValueType = oOverTimeType.ValueType;
                                oLine.OTValue = oOverTimeType.Value;
                                oLine.OTDate = OneDay.Date;
                                oLine.FromTime = "00:00";
                                oLine.ToTime = "00:00";
                                oLine.OTHours = decOTHour;
                                oLine.Amount = OTAmount;
                                oLine.BasicSalary = oEmp.BasicSalary;
                                oLine.FlgActive = true;
                                oLine.UserId = oCompany.UserName;
                                oLine.UpdatedBy = oCompany.UserName;
                                oLine.CreateDate = DateTime.Now;
                                oLine.UpdateDate = DateTime.Now;
                                oHead.TrnsEmployeeOvertimeDetail.Add(oLine);
                            }
                            else
                            {
                                MsgWarning("Overtime already entered for date: " + Convert.ToDateTime(OneDay.Date).ToString("MM/dd/yyyy"));
                            }
                        }
                        #endregion

                        #region Attendance Setting

                        OneDay.Processed = true;
                        OneDay.FlgPosted = true;
                        OneDay.UpdateDate = DateTime.Now;
                        OneDay.UpdatedBy = oCompany.UserName;

                        #endregion

                    }
                    dbHrPayroll.SubmitChanges();
                }
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                    TotalEmployees = 0;
                }
            }
            catch (Exception ex)
            {
                logger(ex);
            }
            finally
            {
                System.Windows.Forms.Application.DoEvents();
                if (prog != null)
                {
                    prog.Stop();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(prog);
                    prog = null;
                }
            }
        }


        #endregion
    }

    #region Employee Leaves Old Commit
    class EmployeeLeaves
    {
        public string EmployeeCode;
        public string LeaveCode;
        public decimal Balance;
        public int Priority;

        public EmployeeLeaves(string empcode, string leavecode, CfgPeriodDates selectedperiod)
        {
            try
            {
                using (dbHRMS dbHrPayroll = new dbHRMS(Program.ConStrHRMS))
                {
                    String iApprovedCode = "LV0006";
                    decimal tempBalance = 0, approvedRequests = 0, availablebalance = 0;
                    var oEmp = (from a in dbHrPayroll.MstEmployee where a.EmpID == empcode select a).FirstOrDefault();
                    var oLeave = (from a in dbHrPayroll.MstLeaveType where a.Code == leavecode select a).FirstOrDefault();
                    var oPayroll = (from a in dbHrPayroll.CfgPayrollDefination where a.ID == oEmp.PayrollID select a).FirstOrDefault();
                    var oCal = (from a in dbHrPayroll.MstCalendar where a.FlgActive == true select a).FirstOrDefault();
                    var ApprovedLeavesRecords = dbHrPayroll.TrnsLeavesRequest.Where(a => a.EmpID == oEmp.ID && a.MstLeaveType.Code == oLeave.Code && a.DocAprStatus == iApprovedCode && a.LeaveFrom >= oCal.StartDate && a.LeaveTo <= oCal.EndDate).GroupBy(a => a.EmpID).Select(a => new { Amount = a.Sum(b => b.TotalCount) }).OrderByDescending(a => a.Amount).ToList();
                    if (ApprovedLeavesRecords.Count > 0)
                    {
                        approvedRequests = ApprovedLeavesRecords.FirstOrDefault().Amount != null ? Convert.ToDecimal(ApprovedLeavesRecords.FirstOrDefault().Amount) : 0M;
                    }
                    var oEmpLeave = (from a in dbHrPayroll.MstEmployeeLeaves
                                     where a.MstEmployee.EmpID == oEmp.EmpID
                                         && a.MstLeaveType.Code == oLeave.Code
                                         && a.FromDt == oCal.StartDate
                                     select a).FirstOrDefault();
                    var oPeriodCollection = (from a in dbHrPayroll.CfgPeriodDates
                                             where a.PayrollId == oPayroll.ID &&
                                             a.CalCode == oCal.Code
                                             select a).ToList();
                    int count = 1, PeriodCount = 0;
                    foreach (var OnePeriod in oPeriodCollection)
                    {
                        if (OnePeriod.ID == selectedperiod.ID)
                        {
                            PeriodCount = count;
                        }
                        count++;
                    }
                    count--;
                    PeriodCount = (oPeriodCollection.Count - PeriodCount) + 1;
                    EmployeeCode = oEmp.EmpID;
                    LeaveCode = oLeave.Code;
                    //tempBalance = ((oEmpLeave.LeavesEntitled + oEmpLeave.LeavesCarryForward) / count) * PeriodCount;
                    if (oLeave.AccumulativeCount > 0)
                    {
                        tempBalance = ((oEmpLeave.LeavesEntitled + oEmpLeave.LeavesCarryForward) / PeriodCount);
                    }
                    else
                    {
                        tempBalance = (oEmpLeave.LeavesEntitled + oEmpLeave.LeavesCarryForward);
                    }

                    availablebalance = (oEmpLeave.LeavesEntitled + oEmpLeave.LeavesCarryForward) - approvedRequests;

                    if (tempBalance <= availablebalance)
                    {
                        Balance = tempBalance;
                    }
                    else
                    {
                        Balance = availablebalance;
                    }
                    if (oLeave.Code == "Casual")
                    {
                        Priority = 1;
                    }
                    else if (oLeave.Code == "Sick")
                    {
                        Priority = 2;
                    }
                    else if (oLeave.Code == "Annual")
                    {
                        Priority = 3;
                    }
                    else if (oLeave.Code == "Absent")
                    {
                        Priority = 4;
                    }
                }
            }
            catch
            {
            }
        }
    }
    #endregion

#endregion
}


class PayrollShifts
{
    public string ShiftCode { get; set; }
    public string ShiftDay { get; set; }
    public int LowerTimeIn { get; set; }
    public int UpperTimeIn { get; set; }
    public int Priority { get; set; }

}